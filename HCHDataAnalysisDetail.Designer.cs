// ------------------------------------------------------------------------------
// <auto-generated>
// This code was generated by a tool.
// Runtime Version:4.0.30319.42000
// 
// Changes to this file may cause incorrect behavior and will be lost if
// the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Data;
using System.Diagnostics;
using System.Runtime.CompilerServices;
using Microsoft.VisualBasic.CompilerServices;

namespace BossAdmin
{



    /// <summary>
/// Represents a strongly typed in-memory cache of data.
/// </summary>
    [Serializable()]
    [System.ComponentModel.DesignerCategory("code")]
    [System.ComponentModel.ToolboxItem(true)]
    [System.Xml.Serialization.XmlSchemaProvider("GetTypedDataSetSchema")]
    [System.Xml.Serialization.XmlRoot("HCHDataAnalysisDetail")]
    [System.ComponentModel.Design.HelpKeyword("vs.data.DataSet")]
    public partial class HCHDataAnalysisDetail : DataSet
    {

        private spGetAnalysisDataTable tablespGetAnalysis;

        private SchemaSerializationMode _schemaSerializationMode = SchemaSerializationMode.IncludeSchema;

        [DebuggerNonUserCode()]
        [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        public HCHDataAnalysisDetail() : base()
        {
            BeginInit();
            InitClass();
            System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = SchemaChanged;
            base.Tables.CollectionChanged+=schemaChangedHandler;
            base.Relations.CollectionChanged+=schemaChangedHandler;
            EndInit();
        }

        [DebuggerNonUserCode()]
        [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        protected HCHDataAnalysisDetail(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : base(info, context, false)
        {
            if (IsBinarySerialized(info, context)==true)
            {
                InitVars(false);
                System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler1 = SchemaChanged;
                Tables.CollectionChanged+=schemaChangedHandler1;
                Relations.CollectionChanged+=schemaChangedHandler1;
                return;
            }
            string strSchema = Conversions.ToString(info.GetValue("XmlSchema", typeof(string)));
            if (DetermineSchemaSerializationMode(info, context)==SchemaSerializationMode.IncludeSchema)
            {
                var ds = new DataSet();
                ds.ReadXmlSchema(new System.Xml.XmlTextReader(new System.IO.StringReader(strSchema)));
                if (ds.Tables["spGetAnalysis"] is not null)
                {
                    base.Tables.Add(new spGetAnalysisDataTable(ds.Tables["spGetAnalysis"]));
                }
                DataSetName=ds.DataSetName;
                Prefix=ds.Prefix;
                Namespace=ds.Namespace;
                Locale=ds.Locale;
                CaseSensitive=ds.CaseSensitive;
                EnforceConstraints=ds.EnforceConstraints;
                Merge(ds, false, MissingSchemaAction.Add);
                InitVars();
            }
            else
            {
                ReadXmlSchema(new System.Xml.XmlTextReader(new System.IO.StringReader(strSchema)));
            }
            GetSerializationData(info, context);
            System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = SchemaChanged;
            base.Tables.CollectionChanged+=schemaChangedHandler;
            Relations.CollectionChanged+=schemaChangedHandler;
        }

        [DebuggerNonUserCode()]
        [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public spGetAnalysisDataTable spGetAnalysis
        {
            get
            {
                return tablespGetAnalysis;
            }
        }

        [DebuggerNonUserCode()]
        [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        [System.ComponentModel.Browsable(true)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Visible)]
        public override SchemaSerializationMode SchemaSerializationMode
        {
            get
            {
                return _schemaSerializationMode;
            }
            set
            {
                _schemaSerializationMode=value;
            }
        }

        [DebuggerNonUserCode()]
        [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new DataTableCollection Tables
        {
            get
            {
                return base.Tables;
            }
        }

        [DebuggerNonUserCode()]
        [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new DataRelationCollection Relations
        {
            get
            {
                return base.Relations;
            }
        }

        [DebuggerNonUserCode()]
        [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        protected override void InitializeDerivedDataSet()
        {
            BeginInit();
            InitClass();
            EndInit();
        }

        [DebuggerNonUserCode()]
        [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        public override DataSet Clone()
        {
            HCHDataAnalysisDetail cln = (HCHDataAnalysisDetail)base.Clone();
            cln.InitVars();
            cln.SchemaSerializationMode=SchemaSerializationMode;
            return cln;
        }

        [DebuggerNonUserCode()]
        [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        protected override bool ShouldSerializeTables()
        {
            return false;
        }

        [DebuggerNonUserCode()]
        [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        protected override bool ShouldSerializeRelations()
        {
            return false;
        }

        [DebuggerNonUserCode()]
        [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        protected override void ReadXmlSerializable(System.Xml.XmlReader reader)
        {
            if (DetermineSchemaSerializationMode(reader)==SchemaSerializationMode.IncludeSchema)
            {
                Reset();
                var ds = new DataSet();
                ds.ReadXml(reader);
                if (ds.Tables["spGetAnalysis"] is not null)
                {
                    base.Tables.Add(new spGetAnalysisDataTable(ds.Tables["spGetAnalysis"]));
                }
                DataSetName=ds.DataSetName;
                Prefix=ds.Prefix;
                Namespace=ds.Namespace;
                Locale=ds.Locale;
                CaseSensitive=ds.CaseSensitive;
                EnforceConstraints=ds.EnforceConstraints;
                Merge(ds, false, MissingSchemaAction.Add);
                InitVars();
            }
            else
            {
                ReadXml(reader);
                InitVars();
            }
        }

        [DebuggerNonUserCode()]
        [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        protected override System.Xml.Schema.XmlSchema GetSchemaSerializable()
        {
            var stream = new System.IO.MemoryStream();
            WriteXmlSchema(new System.Xml.XmlTextWriter(stream, null));
            stream.Position=0L;
            return System.Xml.Schema.XmlSchema.Read(new System.Xml.XmlTextReader(stream), null);
        }

        [DebuggerNonUserCode()]
        [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        internal void InitVars()
        {
            InitVars(true);
        }

        [DebuggerNonUserCode()]
        [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        internal void InitVars(bool initTable)
        {
            tablespGetAnalysis=(spGetAnalysisDataTable)base.Tables["spGetAnalysis"];
            if (initTable==true)
            {
                if (tablespGetAnalysis is not null)
                {
                    tablespGetAnalysis.InitVars();
                }
            }
        }

        [DebuggerNonUserCode()]
        [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        private void InitClass()
        {
            DataSetName="HCHDataAnalysisDetail";
            Prefix="";
            Namespace="http://tempuri.org/HCHDataAnalysisDetail.xsd";
            EnforceConstraints=true;
            SchemaSerializationMode=SchemaSerializationMode.IncludeSchema;
            tablespGetAnalysis=new spGetAnalysisDataTable();
            base.Tables.Add(tablespGetAnalysis);
        }

        [DebuggerNonUserCode()]
        [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        private bool ShouldSerializespGetAnalysis()
        {
            return false;
        }

        [DebuggerNonUserCode()]
        [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        private void SchemaChanged(object sender, System.ComponentModel.CollectionChangeEventArgs e)
        {
            if (e.Action==System.ComponentModel.CollectionChangeAction.Remove)
            {
                InitVars();
            }
        }

        [DebuggerNonUserCode()]
        [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        public static System.Xml.Schema.XmlSchemaComplexType GetTypedDataSetSchema(System.Xml.Schema.XmlSchemaSet xs)
        {
            var ds = new HCHDataAnalysisDetail();
            var type = new System.Xml.Schema.XmlSchemaComplexType();
            var sequence = new System.Xml.Schema.XmlSchemaSequence();
            var any = new System.Xml.Schema.XmlSchemaAny();
            any.Namespace=ds.Namespace;
            sequence.Items.Add(any);
            type.Particle=sequence;
            var dsSchema = ds.GetSchemaSerializable();
            if (xs.Contains(dsSchema.TargetNamespace))
            {
                var s1 = new System.IO.MemoryStream();
                var s2 = new System.IO.MemoryStream();
                try
                {
                    System.Xml.Schema.XmlSchema schema = null;
                    dsSchema.Write(s1);
                    var schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator();
                    while (schemas.MoveNext())
                    {
                        schema=(System.Xml.Schema.XmlSchema)schemas.Current;
                        s2.SetLength(0L);
                        schema.Write(s2);
                        if (s1.Length==s2.Length)
                        {
                            s1.Position=0L;
                            s2.Position=0L;

                            while (s1.Position!=s1.Length&&s1.ReadByte()==s2.ReadByte())
                            {


                            }
                            if (s1.Position==s1.Length)
                            {
                                return type;
                            }
                        }

                    }
                }
                finally
                {
                    if (s1 is not null)
                    {
                        s1.Close();
                    }
                    if (s2 is not null)
                    {
                        s2.Close();
                    }
                }
            }
            xs.Add(dsSchema);
            return type;
        }

        [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        public delegate void spGetAnalysisRowChangeEventHandler(object sender, spGetAnalysisRowChangeEvent e);

        /// <summary>
    /// Represents the strongly named DataTable class.
    /// </summary>
        [Serializable()]
        [System.Xml.Serialization.XmlSchemaProvider("GetTypedTableSchema")]
        public partial class spGetAnalysisDataTable : TypedTableBase<spGetAnalysisRow>
        {

            private DataColumn columnVersionName;

            private DataColumn columnJobID;

            private DataColumn columnNewMargin;

            private DataColumn columnCostProjectID;

            private DataColumn columnAnalysisDate;

            private DataColumn columnCostedDate;

            private DataColumn columnPlanID;

            private DataColumn columnProjectID;

            private DataColumn columnCostProject;

            private DataColumn columnBudgetCost;

            private DataColumn columnPlanPrice;

            private DataColumn columnLotCosts;

            private DataColumn columnPriceWithoutLot;

            private DataColumn columnSquareFeet;

            private DataColumn columnPricePerFoot;

            private DataColumn columnSoftCosts;

            private DataColumn columnUpdatedPrice;

            private DataColumn columnAnalysisID;

            private DataColumn columnCostPerFoot;

            private DataColumn columnProjectName;

            private DataColumn columnTaxPermitDistrict;

            private DataColumn columnTaxRate;

            private DataColumn columnPlanProj;

            private DataColumn columnOptProj;

            private DataColumn columnCpyProject;

            private DataColumn columnActualCst;

            private DataColumn columnGrsMargin;

            private DataColumn columnNewSalesPrc;

            private DataColumn columnNewSalesPrcWithLot;

            private DataColumn columnAnalysisPrice;

            private DataColumn columnPeriod;

            private DataColumn columnProjectPremium;

            private DataColumn columnCreatedBy;

            private DataColumn columnNotes;

            private DataColumn columnNote;

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public spGetAnalysisDataTable() : base()
            {
                TableName="spGetAnalysis";
                BeginInit();
                InitClass();
                EndInit();
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            internal spGetAnalysisDataTable(DataTable table) : base()
            {
                TableName=table.TableName;
                if (table.CaseSensitive!=table.DataSet.CaseSensitive)
                {
                    CaseSensitive=table.CaseSensitive;
                }
                if ((table.Locale.ToString()??"")!=(table.DataSet.Locale.ToString()??""))
                {
                    Locale=table.Locale;
                }
                if ((table.Namespace??"")!=(table.DataSet.Namespace??""))
                {
                    Namespace=table.Namespace;
                }
                Prefix=table.Prefix;
                MinimumCapacity=table.MinimumCapacity;
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            protected spGetAnalysisDataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : base(info, context)
            {
                InitVars();
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public DataColumn VersionNameColumn
            {
                get
                {
                    return columnVersionName;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public DataColumn JobIDColumn
            {
                get
                {
                    return columnJobID;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public DataColumn NewMarginColumn
            {
                get
                {
                    return columnNewMargin;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public DataColumn CostProjectIDColumn
            {
                get
                {
                    return columnCostProjectID;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public DataColumn AnalysisDateColumn
            {
                get
                {
                    return columnAnalysisDate;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public DataColumn CostedDateColumn
            {
                get
                {
                    return columnCostedDate;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public DataColumn PlanIDColumn
            {
                get
                {
                    return columnPlanID;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public DataColumn ProjectIDColumn
            {
                get
                {
                    return columnProjectID;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public DataColumn CostProjectColumn
            {
                get
                {
                    return columnCostProject;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public DataColumn BudgetCostColumn
            {
                get
                {
                    return columnBudgetCost;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public DataColumn PlanPriceColumn
            {
                get
                {
                    return columnPlanPrice;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public DataColumn LotCostsColumn
            {
                get
                {
                    return columnLotCosts;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public DataColumn PriceWithoutLotColumn
            {
                get
                {
                    return columnPriceWithoutLot;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public DataColumn SquareFeetColumn
            {
                get
                {
                    return columnSquareFeet;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public DataColumn PricePerFootColumn
            {
                get
                {
                    return columnPricePerFoot;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public DataColumn SoftCostsColumn
            {
                get
                {
                    return columnSoftCosts;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public DataColumn UpdatedPriceColumn
            {
                get
                {
                    return columnUpdatedPrice;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public DataColumn AnalysisIDColumn
            {
                get
                {
                    return columnAnalysisID;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public DataColumn CostPerFootColumn
            {
                get
                {
                    return columnCostPerFoot;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public DataColumn ProjectNameColumn
            {
                get
                {
                    return columnProjectName;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public DataColumn TaxPermitDistrictColumn
            {
                get
                {
                    return columnTaxPermitDistrict;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public DataColumn TaxRateColumn
            {
                get
                {
                    return columnTaxRate;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public DataColumn PlanProjColumn
            {
                get
                {
                    return columnPlanProj;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public DataColumn OptProjColumn
            {
                get
                {
                    return columnOptProj;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public DataColumn CpyProjectColumn
            {
                get
                {
                    return columnCpyProject;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public DataColumn ActualCstColumn
            {
                get
                {
                    return columnActualCst;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public DataColumn GrsMarginColumn
            {
                get
                {
                    return columnGrsMargin;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public DataColumn NewSalesPrcColumn
            {
                get
                {
                    return columnNewSalesPrc;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public DataColumn NewSalesPrcWithLotColumn
            {
                get
                {
                    return columnNewSalesPrcWithLot;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public DataColumn AnalysisPriceColumn
            {
                get
                {
                    return columnAnalysisPrice;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public DataColumn PeriodColumn
            {
                get
                {
                    return columnPeriod;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public DataColumn ProjectPremiumColumn
            {
                get
                {
                    return columnProjectPremium;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public DataColumn CreatedByColumn
            {
                get
                {
                    return columnCreatedBy;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public DataColumn NotesColumn
            {
                get
                {
                    return columnNotes;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public DataColumn NoteColumn
            {
                get
                {
                    return columnNote;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            [System.ComponentModel.Browsable(false)]
            public int Count
            {
                get
                {
                    return Rows.Count;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public spGetAnalysisRow this[int index]
            {
                get
                {
                    return (spGetAnalysisRow)Rows[index];
                }
            }

            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public event spGetAnalysisRowChangeEventHandler spGetAnalysisRowChanging;

            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public event spGetAnalysisRowChangeEventHandler spGetAnalysisRowChanged;

            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public event spGetAnalysisRowChangeEventHandler spGetAnalysisRowDeleting;

            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public event spGetAnalysisRowChangeEventHandler spGetAnalysisRowDeleted;

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public void AddspGetAnalysisRow(spGetAnalysisRow row)
            {
                Rows.Add(row);
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public spGetAnalysisRow AddspGetAnalysisRow(string VersionName, string JobID, decimal NewMargin, int CostProjectID, DateTime AnalysisDate, DateTime CostedDate, string PlanID, string ProjectID, string CostProject, decimal BudgetCost, decimal PlanPrice, decimal LotCosts, decimal PriceWithoutLot, int SquareFeet, decimal PricePerFoot, int SoftCosts, int UpdatedPrice, decimal CostPerFoot, string ProjectName, string TaxPermitDistrict, decimal TaxRate, string PlanProj, string OptProj, string CpyProject, decimal ActualCst, decimal GrsMargin, decimal NewSalesPrc, decimal NewSalesPrcWithLot, int AnalysisPrice, string Period, int ProjectPremium, string CreatedBy, string Notes, string Note)

































            {
                spGetAnalysisRow rowspGetAnalysisRow = (spGetAnalysisRow)NewRow();
                object[] columnValuesArray = new object[] { VersionName, JobID, NewMargin, CostProjectID, AnalysisDate, CostedDate, PlanID, ProjectID, CostProject, BudgetCost, PlanPrice, LotCosts, PriceWithoutLot, SquareFeet, PricePerFoot, SoftCosts, UpdatedPrice, null, CostPerFoot, ProjectName, TaxPermitDistrict, TaxRate, PlanProj, OptProj, CpyProject, ActualCst, GrsMargin, NewSalesPrc, NewSalesPrcWithLot, AnalysisPrice, Period, ProjectPremium, CreatedBy, Notes, Note };
                rowspGetAnalysisRow.ItemArray=columnValuesArray;
                Rows.Add(rowspGetAnalysisRow);
                return rowspGetAnalysisRow;
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public override DataTable Clone()
            {
                spGetAnalysisDataTable cln = (spGetAnalysisDataTable)base.Clone();
                cln.InitVars();
                return cln;
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            protected override DataTable CreateInstance()
            {
                return new spGetAnalysisDataTable();
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            internal void InitVars()
            {
                columnVersionName=Columns["VersionName"];
                columnJobID=Columns["JobID"];
                columnNewMargin=Columns["NewMargin"];
                columnCostProjectID=Columns["CostProjectID"];
                columnAnalysisDate=Columns["AnalysisDate"];
                columnCostedDate=Columns["CostedDate"];
                columnPlanID=Columns["PlanID"];
                columnProjectID=Columns["ProjectID"];
                columnCostProject=Columns["CostProject"];
                columnBudgetCost=Columns["BudgetCost"];
                columnPlanPrice=Columns["PlanPrice"];
                columnLotCosts=Columns["LotCosts"];
                columnPriceWithoutLot=Columns["PriceWithoutLot"];
                columnSquareFeet=Columns["SquareFeet"];
                columnPricePerFoot=Columns["PricePerFoot"];
                columnSoftCosts=Columns["SoftCosts"];
                columnUpdatedPrice=Columns["UpdatedPrice"];
                columnAnalysisID=Columns["AnalysisID"];
                columnCostPerFoot=Columns["CostPerFoot"];
                columnProjectName=Columns["ProjectName"];
                columnTaxPermitDistrict=Columns["TaxPermitDistrict"];
                columnTaxRate=Columns["TaxRate"];
                columnPlanProj=Columns["PlanProj"];
                columnOptProj=Columns["OptProj"];
                columnCpyProject=Columns["CpyProject"];
                columnActualCst=Columns["ActualCst"];
                columnGrsMargin=Columns["GrsMargin"];
                columnNewSalesPrc=Columns["NewSalesPrc"];
                columnNewSalesPrcWithLot=Columns["NewSalesPrcWithLot"];
                columnAnalysisPrice=Columns["AnalysisPrice"];
                columnPeriod=Columns["Period"];
                columnProjectPremium=Columns["ProjectPremium"];
                columnCreatedBy=Columns["CreatedBy"];
                columnNotes=Columns["Notes"];
                columnNote=Columns["Note"];
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            private void InitClass()
            {
                columnVersionName=new DataColumn("VersionName", typeof(string), null, MappingType.Element);
                Columns.Add(columnVersionName);
                columnJobID=new DataColumn("JobID", typeof(string), null, MappingType.Element);
                Columns.Add(columnJobID);
                columnNewMargin=new DataColumn("NewMargin", typeof(decimal), null, MappingType.Element);
                Columns.Add(columnNewMargin);
                columnCostProjectID=new DataColumn("CostProjectID", typeof(int), null, MappingType.Element);
                Columns.Add(columnCostProjectID);
                columnAnalysisDate=new DataColumn("AnalysisDate", typeof(DateTime), null, MappingType.Element);
                Columns.Add(columnAnalysisDate);
                columnCostedDate=new DataColumn("CostedDate", typeof(DateTime), null, MappingType.Element);
                Columns.Add(columnCostedDate);
                columnPlanID=new DataColumn("PlanID", typeof(string), null, MappingType.Element);
                Columns.Add(columnPlanID);
                columnProjectID=new DataColumn("ProjectID", typeof(string), null, MappingType.Element);
                Columns.Add(columnProjectID);
                columnCostProject=new DataColumn("CostProject", typeof(string), null, MappingType.Element);
                Columns.Add(columnCostProject);
                columnBudgetCost=new DataColumn("BudgetCost", typeof(decimal), null, MappingType.Element);
                Columns.Add(columnBudgetCost);
                columnPlanPrice=new DataColumn("PlanPrice", typeof(decimal), null, MappingType.Element);
                Columns.Add(columnPlanPrice);
                columnLotCosts=new DataColumn("LotCosts", typeof(decimal), null, MappingType.Element);
                Columns.Add(columnLotCosts);
                columnPriceWithoutLot=new DataColumn("PriceWithoutLot", typeof(decimal), null, MappingType.Element);
                Columns.Add(columnPriceWithoutLot);
                columnSquareFeet=new DataColumn("SquareFeet", typeof(int), null, MappingType.Element);
                Columns.Add(columnSquareFeet);
                columnPricePerFoot=new DataColumn("PricePerFoot", typeof(decimal), null, MappingType.Element);
                Columns.Add(columnPricePerFoot);
                columnSoftCosts=new DataColumn("SoftCosts", typeof(int), null, MappingType.Element);
                Columns.Add(columnSoftCosts);
                columnUpdatedPrice=new DataColumn("UpdatedPrice", typeof(int), null, MappingType.Element);
                Columns.Add(columnUpdatedPrice);
                columnAnalysisID=new DataColumn("AnalysisID", typeof(int), null, MappingType.Element);
                Columns.Add(columnAnalysisID);
                columnCostPerFoot=new DataColumn("CostPerFoot", typeof(decimal), null, MappingType.Element);
                Columns.Add(columnCostPerFoot);
                columnProjectName=new DataColumn("ProjectName", typeof(string), null, MappingType.Element);
                Columns.Add(columnProjectName);
                columnTaxPermitDistrict=new DataColumn("TaxPermitDistrict", typeof(string), null, MappingType.Element);
                Columns.Add(columnTaxPermitDistrict);
                columnTaxRate=new DataColumn("TaxRate", typeof(decimal), null, MappingType.Element);
                Columns.Add(columnTaxRate);
                columnPlanProj=new DataColumn("PlanProj", typeof(string), null, MappingType.Element);
                Columns.Add(columnPlanProj);
                columnOptProj=new DataColumn("OptProj", typeof(string), null, MappingType.Element);
                Columns.Add(columnOptProj);
                columnCpyProject=new DataColumn("CpyProject", typeof(string), null, MappingType.Element);
                Columns.Add(columnCpyProject);
                columnActualCst=new DataColumn("ActualCst", typeof(decimal), null, MappingType.Element);
                Columns.Add(columnActualCst);
                columnGrsMargin=new DataColumn("GrsMargin", typeof(decimal), null, MappingType.Element);
                Columns.Add(columnGrsMargin);
                columnNewSalesPrc=new DataColumn("NewSalesPrc", typeof(decimal), null, MappingType.Element);
                Columns.Add(columnNewSalesPrc);
                columnNewSalesPrcWithLot=new DataColumn("NewSalesPrcWithLot", typeof(decimal), null, MappingType.Element);
                Columns.Add(columnNewSalesPrcWithLot);
                columnAnalysisPrice=new DataColumn("AnalysisPrice", typeof(int), null, MappingType.Element);
                Columns.Add(columnAnalysisPrice);
                columnPeriod=new DataColumn("Period", typeof(string), null, MappingType.Element);
                Columns.Add(columnPeriod);
                columnProjectPremium=new DataColumn("ProjectPremium", typeof(int), null, MappingType.Element);
                Columns.Add(columnProjectPremium);
                columnCreatedBy=new DataColumn("CreatedBy", typeof(string), null, MappingType.Element);
                Columns.Add(columnCreatedBy);
                columnNotes=new DataColumn("Notes", typeof(string), null, MappingType.Element);
                Columns.Add(columnNotes);
                columnNote=new DataColumn("Note", typeof(string), null, MappingType.Element);
                Columns.Add(columnNote);
                columnVersionName.AllowDBNull=false;
                columnVersionName.MaxLength=100;
                columnJobID.MaxLength=20;
                columnAnalysisDate.AllowDBNull=false;
                columnPlanID.MaxLength=10;
                columnProjectID.AllowDBNull=false;
                columnProjectID.MaxLength=5;
                columnCostProject.AllowDBNull=false;
                columnCostProject.MaxLength=5;
                columnPriceWithoutLot.ReadOnly=true;
                columnSquareFeet.ReadOnly=true;
                columnPricePerFoot.ReadOnly=true;
                columnAnalysisID.AutoIncrement=true;
                columnAnalysisID.AllowDBNull=false;
                columnAnalysisID.ReadOnly=true;
                columnCostPerFoot.ReadOnly=true;
                columnProjectName.MaxLength=50;
                columnTaxPermitDistrict.AllowDBNull=false;
                columnTaxPermitDistrict.MaxLength=50;
                columnPlanProj.AllowDBNull=false;
                columnPlanProj.MaxLength=5;
                columnOptProj.AllowDBNull=false;
                columnOptProj.MaxLength=5;
                columnCpyProject.AllowDBNull=false;
                columnCpyProject.MaxLength=5;
                columnActualCst.ReadOnly=true;
                columnGrsMargin.ReadOnly=true;
                columnNewSalesPrc.ReadOnly=true;
                columnNewSalesPrcWithLot.ReadOnly=true;
                columnPeriod.MaxLength=50;
                columnCreatedBy.MaxLength=10;
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public spGetAnalysisRow NewspGetAnalysisRow()
            {
                return (spGetAnalysisRow)NewRow();
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder)
            {
                return new spGetAnalysisRow(builder);
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            protected override Type GetRowType()
            {
                return typeof(spGetAnalysisRow);
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            protected override void OnRowChanged(DataRowChangeEventArgs e)
            {
                base.OnRowChanged(e);
                if (spGetAnalysisRowChanged is not null)
                {
                    spGetAnalysisRowChanged?.Invoke(this, new spGetAnalysisRowChangeEvent((spGetAnalysisRow)e.Row, e.Action));
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            protected override void OnRowChanging(DataRowChangeEventArgs e)
            {
                base.OnRowChanging(e);
                if (spGetAnalysisRowChanging is not null)
                {
                    spGetAnalysisRowChanging?.Invoke(this, new spGetAnalysisRowChangeEvent((spGetAnalysisRow)e.Row, e.Action));
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            protected override void OnRowDeleted(DataRowChangeEventArgs e)
            {
                base.OnRowDeleted(e);
                if (spGetAnalysisRowDeleted is not null)
                {
                    spGetAnalysisRowDeleted?.Invoke(this, new spGetAnalysisRowChangeEvent((spGetAnalysisRow)e.Row, e.Action));
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            protected override void OnRowDeleting(DataRowChangeEventArgs e)
            {
                base.OnRowDeleting(e);
                if (spGetAnalysisRowDeleting is not null)
                {
                    spGetAnalysisRowDeleting?.Invoke(this, new spGetAnalysisRowChangeEvent((spGetAnalysisRow)e.Row, e.Action));
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public void RemovespGetAnalysisRow(spGetAnalysisRow row)
            {
                Rows.Remove(row);
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs)
            {
                var type = new System.Xml.Schema.XmlSchemaComplexType();
                var sequence = new System.Xml.Schema.XmlSchemaSequence();
                var ds = new HCHDataAnalysisDetail();
                var any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace="http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs=new decimal(0);
                any1.MaxOccurs=decimal.MaxValue;
                any1.ProcessContents=System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                var any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace="urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs=new decimal(1);
                any2.ProcessContents=System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                var attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name="namespace";
                attribute1.FixedValue=ds.Namespace;
                type.Attributes.Add(attribute1);
                var attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name="tableTypeName";
                attribute2.FixedValue="spGetAnalysisDataTable";
                type.Attributes.Add(attribute2);
                type.Particle=sequence;
                var dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace))
                {
                    var s1 = new System.IO.MemoryStream();
                    var s2 = new System.IO.MemoryStream();
                    try
                    {
                        System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        var schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator();
                        while (schemas.MoveNext())
                        {
                            schema=(System.Xml.Schema.XmlSchema)schemas.Current;
                            s2.SetLength(0L);
                            schema.Write(s2);
                            if (s1.Length==s2.Length)
                            {
                                s1.Position=0L;
                                s2.Position=0L;

                                while (s1.Position!=s1.Length&&s1.ReadByte()==s2.ReadByte())
                                {


                                }
                                if (s1.Position==s1.Length)
                                {
                                    return type;
                                }
                            }

                        }
                    }
                    finally
                    {
                        if (s1 is not null)
                        {
                            s1.Close();
                        }
                        if (s2 is not null)
                        {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }

        /// <summary>
    /// Represents strongly named DataRow class.
    /// </summary>
        public partial class spGetAnalysisRow : DataRow
        {

            private spGetAnalysisDataTable tablespGetAnalysis;

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            internal spGetAnalysisRow(DataRowBuilder rb) : base(rb)
            {
                tablespGetAnalysis=(spGetAnalysisDataTable)Table;
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public string VersionName
            {
                get
                {
                    return Conversions.ToString(this[tablespGetAnalysis.VersionNameColumn]);
                }
                set
                {
                    this[tablespGetAnalysis.VersionNameColumn]=value;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public string JobID
            {
                get
                {
                    try
                    {
                        return Conversions.ToString(this[tablespGetAnalysis.JobIDColumn]);
                    }
                    catch (InvalidCastException e)
                    {
                        throw new StrongTypingException("The value for column 'JobID' in table 'spGetAnalysis' is DBNull.", e);
                    }
                }
                set
                {
                    this[tablespGetAnalysis.JobIDColumn]=value;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public decimal NewMargin
            {
                get
                {
                    try
                    {
                        return Conversions.ToDecimal(this[tablespGetAnalysis.NewMarginColumn]);
                    }
                    catch (InvalidCastException e)
                    {
                        throw new StrongTypingException("The value for column 'NewMargin' in table 'spGetAnalysis' is DBNull.", e);
                    }
                }
                set
                {
                    this[tablespGetAnalysis.NewMarginColumn]=value;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public int CostProjectID
            {
                get
                {
                    try
                    {
                        return (int)(this[tablespGetAnalysis.CostProjectIDColumn]);
                    }
                    catch (InvalidCastException e)
                    {
                        throw new StrongTypingException("The value for column 'CostProjectID' in table 'spGetAnalysis' is DBNull.", e);
                    }
                }
                set
                {
                    this[tablespGetAnalysis.CostProjectIDColumn]=value;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public DateTime AnalysisDate
            {
                get
                {
                    return Conversions.ToDate(this[tablespGetAnalysis.AnalysisDateColumn]);
                }
                set
                {
                    this[tablespGetAnalysis.AnalysisDateColumn]=value;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public DateTime CostedDate
            {
                get
                {
                    try
                    {
                        return Conversions.ToDate(this[tablespGetAnalysis.CostedDateColumn]);
                    }
                    catch (InvalidCastException e)
                    {
                        throw new StrongTypingException("The value for column 'CostedDate' in table 'spGetAnalysis' is DBNull.", e);
                    }
                }
                set
                {
                    this[tablespGetAnalysis.CostedDateColumn]=value;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public string PlanID
            {
                get
                {
                    try
                    {
                        return Conversions.ToString(this[tablespGetAnalysis.PlanIDColumn]);
                    }
                    catch (InvalidCastException e)
                    {
                        throw new StrongTypingException("The value for column 'PlanID' in table 'spGetAnalysis' is DBNull.", e);
                    }
                }
                set
                {
                    this[tablespGetAnalysis.PlanIDColumn]=value;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public string ProjectID
            {
                get
                {
                    return Conversions.ToString(this[tablespGetAnalysis.ProjectIDColumn]);
                }
                set
                {
                    this[tablespGetAnalysis.ProjectIDColumn]=value;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public string CostProject
            {
                get
                {
                    return Conversions.ToString(this[tablespGetAnalysis.CostProjectColumn]);
                }
                set
                {
                    this[tablespGetAnalysis.CostProjectColumn]=value;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public decimal BudgetCost
            {
                get
                {
                    try
                    {
                        return Conversions.ToDecimal(this[tablespGetAnalysis.BudgetCostColumn]);
                    }
                    catch (InvalidCastException e)
                    {
                        throw new StrongTypingException("The value for column 'BudgetCost' in table 'spGetAnalysis' is DBNull.", e);
                    }
                }
                set
                {
                    this[tablespGetAnalysis.BudgetCostColumn]=value;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public decimal PlanPrice
            {
                get
                {
                    try
                    {
                        return Conversions.ToDecimal(this[tablespGetAnalysis.PlanPriceColumn]);
                    }
                    catch (InvalidCastException e)
                    {
                        throw new StrongTypingException("The value for column 'PlanPrice' in table 'spGetAnalysis' is DBNull.", e);
                    }
                }
                set
                {
                    this[tablespGetAnalysis.PlanPriceColumn]=value;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public decimal LotCosts
            {
                get
                {
                    try
                    {
                        return Conversions.ToDecimal(this[tablespGetAnalysis.LotCostsColumn]);
                    }
                    catch (InvalidCastException e)
                    {
                        throw new StrongTypingException("The value for column 'LotCosts' in table 'spGetAnalysis' is DBNull.", e);
                    }
                }
                set
                {
                    this[tablespGetAnalysis.LotCostsColumn]=value;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public decimal PriceWithoutLot
            {
                get
                {
                    try
                    {
                        return Conversions.ToDecimal(this[tablespGetAnalysis.PriceWithoutLotColumn]);
                    }
                    catch (InvalidCastException e)
                    {
                        throw new StrongTypingException("The value for column 'PriceWithoutLot' in table 'spGetAnalysis' is DBNull.", e);
                    }
                }
                set
                {
                    this[tablespGetAnalysis.PriceWithoutLotColumn]=value;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public int SquareFeet
            {
                get
                {
                    try
                    {
                        return (int)(this[tablespGetAnalysis.SquareFeetColumn]);
                    }
                    catch (InvalidCastException e)
                    {
                        throw new StrongTypingException("The value for column 'SquareFeet' in table 'spGetAnalysis' is DBNull.", e);
                    }
                }
                set
                {
                    this[tablespGetAnalysis.SquareFeetColumn]=value;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public decimal PricePerFoot
            {
                get
                {
                    try
                    {
                        return Conversions.ToDecimal(this[tablespGetAnalysis.PricePerFootColumn]);
                    }
                    catch (InvalidCastException e)
                    {
                        throw new StrongTypingException("The value for column 'PricePerFoot' in table 'spGetAnalysis' is DBNull.", e);
                    }
                }
                set
                {
                    this[tablespGetAnalysis.PricePerFootColumn]=value;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public int SoftCosts
            {
                get
                {
                    try
                    {
                        return (int)(this[tablespGetAnalysis.SoftCostsColumn]);
                    }
                    catch (InvalidCastException e)
                    {
                        throw new StrongTypingException("The value for column 'SoftCosts' in table 'spGetAnalysis' is DBNull.", e);
                    }
                }
                set
                {
                    this[tablespGetAnalysis.SoftCostsColumn]=value;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public int UpdatedPrice
            {
                get
                {
                    try
                    {
                        return (int)(this[tablespGetAnalysis.UpdatedPriceColumn]);
                    }
                    catch (InvalidCastException e)
                    {
                        throw new StrongTypingException("The value for column 'UpdatedPrice' in table 'spGetAnalysis' is DBNull.", e);
                    }
                }
                set
                {
                    this[tablespGetAnalysis.UpdatedPriceColumn]=value;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public int AnalysisID
            {
                get
                {
                    return (int)(this[tablespGetAnalysis.AnalysisIDColumn]);
                }
                set
                {
                    this[tablespGetAnalysis.AnalysisIDColumn]=value;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public decimal CostPerFoot
            {
                get
                {
                    try
                    {
                        return Conversions.ToDecimal(this[tablespGetAnalysis.CostPerFootColumn]);
                    }
                    catch (InvalidCastException e)
                    {
                        throw new StrongTypingException("The value for column 'CostPerFoot' in table 'spGetAnalysis' is DBNull.", e);
                    }
                }
                set
                {
                    this[tablespGetAnalysis.CostPerFootColumn]=value;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public string ProjectName
            {
                get
                {
                    try
                    {
                        return Conversions.ToString(this[tablespGetAnalysis.ProjectNameColumn]);
                    }
                    catch (InvalidCastException e)
                    {
                        throw new StrongTypingException("The value for column 'ProjectName' in table 'spGetAnalysis' is DBNull.", e);
                    }
                }
                set
                {
                    this[tablespGetAnalysis.ProjectNameColumn]=value;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public string TaxPermitDistrict
            {
                get
                {
                    return Conversions.ToString(this[tablespGetAnalysis.TaxPermitDistrictColumn]);
                }
                set
                {
                    this[tablespGetAnalysis.TaxPermitDistrictColumn]=value;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public decimal TaxRate
            {
                get
                {
                    try
                    {
                        return Conversions.ToDecimal(this[tablespGetAnalysis.TaxRateColumn]);
                    }
                    catch (InvalidCastException e)
                    {
                        throw new StrongTypingException("The value for column 'TaxRate' in table 'spGetAnalysis' is DBNull.", e);
                    }
                }
                set
                {
                    this[tablespGetAnalysis.TaxRateColumn]=value;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public string PlanProj
            {
                get
                {
                    return Conversions.ToString(this[tablespGetAnalysis.PlanProjColumn]);
                }
                set
                {
                    this[tablespGetAnalysis.PlanProjColumn]=value;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public string OptProj
            {
                get
                {
                    return Conversions.ToString(this[tablespGetAnalysis.OptProjColumn]);
                }
                set
                {
                    this[tablespGetAnalysis.OptProjColumn]=value;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public string CpyProject
            {
                get
                {
                    return Conversions.ToString(this[tablespGetAnalysis.CpyProjectColumn]);
                }
                set
                {
                    this[tablespGetAnalysis.CpyProjectColumn]=value;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public decimal ActualCst
            {
                get
                {
                    try
                    {
                        return Conversions.ToDecimal(this[tablespGetAnalysis.ActualCstColumn]);
                    }
                    catch (InvalidCastException e)
                    {
                        throw new StrongTypingException("The value for column 'ActualCst' in table 'spGetAnalysis' is DBNull.", e);
                    }
                }
                set
                {
                    this[tablespGetAnalysis.ActualCstColumn]=value;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public decimal GrsMargin
            {
                get
                {
                    try
                    {
                        return Conversions.ToDecimal(this[tablespGetAnalysis.GrsMarginColumn]);
                    }
                    catch (InvalidCastException e)
                    {
                        throw new StrongTypingException("The value for column 'GrsMargin' in table 'spGetAnalysis' is DBNull.", e);
                    }
                }
                set
                {
                    this[tablespGetAnalysis.GrsMarginColumn]=value;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public decimal NewSalesPrc
            {
                get
                {
                    try
                    {
                        return Conversions.ToDecimal(this[tablespGetAnalysis.NewSalesPrcColumn]);
                    }
                    catch (InvalidCastException e)
                    {
                        throw new StrongTypingException("The value for column 'NewSalesPrc' in table 'spGetAnalysis' is DBNull.", e);
                    }
                }
                set
                {
                    this[tablespGetAnalysis.NewSalesPrcColumn]=value;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public decimal NewSalesPrcWithLot
            {
                get
                {
                    try
                    {
                        return Conversions.ToDecimal(this[tablespGetAnalysis.NewSalesPrcWithLotColumn]);
                    }
                    catch (InvalidCastException e)
                    {
                        throw new StrongTypingException("The value for column 'NewSalesPrcWithLot' in table 'spGetAnalysis' is DBNull.", e);
                    }
                }
                set
                {
                    this[tablespGetAnalysis.NewSalesPrcWithLotColumn]=value;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public int AnalysisPrice
            {
                get
                {
                    try
                    {
                        return (int)(this[tablespGetAnalysis.AnalysisPriceColumn]);
                    }
                    catch (InvalidCastException e)
                    {
                        throw new StrongTypingException("The value for column 'AnalysisPrice' in table 'spGetAnalysis' is DBNull.", e);
                    }
                }
                set
                {
                    this[tablespGetAnalysis.AnalysisPriceColumn]=value;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public string Period
            {
                get
                {
                    try
                    {
                        return Conversions.ToString(this[tablespGetAnalysis.PeriodColumn]);
                    }
                    catch (InvalidCastException e)
                    {
                        throw new StrongTypingException("The value for column 'Period' in table 'spGetAnalysis' is DBNull.", e);
                    }
                }
                set
                {
                    this[tablespGetAnalysis.PeriodColumn]=value;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public int ProjectPremium
            {
                get
                {
                    try
                    {
                        return (int)(this[tablespGetAnalysis.ProjectPremiumColumn]);
                    }
                    catch (InvalidCastException e)
                    {
                        throw new StrongTypingException("The value for column 'ProjectPremium' in table 'spGetAnalysis' is DBNull.", e);
                    }
                }
                set
                {
                    this[tablespGetAnalysis.ProjectPremiumColumn]=value;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public string CreatedBy
            {
                get
                {
                    try
                    {
                        return Conversions.ToString(this[tablespGetAnalysis.CreatedByColumn]);
                    }
                    catch (InvalidCastException e)
                    {
                        throw new StrongTypingException("The value for column 'CreatedBy' in table 'spGetAnalysis' is DBNull.", e);
                    }
                }
                set
                {
                    this[tablespGetAnalysis.CreatedByColumn]=value;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public string Notes
            {
                get
                {
                    try
                    {
                        return Conversions.ToString(this[tablespGetAnalysis.NotesColumn]);
                    }
                    catch (InvalidCastException e)
                    {
                        throw new StrongTypingException("The value for column 'Notes' in table 'spGetAnalysis' is DBNull.", e);
                    }
                }
                set
                {
                    this[tablespGetAnalysis.NotesColumn]=value;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public string Note
            {
                get
                {
                    try
                    {
                        return Conversions.ToString(this[tablespGetAnalysis.NoteColumn]);
                    }
                    catch (InvalidCastException e)
                    {
                        throw new StrongTypingException("The value for column 'Note' in table 'spGetAnalysis' is DBNull.", e);
                    }
                }
                set
                {
                    this[tablespGetAnalysis.NoteColumn]=value;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public bool IsJobIDNull()
            {
                return IsNull(tablespGetAnalysis.JobIDColumn);
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public void SetJobIDNull()
            {
                this[tablespGetAnalysis.JobIDColumn]=Convert.DBNull;
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public bool IsNewMarginNull()
            {
                return IsNull(tablespGetAnalysis.NewMarginColumn);
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public void SetNewMarginNull()
            {
                this[tablespGetAnalysis.NewMarginColumn]=Convert.DBNull;
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public bool IsCostProjectIDNull()
            {
                return IsNull(tablespGetAnalysis.CostProjectIDColumn);
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public void SetCostProjectIDNull()
            {
                this[tablespGetAnalysis.CostProjectIDColumn]=Convert.DBNull;
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public bool IsCostedDateNull()
            {
                return IsNull(tablespGetAnalysis.CostedDateColumn);
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public void SetCostedDateNull()
            {
                this[tablespGetAnalysis.CostedDateColumn]=Convert.DBNull;
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public bool IsPlanIDNull()
            {
                return IsNull(tablespGetAnalysis.PlanIDColumn);
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public void SetPlanIDNull()
            {
                this[tablespGetAnalysis.PlanIDColumn]=Convert.DBNull;
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public bool IsBudgetCostNull()
            {
                return IsNull(tablespGetAnalysis.BudgetCostColumn);
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public void SetBudgetCostNull()
            {
                this[tablespGetAnalysis.BudgetCostColumn]=Convert.DBNull;
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public bool IsPlanPriceNull()
            {
                return IsNull(tablespGetAnalysis.PlanPriceColumn);
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public void SetPlanPriceNull()
            {
                this[tablespGetAnalysis.PlanPriceColumn]=Convert.DBNull;
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public bool IsLotCostsNull()
            {
                return IsNull(tablespGetAnalysis.LotCostsColumn);
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public void SetLotCostsNull()
            {
                this[tablespGetAnalysis.LotCostsColumn]=Convert.DBNull;
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public bool IsPriceWithoutLotNull()
            {
                return IsNull(tablespGetAnalysis.PriceWithoutLotColumn);
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public void SetPriceWithoutLotNull()
            {
                this[tablespGetAnalysis.PriceWithoutLotColumn]=Convert.DBNull;
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public bool IsSquareFeetNull()
            {
                return IsNull(tablespGetAnalysis.SquareFeetColumn);
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public void SetSquareFeetNull()
            {
                this[tablespGetAnalysis.SquareFeetColumn]=Convert.DBNull;
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public bool IsPricePerFootNull()
            {
                return IsNull(tablespGetAnalysis.PricePerFootColumn);
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public void SetPricePerFootNull()
            {
                this[tablespGetAnalysis.PricePerFootColumn]=Convert.DBNull;
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public bool IsSoftCostsNull()
            {
                return IsNull(tablespGetAnalysis.SoftCostsColumn);
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public void SetSoftCostsNull()
            {
                this[tablespGetAnalysis.SoftCostsColumn]=Convert.DBNull;
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public bool IsUpdatedPriceNull()
            {
                return IsNull(tablespGetAnalysis.UpdatedPriceColumn);
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public void SetUpdatedPriceNull()
            {
                this[tablespGetAnalysis.UpdatedPriceColumn]=Convert.DBNull;
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public bool IsCostPerFootNull()
            {
                return IsNull(tablespGetAnalysis.CostPerFootColumn);
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public void SetCostPerFootNull()
            {
                this[tablespGetAnalysis.CostPerFootColumn]=Convert.DBNull;
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public bool IsProjectNameNull()
            {
                return IsNull(tablespGetAnalysis.ProjectNameColumn);
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public void SetProjectNameNull()
            {
                this[tablespGetAnalysis.ProjectNameColumn]=Convert.DBNull;
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public bool IsTaxRateNull()
            {
                return IsNull(tablespGetAnalysis.TaxRateColumn);
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public void SetTaxRateNull()
            {
                this[tablespGetAnalysis.TaxRateColumn]=Convert.DBNull;
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public bool IsActualCstNull()
            {
                return IsNull(tablespGetAnalysis.ActualCstColumn);
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public void SetActualCstNull()
            {
                this[tablespGetAnalysis.ActualCstColumn]=Convert.DBNull;
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public bool IsGrsMarginNull()
            {
                return IsNull(tablespGetAnalysis.GrsMarginColumn);
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public void SetGrsMarginNull()
            {
                this[tablespGetAnalysis.GrsMarginColumn]=Convert.DBNull;
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public bool IsNewSalesPrcNull()
            {
                return IsNull(tablespGetAnalysis.NewSalesPrcColumn);
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public void SetNewSalesPrcNull()
            {
                this[tablespGetAnalysis.NewSalesPrcColumn]=Convert.DBNull;
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public bool IsNewSalesPrcWithLotNull()
            {
                return IsNull(tablespGetAnalysis.NewSalesPrcWithLotColumn);
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public void SetNewSalesPrcWithLotNull()
            {
                this[tablespGetAnalysis.NewSalesPrcWithLotColumn]=Convert.DBNull;
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public bool IsAnalysisPriceNull()
            {
                return IsNull(tablespGetAnalysis.AnalysisPriceColumn);
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public void SetAnalysisPriceNull()
            {
                this[tablespGetAnalysis.AnalysisPriceColumn]=Convert.DBNull;
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public bool IsPeriodNull()
            {
                return IsNull(tablespGetAnalysis.PeriodColumn);
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public void SetPeriodNull()
            {
                this[tablespGetAnalysis.PeriodColumn]=Convert.DBNull;
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public bool IsProjectPremiumNull()
            {
                return IsNull(tablespGetAnalysis.ProjectPremiumColumn);
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public void SetProjectPremiumNull()
            {
                this[tablespGetAnalysis.ProjectPremiumColumn]=Convert.DBNull;
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public bool IsCreatedByNull()
            {
                return IsNull(tablespGetAnalysis.CreatedByColumn);
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public void SetCreatedByNull()
            {
                this[tablespGetAnalysis.CreatedByColumn]=Convert.DBNull;
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public bool IsNotesNull()
            {
                return IsNull(tablespGetAnalysis.NotesColumn);
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public void SetNotesNull()
            {
                this[tablespGetAnalysis.NotesColumn]=Convert.DBNull;
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public bool IsNoteNull()
            {
                return IsNull(tablespGetAnalysis.NoteColumn);
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public void SetNoteNull()
            {
                this[tablespGetAnalysis.NoteColumn]=Convert.DBNull;
            }
        }

        /// <summary>
    /// Row event argument class
    /// </summary>
        [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        public class spGetAnalysisRowChangeEvent : EventArgs
        {

            private spGetAnalysisRow eventRow;

            private DataRowAction eventAction;

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public spGetAnalysisRowChangeEvent(spGetAnalysisRow row, DataRowAction action) : base()
            {
                eventRow=row;
                eventAction=action;
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public spGetAnalysisRow Row
            {
                get
                {
                    return eventRow;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public DataRowAction Action
            {
                get
                {
                    return eventAction;
                }
            }
        }
    }

    namespace HCHDataAnalysisDetailTableAdapters
    {

        /// <summary>
    /// Represents the connection and commands used to retrieve and save data.
    /// </summary>
        [System.ComponentModel.DesignerCategory("code")]
        [System.ComponentModel.ToolboxItem(true)]
        [System.ComponentModel.DataObject(true)]
        [System.ComponentModel.Designer("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"+", Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]

        [System.ComponentModel.Design.HelpKeyword("vs.data.TableAdapter")]
        public partial class spGetAnalysisTableAdapter : System.ComponentModel.Component
        {

            private System.Data.SqlClient.SqlDataAdapter __adapter;

            private System.Data.SqlClient.SqlDataAdapter _adapter
            {
                [MethodImpl(MethodImplOptions.Synchronized)]
                get
                {
                    return __adapter;
                }

                [MethodImpl(MethodImplOptions.Synchronized)]
                set
                {
                    __adapter=value;
                }
            }

            private System.Data.SqlClient.SqlConnection _connection;

            private System.Data.SqlClient.SqlTransaction _transaction;

            private System.Data.SqlClient.SqlCommand[] _commandCollection;

            private bool _clearBeforeFill;

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public spGetAnalysisTableAdapter() : base()
            {
                ClearBeforeFill=true;
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            protected internal System.Data.SqlClient.SqlDataAdapter Adapter
            {
                get
                {
                    if (_adapter is null)
                    {
                        InitAdapter();
                    }
                    return _adapter;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            internal System.Data.SqlClient.SqlConnection Connection
            {
                get
                {
                    if (_connection is null)
                    {
                        InitConnection();
                    }
                    return _connection;
                }
                set
                {
                    _connection=value;
                    if (Adapter.InsertCommand is not null)
                    {
                        Adapter.InsertCommand.Connection=value;
                    }
                    if (Adapter.DeleteCommand is not null)
                    {
                        Adapter.DeleteCommand.Connection=value;
                    }
                    if (Adapter.UpdateCommand is not null)
                    {
                        Adapter.UpdateCommand.Connection=value;
                    }
                    int i = 0;
                    while (i<CommandCollection.Length)
                    {
                        if (CommandCollection[i] is not null)
                        {
                            CommandCollection[i].Connection=value;
                        }
                        i=i+1;
                    }
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            internal System.Data.SqlClient.SqlTransaction Transaction
            {
                get
                {
                    return _transaction;
                }
                set
                {
                    _transaction=value;
                    int i = 0;
                    while (i<CommandCollection.Length)
                    {
                        CommandCollection[i].Transaction=_transaction;
                        i=i+1;
                    }
                    if (Adapter is not null&&Adapter.DeleteCommand is not null)
                    {
                        Adapter.DeleteCommand.Transaction=_transaction;
                    }
                    if (Adapter is not null&&Adapter.InsertCommand is not null)
                    {
                        Adapter.InsertCommand.Transaction=_transaction;
                    }
                    if (Adapter is not null&&Adapter.UpdateCommand is not null)
                    {
                        Adapter.UpdateCommand.Transaction=_transaction;
                    }
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            protected System.Data.SqlClient.SqlCommand[] CommandCollection
            {
                get
                {
                    if (_commandCollection is null)
                    {
                        InitCommandCollection();
                    }
                    return _commandCollection;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public bool ClearBeforeFill
            {
                get
                {
                    return _clearBeforeFill;
                }
                set
                {
                    _clearBeforeFill=value;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            private void InitAdapter()
            {
                _adapter=new System.Data.SqlClient.SqlDataAdapter();
                var tableMapping = new System.Data.Common.DataTableMapping();
                tableMapping.SourceTable="Table";
                tableMapping.DataSetTable="spGetAnalysis";
                tableMapping.ColumnMappings.Add("VersionName", "VersionName");
                tableMapping.ColumnMappings.Add("JobID", "JobID");
                tableMapping.ColumnMappings.Add("NewMargin", "NewMargin");
                tableMapping.ColumnMappings.Add("CostProjectID", "CostProjectID");
                tableMapping.ColumnMappings.Add("AnalysisDate", "AnalysisDate");
                tableMapping.ColumnMappings.Add("CostedDate", "CostedDate");
                tableMapping.ColumnMappings.Add("PlanID", "PlanID");
                tableMapping.ColumnMappings.Add("ProjectID", "ProjectID");
                tableMapping.ColumnMappings.Add("CostProject", "CostProject");
                tableMapping.ColumnMappings.Add("BudgetCost", "BudgetCost");
                tableMapping.ColumnMappings.Add("PlanPrice", "PlanPrice");
                tableMapping.ColumnMappings.Add("LotCosts", "LotCosts");
                tableMapping.ColumnMappings.Add("PriceWithoutLot", "PriceWithoutLot");
                tableMapping.ColumnMappings.Add("SquareFeet", "SquareFeet");
                tableMapping.ColumnMappings.Add("PricePerFoot", "PricePerFoot");
                tableMapping.ColumnMappings.Add("SoftCosts", "SoftCosts");
                tableMapping.ColumnMappings.Add("UpdatedPrice", "UpdatedPrice");
                tableMapping.ColumnMappings.Add("AnalysisID", "AnalysisID");
                tableMapping.ColumnMappings.Add("CostPerFoot", "CostPerFoot");
                tableMapping.ColumnMappings.Add("ProjectName", "ProjectName");
                tableMapping.ColumnMappings.Add("TaxPermitDistrict", "TaxPermitDistrict");
                tableMapping.ColumnMappings.Add("TaxRate", "TaxRate");
                tableMapping.ColumnMappings.Add("PlanProj", "PlanProj");
                tableMapping.ColumnMappings.Add("OptProj", "OptProj");
                tableMapping.ColumnMappings.Add("CpyProject", "CpyProject");
                tableMapping.ColumnMappings.Add("ActualCst", "ActualCst");
                tableMapping.ColumnMappings.Add("GrsMargin", "GrsMargin");
                tableMapping.ColumnMappings.Add("NewSalesPrc", "NewSalesPrc");
                tableMapping.ColumnMappings.Add("NewSalesPrcWithLot", "NewSalesPrcWithLot");
                tableMapping.ColumnMappings.Add("AnalysisPrice", "AnalysisPrice");
                tableMapping.ColumnMappings.Add("Period", "Period");
                tableMapping.ColumnMappings.Add("ProjectPremium", "ProjectPremium");
                tableMapping.ColumnMappings.Add("CreatedBy", "CreatedBy");
                _adapter.TableMappings.Add(tableMapping);
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            private void InitConnection()
            {
                _connection=new System.Data.SqlClient.SqlConnection();
                _connection.ConnectionString=My.MySettings.Default.HCHDataQAConnectionString;
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            private void InitCommandCollection()
            {
                _commandCollection=new System.Data.SqlClient.SqlCommand[1];
                _commandCollection[0]=new System.Data.SqlClient.SqlCommand();
                _commandCollection[0].Connection=Connection;
                _commandCollection[0].CommandText="dbo.spGetAnalysis";
                _commandCollection[0].CommandType=CommandType.StoredProcedure;
                _commandCollection[0].Parameters.Add(new System.Data.SqlClient.SqlParameter("@RETURN_VALUE", SqlDbType.Int, 4, ParameterDirection.ReturnValue, 10, 0, null, DataRowVersion.Current, false, null, "", "", ""));
                _commandCollection[0].Parameters.Add(new System.Data.SqlClient.SqlParameter("@AnalysisID", SqlDbType.Int, 4, ParameterDirection.Input, 10, 0, null, DataRowVersion.Current, false, null, "", "", ""));
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            [System.ComponentModel.Design.HelpKeyword("vs.data.TableAdapter")]
            [System.ComponentModel.DataObjectMethod(System.ComponentModel.DataObjectMethodType.Fill, true)]
            public virtual int Fill(HCHDataAnalysisDetail.spGetAnalysisDataTable dataTable, int? AnalysisID)
            {
                Adapter.SelectCommand=CommandCollection[0];
                if (AnalysisID.HasValue==true)
                {
                    Adapter.SelectCommand.Parameters[1].Value=AnalysisID.Value;
                }
                else
                {
                    Adapter.SelectCommand.Parameters[1].Value=DBNull.Value;
                }
                if (ClearBeforeFill==true)
                {
                    dataTable.Clear();
                }
                int returnValue = Adapter.Fill(dataTable);
                return returnValue;
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            [System.ComponentModel.Design.HelpKeyword("vs.data.TableAdapter")]
            [System.ComponentModel.DataObjectMethod(System.ComponentModel.DataObjectMethodType.Select, true)]
            public virtual HCHDataAnalysisDetail.spGetAnalysisDataTable GetData(int? AnalysisID)
            {
                Adapter.SelectCommand=CommandCollection[0];
                if (AnalysisID.HasValue==true)
                {
                    Adapter.SelectCommand.Parameters[1].Value=AnalysisID.Value;
                }
                else
                {
                    Adapter.SelectCommand.Parameters[1].Value=DBNull.Value;
                }
                var dataTable = new HCHDataAnalysisDetail.spGetAnalysisDataTable();
                Adapter.Fill(dataTable);
                return dataTable;
            }
        }

        /// <summary>
    /// TableAdapterManager is used to coordinate TableAdapters in the dataset to enable Hierarchical Update scenarios
    /// </summary>
        [System.ComponentModel.DesignerCategory("code")]
        [System.ComponentModel.ToolboxItem(true)]
        [System.ComponentModel.Designer("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerDesigner, Microsoft.VSD"+"esigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]

        [System.ComponentModel.Design.HelpKeyword("vs.data.TableAdapterManager")]
        public partial class TableAdapterManager : System.ComponentModel.Component
        {

            private UpdateOrderOption _updateOrder;

            private bool _backupDataSetBeforeUpdate;

            private IDbConnection _connection;

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public UpdateOrderOption UpdateOrder
            {
                get
                {
                    return _updateOrder;
                }
                set
                {
                    _updateOrder=value;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public bool BackupDataSetBeforeUpdate
            {
                get
                {
                    return _backupDataSetBeforeUpdate;
                }
                set
                {
                    _backupDataSetBeforeUpdate=value;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            [System.ComponentModel.Browsable(false)]
            public IDbConnection Connection
            {
                get
                {
                    if (_connection is not null)
                    {
                        return _connection;
                    }
                    return null;
                }
                set
                {
                    _connection=value;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            [System.ComponentModel.Browsable(false)]
            public int TableAdapterInstanceCount
            {
                get
                {
                    int count = 0;
                    return count;
                }
            }

            /// <summary>
        /// Update rows in top-down order.
        /// </summary>
            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            private int UpdateUpdatedRows(HCHDataAnalysisDetail dataSet, List<DataRow> allChangedRows, List<DataRow> allAddedRows)
            {
                int result = 0;
                return result;
            }

            /// <summary>
        /// Insert rows in top-down order.
        /// </summary>
            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            private int UpdateInsertedRows(HCHDataAnalysisDetail dataSet, List<DataRow> allAddedRows)
            {
                int result = 0;
                return result;
            }

            /// <summary>
        /// Delete rows in bottom-up order.
        /// </summary>
            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            private int UpdateDeletedRows(HCHDataAnalysisDetail dataSet, List<DataRow> allChangedRows)
            {
                int result = 0;
                return result;
            }

            /// <summary>
        /// Remove inserted rows that become updated rows after calling TableAdapter.Update(inserted rows) first
        /// </summary>
            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            private DataRow[] GetRealUpdatedRows(DataRow[] updatedRows, List<DataRow> allAddedRows)
            {
                if (updatedRows is null||updatedRows.Length<1)
                {
                    return updatedRows;
                }
                if (allAddedRows is null||allAddedRows.Count<1)
                {
                    return updatedRows;
                }
                var realUpdatedRows = new List<DataRow>();
                int i = 0;
                while (i<updatedRows.Length)
                {
                    var row = updatedRows[i];
                    if (allAddedRows.Contains(row)==false)
                    {
                        realUpdatedRows.Add(row);
                    }
                    i=i+1;
                }
                return realUpdatedRows.ToArray();
            }

            /// <summary>
        /// Update all changes to the dataset.
        /// </summary>
            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public virtual int UpdateAll(HCHDataAnalysisDetail dataSet)
            {
                if (dataSet is null)
                {
                    throw new ArgumentNullException("dataSet");
                }
                if (dataSet.HasChanges()==false)
                {
                    return 0;
                }
                var workConnection = Connection;
                if (workConnection is null)
                {
                    throw new ApplicationException("TableAdapterManager contains no connection information. Set each TableAdapterMana"+"ger TableAdapter property to a valid TableAdapter instance.");
                }
                bool workConnOpened = false;
                if ((workConnection.State&ConnectionState.Broken)==ConnectionState.Broken)
                {
                    workConnection.Close();
                }
                if (workConnection.State==ConnectionState.Closed)
                {
                    workConnection.Open();
                    workConnOpened=true;
                }
                var workTransaction = workConnection.BeginTransaction();
                if (workTransaction is null)
                {
                    throw new ApplicationException("The transaction cannot begin. The current data connection does not support transa"+"ctions or the current state is not allowing the transaction to begin.");
                }
                var allChangedRows = new List<DataRow>();
                var allAddedRows = new List<DataRow>();
                var adaptersWithAcceptChangesDuringUpdate = new List<System.Data.Common.DataAdapter>();
                var revertConnections = new Dictionary<object, IDbConnection>();
                int result = 0;
                DataSet backupDataSet = null;
                if (BackupDataSetBeforeUpdate)
                {
                    backupDataSet=new DataSet();
                    backupDataSet.Merge(dataSet);
                }
                try
                {
                    // ---- Prepare for update -----------
                    // 
                    // 
                    // ---- Perform updates -----------
                    // 
                    if (UpdateOrder==UpdateOrderOption.UpdateInsertDelete)
                    {
                        result=result+UpdateUpdatedRows(dataSet, allChangedRows, allAddedRows);
                        result=result+UpdateInsertedRows(dataSet, allAddedRows);
                    }
                    else
                    {
                        result=result+UpdateInsertedRows(dataSet, allAddedRows);
                        result=result+UpdateUpdatedRows(dataSet, allChangedRows, allAddedRows);
                    }
                    result=result+UpdateDeletedRows(dataSet, allChangedRows);
                    // 
                    // ---- Commit updates -----------
                    // 
                    workTransaction.Commit();
                    if (0<allAddedRows.Count)
                    {
                        var rows = new DataRow[allAddedRows.Count];
                        allAddedRows.CopyTo(rows);
                        int i = 0;
                        while (i<rows.Length)
                        {
                            var row = rows[i];
                            row.AcceptChanges();
                            i=i+1;
                        }
                    }
                    if (0<allChangedRows.Count)
                    {
                        var rows = new DataRow[allChangedRows.Count];
                        allChangedRows.CopyTo(rows);
                        int i = 0;
                        while (i<rows.Length)
                        {
                            var row = rows[i];
                            row.AcceptChanges();
                            i=i+1;
                        }
                    }
                }
                catch (Exception ex)
                {
                    workTransaction.Rollback();
                    // ---- Restore the dataset -----------
                    if (BackupDataSetBeforeUpdate)
                    {
                        Debug.Assert(backupDataSet is not null);
                        dataSet.Clear();
                        dataSet.Merge(backupDataSet);
                    }
                    else if (0<allAddedRows.Count)
                    {
                        var rows = new DataRow[allAddedRows.Count];
                        allAddedRows.CopyTo(rows);
                        int i = 0;
                        while (i<rows.Length)
                        {
                            var row = rows[i];
                            row.AcceptChanges();
                            row.SetAdded();
                            i=i+1;
                        }
                    }
                    throw ex;
                }
                finally
                {
                    if (workConnOpened)
                    {
                        workConnection.Close();
                    }
                    if (0<adaptersWithAcceptChangesDuringUpdate.Count)
                    {
                        var adapters = new System.Data.Common.DataAdapter[adaptersWithAcceptChangesDuringUpdate.Count];
                        adaptersWithAcceptChangesDuringUpdate.CopyTo(adapters);
                        int i = 0;
                        while (i<adapters.Length)
                        {
                            var adapter = adapters[i];
                            adapter.AcceptChangesDuringUpdate=true;
                            i=i+1;
                        }
                    }
                }
                return result;
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            protected virtual void SortSelfReferenceRows(DataRow[] rows, DataRelation relation, bool childFirst)
            {
                Array.Sort(rows, new SelfReferenceComparer(relation, childFirst));
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            protected virtual bool MatchTableAdapterConnection(IDbConnection inputConnection)
            {
                if (_connection is not null)
                {
                    return true;
                }
                if (Connection is null||inputConnection is null)
                {
                    return true;
                }
                if (string.Equals(Connection.ConnectionString, inputConnection.ConnectionString, StringComparison.Ordinal))
                {
                    return true;
                }
                return false;
            }

            /// <summary>
        /// Update Order Option
        /// </summary>
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public enum UpdateOrderOption
            {

                InsertUpdateDelete = 0,

                UpdateInsertDelete = 1
            }

            /// <summary>
        /// Used to sort self-referenced table's rows
        /// </summary>
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            private class SelfReferenceComparer : object, IComparer<DataRow>
            {

                private DataRelation _relation;

                private int _childFirst;

                [DebuggerNonUserCode()]
                [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
                internal SelfReferenceComparer(DataRelation relation, bool childFirst) : base()
                {
                    _relation=relation;
                    if (childFirst)
                    {
                        _childFirst=-1;
                    }
                    else
                    {
                        _childFirst=1;
                    }
                }

                [DebuggerNonUserCode()]
                [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
                private DataRow GetRoot(DataRow row, ref int distance)
                {
                    Debug.Assert(row is not null);
                    var root = row;
                    distance=0;

                    IDictionary<DataRow, DataRow> traversedRows = new Dictionary<DataRow, DataRow>();
                    traversedRows[row]=row;

                    var parent = row.GetParentRow(_relation, DataRowVersion.Default);

                    while (parent is not null&&traversedRows.ContainsKey(parent)==false)
                    {
                        distance=distance+1;
                        root=parent;
                        traversedRows[parent]=parent;
                        parent=parent.GetParentRow(_relation, DataRowVersion.Default);

                    }

                    if (distance==0)
                    {
                        traversedRows.Clear();
                        traversedRows[row]=row;
                        parent=row.GetParentRow(_relation, DataRowVersion.Original);

                        while (parent is not null&&traversedRows.ContainsKey(parent)==false)
                        {
                            distance=distance+1;
                            root=parent;
                            traversedRows[parent]=parent;
                            parent=parent.GetParentRow(_relation, DataRowVersion.Original);

                        }
                    }

                    return root;
                }

                [DebuggerNonUserCode()]
                [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
                public int Compare(DataRow row1, DataRow row2)
                {
                    if (ReferenceEquals(row1, row2))
                    {
                        return 0;
                    }
                    if (row1 is null)
                    {
                        return -1;
                    }
                    if (row2 is null)
                    {
                        return 1;
                    }

                    int distance1 = 0;
                    var root1 = GetRoot(row1, ref distance1);

                    int distance2 = 0;
                    var root2 = GetRoot(row2, ref distance2);

                    if (ReferenceEquals(root1, root2))
                    {
                        return _childFirst*distance1.CompareTo(distance2);
                    }
                    else
                    {
                        Debug.Assert(root1.Table is not null&&root2.Table is not null);
                        if (root1.Table.Rows.IndexOf(root1)<root2.Table.Rows.IndexOf(root2))
                        {
                            return -1;
                        }
                        else
                        {
                            return 1;
                        }
                    }
                }
            }
        }
    }
}