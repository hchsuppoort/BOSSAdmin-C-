// ------------------------------------------------------------------------------
// <auto-generated>
// This code was generated by a tool.
// Runtime Version:4.0.30319.42000
// 
// Changes to this file may cause incorrect behavior and will be lost if
// the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Data;
using System.Diagnostics;
using System.Runtime.CompilerServices;
using Microsoft.VisualBasic.CompilerServices;

namespace BossAdmin
{



    /// <summary>
/// Represents a strongly typed in-memory cache of data.
/// </summary>
    [Serializable()]
    [System.ComponentModel.DesignerCategory("code")]
    [System.ComponentModel.ToolboxItem(true)]
    [System.Xml.Serialization.XmlSchemaProvider("GetTypedDataSetSchema")]
    [System.Xml.Serialization.XmlRoot("HCHDataCostAnalysis")]
    [System.ComponentModel.Design.HelpKeyword("vs.data.DataSet")]
    public partial class HCHDataCostAnalysis : DataSet
    {

        private spGetAnalysesSummaryDataTable tablespGetAnalysesSummary;

        private SchemaSerializationMode _schemaSerializationMode = SchemaSerializationMode.IncludeSchema;

        [DebuggerNonUserCode()]
        [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        public HCHDataCostAnalysis() : base()
        {
            BeginInit();
            InitClass();
            System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = SchemaChanged;
            base.Tables.CollectionChanged+=schemaChangedHandler;
            base.Relations.CollectionChanged+=schemaChangedHandler;
            EndInit();
        }

        [DebuggerNonUserCode()]
        [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        protected HCHDataCostAnalysis(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : base(info, context, false)
        {
            if (IsBinarySerialized(info, context)==true)
            {
                InitVars(false);
                System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler1 = SchemaChanged;
                Tables.CollectionChanged+=schemaChangedHandler1;
                Relations.CollectionChanged+=schemaChangedHandler1;
                return;
            }
            string strSchema = Conversions.ToString(info.GetValue("XmlSchema", typeof(string)));
            if (DetermineSchemaSerializationMode(info, context)==SchemaSerializationMode.IncludeSchema)
            {
                var ds = new DataSet();
                ds.ReadXmlSchema(new System.Xml.XmlTextReader(new System.IO.StringReader(strSchema)));
                if (ds.Tables["spGetAnalysesSummary"] is not null)
                {
                    base.Tables.Add(new spGetAnalysesSummaryDataTable(ds.Tables["spGetAnalysesSummary"]));
                }
                DataSetName=ds.DataSetName;
                Prefix=ds.Prefix;
                Namespace=ds.Namespace;
                Locale=ds.Locale;
                CaseSensitive=ds.CaseSensitive;
                EnforceConstraints=ds.EnforceConstraints;
                Merge(ds, false, MissingSchemaAction.Add);
                InitVars();
            }
            else
            {
                ReadXmlSchema(new System.Xml.XmlTextReader(new System.IO.StringReader(strSchema)));
            }
            GetSerializationData(info, context);
            System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = SchemaChanged;
            base.Tables.CollectionChanged+=schemaChangedHandler;
            Relations.CollectionChanged+=schemaChangedHandler;
        }

        [DebuggerNonUserCode()]
        [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public spGetAnalysesSummaryDataTable spGetAnalysesSummary
        {
            get
            {
                return tablespGetAnalysesSummary;
            }
        }

        [DebuggerNonUserCode()]
        [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        [System.ComponentModel.Browsable(true)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Visible)]
        public override SchemaSerializationMode SchemaSerializationMode
        {
            get
            {
                return _schemaSerializationMode;
            }
            set
            {
                _schemaSerializationMode=value;
            }
        }

        [DebuggerNonUserCode()]
        [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new DataTableCollection Tables
        {
            get
            {
                return base.Tables;
            }
        }

        [DebuggerNonUserCode()]
        [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new DataRelationCollection Relations
        {
            get
            {
                return base.Relations;
            }
        }

        [DebuggerNonUserCode()]
        [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        protected override void InitializeDerivedDataSet()
        {
            BeginInit();
            InitClass();
            EndInit();
        }

        [DebuggerNonUserCode()]
        [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        public override DataSet Clone()
        {
            HCHDataCostAnalysis cln = (HCHDataCostAnalysis)base.Clone();
            cln.InitVars();
            cln.SchemaSerializationMode=SchemaSerializationMode;
            return cln;
        }

        [DebuggerNonUserCode()]
        [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        protected override bool ShouldSerializeTables()
        {
            return false;
        }

        [DebuggerNonUserCode()]
        [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        protected override bool ShouldSerializeRelations()
        {
            return false;
        }

        [DebuggerNonUserCode()]
        [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        protected override void ReadXmlSerializable(System.Xml.XmlReader reader)
        {
            if (DetermineSchemaSerializationMode(reader)==SchemaSerializationMode.IncludeSchema)
            {
                Reset();
                var ds = new DataSet();
                ds.ReadXml(reader);
                if (ds.Tables["spGetAnalysesSummary"] is not null)
                {
                    base.Tables.Add(new spGetAnalysesSummaryDataTable(ds.Tables["spGetAnalysesSummary"]));
                }
                DataSetName=ds.DataSetName;
                Prefix=ds.Prefix;
                Namespace=ds.Namespace;
                Locale=ds.Locale;
                CaseSensitive=ds.CaseSensitive;
                EnforceConstraints=ds.EnforceConstraints;
                Merge(ds, false, MissingSchemaAction.Add);
                InitVars();
            }
            else
            {
                ReadXml(reader);
                InitVars();
            }
        }

        [DebuggerNonUserCode()]
        [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        protected override System.Xml.Schema.XmlSchema GetSchemaSerializable()
        {
            var stream = new System.IO.MemoryStream();
            WriteXmlSchema(new System.Xml.XmlTextWriter(stream, null));
            stream.Position=0L;
            return System.Xml.Schema.XmlSchema.Read(new System.Xml.XmlTextReader(stream), null);
        }

        [DebuggerNonUserCode()]
        [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        internal void InitVars()
        {
            InitVars(true);
        }

        [DebuggerNonUserCode()]
        [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        internal void InitVars(bool initTable)
        {
            tablespGetAnalysesSummary=(spGetAnalysesSummaryDataTable)base.Tables["spGetAnalysesSummary"];
            if (initTable==true)
            {
                if (tablespGetAnalysesSummary is not null)
                {
                    tablespGetAnalysesSummary.InitVars();
                }
            }
        }

        [DebuggerNonUserCode()]
        [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        private void InitClass()
        {
            DataSetName="HCHDataCostAnalysis";
            Prefix="";
            Namespace="http://tempuri.org/HCHDataCostAnalysis.xsd";
            EnforceConstraints=true;
            SchemaSerializationMode=SchemaSerializationMode.IncludeSchema;
            tablespGetAnalysesSummary=new spGetAnalysesSummaryDataTable();
            base.Tables.Add(tablespGetAnalysesSummary);
        }

        [DebuggerNonUserCode()]
        [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        private bool ShouldSerializespGetAnalysesSummary()
        {
            return false;
        }

        [DebuggerNonUserCode()]
        [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        private void SchemaChanged(object sender, System.ComponentModel.CollectionChangeEventArgs e)
        {
            if (e.Action==System.ComponentModel.CollectionChangeAction.Remove)
            {
                InitVars();
            }
        }

        [DebuggerNonUserCode()]
        [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        public static System.Xml.Schema.XmlSchemaComplexType GetTypedDataSetSchema(System.Xml.Schema.XmlSchemaSet xs)
        {
            var ds = new HCHDataCostAnalysis();
            var type = new System.Xml.Schema.XmlSchemaComplexType();
            var sequence = new System.Xml.Schema.XmlSchemaSequence();
            var any = new System.Xml.Schema.XmlSchemaAny();
            any.Namespace=ds.Namespace;
            sequence.Items.Add(any);
            type.Particle=sequence;
            var dsSchema = ds.GetSchemaSerializable();
            if (xs.Contains(dsSchema.TargetNamespace))
            {
                var s1 = new System.IO.MemoryStream();
                var s2 = new System.IO.MemoryStream();
                try
                {
                    System.Xml.Schema.XmlSchema schema = null;
                    dsSchema.Write(s1);
                    var schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator();
                    while (schemas.MoveNext())
                    {
                        schema=(System.Xml.Schema.XmlSchema)schemas.Current;
                        s2.SetLength(0L);
                        schema.Write(s2);
                        if (s1.Length==s2.Length)
                        {
                            s1.Position=0L;
                            s2.Position=0L;

                            while (s1.Position!=s1.Length&&s1.ReadByte()==s2.ReadByte())
                            {


                            }
                            if (s1.Position==s1.Length)
                            {
                                return type;
                            }
                        }

                    }
                }
                finally
                {
                    if (s1 is not null)
                    {
                        s1.Close();
                    }
                    if (s2 is not null)
                    {
                        s2.Close();
                    }
                }
            }
            xs.Add(dsSchema);
            return type;
        }

        [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        public delegate void spGetAnalysesSummaryRowChangeEventHandler(object sender, spGetAnalysesSummaryRowChangeEvent e);

        /// <summary>
    /// Represents the strongly named DataTable class.
    /// </summary>
        [Serializable()]
        [System.Xml.Serialization.XmlSchemaProvider("GetTypedTableSchema")]
        public partial class spGetAnalysesSummaryDataTable : TypedTableBase<spGetAnalysesSummaryRow>
        {

            private DataColumn columnVersionName;

            private DataColumn columnNewMargin;

            private DataColumn columnCostProjectID;

            private DataColumn columnAnalysisDate;

            private DataColumn columnCostProjectID1;

            private DataColumn columnCostProjectName;

            private DataColumn columnAnalysisID;

            private DataColumn columnTaxPermitID;

            private DataColumn columnTaxPermitDistrict;

            private DataColumn columnProjectID;

            private DataColumn columnProjectMargin;

            private DataColumn columnCopyProjectID;

            private DataColumn columnOptionProjectID;

            private DataColumn columnCostIncreaseAlpha;

            private DataColumn columnCostIncreasePercent;

            private DataColumn columnPlanProjectID;

            private DataColumn columnNotes;

            private DataColumn columnProjectName;

            private DataColumn columnSoftCosts;

            private DataColumn columnPeriod;

            private DataColumn columnProjectPremium;

            private DataColumn columnCreatedBy;

            private DataColumn columnDoNotUse;

            private DataColumn columnAlphaCode;

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public spGetAnalysesSummaryDataTable() : base()
            {
                TableName="spGetAnalysesSummary";
                BeginInit();
                InitClass();
                EndInit();
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            internal spGetAnalysesSummaryDataTable(DataTable table) : base()
            {
                TableName=table.TableName;
                if (table.CaseSensitive!=table.DataSet.CaseSensitive)
                {
                    CaseSensitive=table.CaseSensitive;
                }
                if ((table.Locale.ToString()??"")!=(table.DataSet.Locale.ToString()??""))
                {
                    Locale=table.Locale;
                }
                if ((table.Namespace??"")!=(table.DataSet.Namespace??""))
                {
                    Namespace=table.Namespace;
                }
                Prefix=table.Prefix;
                MinimumCapacity=table.MinimumCapacity;
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            protected spGetAnalysesSummaryDataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : base(info, context)
            {
                InitVars();
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public DataColumn VersionNameColumn
            {
                get
                {
                    return columnVersionName;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public DataColumn NewMarginColumn
            {
                get
                {
                    return columnNewMargin;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public DataColumn CostProjectIDColumn
            {
                get
                {
                    return columnCostProjectID;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public DataColumn AnalysisDateColumn
            {
                get
                {
                    return columnAnalysisDate;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public DataColumn CostProjectID1Column
            {
                get
                {
                    return columnCostProjectID1;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public DataColumn CostProjectNameColumn
            {
                get
                {
                    return columnCostProjectName;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public DataColumn AnalysisIDColumn
            {
                get
                {
                    return columnAnalysisID;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public DataColumn TaxPermitIDColumn
            {
                get
                {
                    return columnTaxPermitID;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public DataColumn TaxPermitDistrictColumn
            {
                get
                {
                    return columnTaxPermitDistrict;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public DataColumn ProjectIDColumn
            {
                get
                {
                    return columnProjectID;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public DataColumn ProjectMarginColumn
            {
                get
                {
                    return columnProjectMargin;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public DataColumn CopyProjectIDColumn
            {
                get
                {
                    return columnCopyProjectID;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public DataColumn OptionProjectIDColumn
            {
                get
                {
                    return columnOptionProjectID;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public DataColumn CostIncreaseAlphaColumn
            {
                get
                {
                    return columnCostIncreaseAlpha;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public DataColumn CostIncreasePercentColumn
            {
                get
                {
                    return columnCostIncreasePercent;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public DataColumn PlanProjectIDColumn
            {
                get
                {
                    return columnPlanProjectID;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public DataColumn NotesColumn
            {
                get
                {
                    return columnNotes;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public DataColumn ProjectNameColumn
            {
                get
                {
                    return columnProjectName;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public DataColumn SoftCostsColumn
            {
                get
                {
                    return columnSoftCosts;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public DataColumn PeriodColumn
            {
                get
                {
                    return columnPeriod;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public DataColumn ProjectPremiumColumn
            {
                get
                {
                    return columnProjectPremium;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public DataColumn CreatedByColumn
            {
                get
                {
                    return columnCreatedBy;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public DataColumn DoNotUseColumn
            {
                get
                {
                    return columnDoNotUse;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public DataColumn AlphaCodeColumn
            {
                get
                {
                    return columnAlphaCode;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            [System.ComponentModel.Browsable(false)]
            public int Count
            {
                get
                {
                    return Rows.Count;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public spGetAnalysesSummaryRow this[int index]
            {
                get
                {
                    return (spGetAnalysesSummaryRow)Rows[index];
                }
            }

            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public event spGetAnalysesSummaryRowChangeEventHandler spGetAnalysesSummaryRowChanging;

            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public event spGetAnalysesSummaryRowChangeEventHandler spGetAnalysesSummaryRowChanged;

            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public event spGetAnalysesSummaryRowChangeEventHandler spGetAnalysesSummaryRowDeleting;

            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public event spGetAnalysesSummaryRowChangeEventHandler spGetAnalysesSummaryRowDeleted;

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public void AddspGetAnalysesSummaryRow(spGetAnalysesSummaryRow row)
            {
                Rows.Add(row);
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public spGetAnalysesSummaryRow AddspGetAnalysesSummaryRow(string VersionName, decimal NewMargin, int CostProjectID, DateTime AnalysisDate, string CostProjectID1, string CostProjectName, int TaxPermitID, string TaxPermitDistrict, string ProjectID, decimal ProjectMargin, string CopyProjectID, string OptionProjectID, int CostIncreaseAlpha, decimal CostIncreasePercent, string PlanProjectID, string Notes, string ProjectName, int SoftCosts, string Period, int ProjectPremium, string CreatedBy, bool DoNotUse, string AlphaCode)






















            {
                spGetAnalysesSummaryRow rowspGetAnalysesSummaryRow = (spGetAnalysesSummaryRow)NewRow();
                object[] columnValuesArray = new object[] { VersionName, NewMargin, CostProjectID, AnalysisDate, CostProjectID1, CostProjectName, null, TaxPermitID, TaxPermitDistrict, ProjectID, ProjectMargin, CopyProjectID, OptionProjectID, CostIncreaseAlpha, CostIncreasePercent, PlanProjectID, Notes, ProjectName, SoftCosts, Period, ProjectPremium, CreatedBy, DoNotUse, AlphaCode };
                rowspGetAnalysesSummaryRow.ItemArray=columnValuesArray;
                Rows.Add(rowspGetAnalysesSummaryRow);
                return rowspGetAnalysesSummaryRow;
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public override DataTable Clone()
            {
                spGetAnalysesSummaryDataTable cln = (spGetAnalysesSummaryDataTable)base.Clone();
                cln.InitVars();
                return cln;
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            protected override DataTable CreateInstance()
            {
                return new spGetAnalysesSummaryDataTable();
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            internal void InitVars()
            {
                columnVersionName=Columns["VersionName"];
                columnNewMargin=Columns["NewMargin"];
                columnCostProjectID=Columns["CostProjectID"];
                columnAnalysisDate=Columns["AnalysisDate"];
                columnCostProjectID1=Columns["CostProjectID1"];
                columnCostProjectName=Columns["CostProjectName"];
                columnAnalysisID=Columns["AnalysisID"];
                columnTaxPermitID=Columns["TaxPermitID"];
                columnTaxPermitDistrict=Columns["TaxPermitDistrict"];
                columnProjectID=Columns["ProjectID"];
                columnProjectMargin=Columns["ProjectMargin"];
                columnCopyProjectID=Columns["CopyProjectID"];
                columnOptionProjectID=Columns["OptionProjectID"];
                columnCostIncreaseAlpha=Columns["CostIncreaseAlpha"];
                columnCostIncreasePercent=Columns["CostIncreasePercent"];
                columnPlanProjectID=Columns["PlanProjectID"];
                columnNotes=Columns["Notes"];
                columnProjectName=Columns["ProjectName"];
                columnSoftCosts=Columns["SoftCosts"];
                columnPeriod=Columns["Period"];
                columnProjectPremium=Columns["ProjectPremium"];
                columnCreatedBy=Columns["CreatedBy"];
                columnDoNotUse=Columns["DoNotUse"];
                columnAlphaCode=Columns["AlphaCode"];
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            private void InitClass()
            {
                columnVersionName=new DataColumn("VersionName", typeof(string), null, MappingType.Element);
                Columns.Add(columnVersionName);
                columnNewMargin=new DataColumn("NewMargin", typeof(decimal), null, MappingType.Element);
                Columns.Add(columnNewMargin);
                columnCostProjectID=new DataColumn("CostProjectID", typeof(int), null, MappingType.Element);
                Columns.Add(columnCostProjectID);
                columnAnalysisDate=new DataColumn("AnalysisDate", typeof(DateTime), null, MappingType.Element);
                Columns.Add(columnAnalysisDate);
                columnCostProjectID1=new DataColumn("CostProjectID1", typeof(string), null, MappingType.Element);
                Columns.Add(columnCostProjectID1);
                columnCostProjectName=new DataColumn("CostProjectName", typeof(string), null, MappingType.Element);
                Columns.Add(columnCostProjectName);
                columnAnalysisID=new DataColumn("AnalysisID", typeof(int), null, MappingType.Element);
                Columns.Add(columnAnalysisID);
                columnTaxPermitID=new DataColumn("TaxPermitID", typeof(int), null, MappingType.Element);
                Columns.Add(columnTaxPermitID);
                columnTaxPermitDistrict=new DataColumn("TaxPermitDistrict", typeof(string), null, MappingType.Element);
                Columns.Add(columnTaxPermitDistrict);
                columnProjectID=new DataColumn("ProjectID", typeof(string), null, MappingType.Element);
                Columns.Add(columnProjectID);
                columnProjectMargin=new DataColumn("ProjectMargin", typeof(decimal), null, MappingType.Element);
                Columns.Add(columnProjectMargin);
                columnCopyProjectID=new DataColumn("CopyProjectID", typeof(string), null, MappingType.Element);
                Columns.Add(columnCopyProjectID);
                columnOptionProjectID=new DataColumn("OptionProjectID", typeof(string), null, MappingType.Element);
                Columns.Add(columnOptionProjectID);
                columnCostIncreaseAlpha=new DataColumn("CostIncreaseAlpha", typeof(int), null, MappingType.Element);
                Columns.Add(columnCostIncreaseAlpha);
                columnCostIncreasePercent=new DataColumn("CostIncreasePercent", typeof(decimal), null, MappingType.Element);
                Columns.Add(columnCostIncreasePercent);
                columnPlanProjectID=new DataColumn("PlanProjectID", typeof(string), null, MappingType.Element);
                Columns.Add(columnPlanProjectID);
                columnNotes=new DataColumn("Notes", typeof(string), null, MappingType.Element);
                Columns.Add(columnNotes);
                columnProjectName=new DataColumn("ProjectName", typeof(string), null, MappingType.Element);
                Columns.Add(columnProjectName);
                columnSoftCosts=new DataColumn("SoftCosts", typeof(int), null, MappingType.Element);
                Columns.Add(columnSoftCosts);
                columnPeriod=new DataColumn("Period", typeof(string), null, MappingType.Element);
                Columns.Add(columnPeriod);
                columnProjectPremium=new DataColumn("ProjectPremium", typeof(int), null, MappingType.Element);
                Columns.Add(columnProjectPremium);
                columnCreatedBy=new DataColumn("CreatedBy", typeof(string), null, MappingType.Element);
                Columns.Add(columnCreatedBy);
                columnDoNotUse=new DataColumn("DoNotUse", typeof(bool), null, MappingType.Element);
                Columns.Add(columnDoNotUse);
                columnAlphaCode=new DataColumn("AlphaCode", typeof(string), null, MappingType.Element);
                Columns.Add(columnAlphaCode);
                Constraints.Add(new UniqueConstraint("Constraint1", new DataColumn[] { columnCostProjectID1, columnAnalysisID, columnProjectID, columnCopyProjectID, columnOptionProjectID, columnPlanProjectID }, false));
                columnVersionName.AllowDBNull=false;
                columnVersionName.MaxLength=100;
                columnAnalysisDate.AllowDBNull=false;
                columnCostProjectID1.MaxLength=5;
                columnCostProjectName.MaxLength=50;
                columnAnalysisID.AutoIncrement=true;
                columnAnalysisID.AllowDBNull=false;
                columnAnalysisID.ReadOnly=true;
                columnTaxPermitDistrict.AllowDBNull=false;
                columnTaxPermitDistrict.MaxLength=50;
                columnProjectID.MaxLength=5;
                columnCopyProjectID.MaxLength=5;
                columnOptionProjectID.MaxLength=5;
                columnPlanProjectID.MaxLength=5;
                columnNotes.MaxLength=500;
                columnProjectName.MaxLength=50;
                columnPeriod.MaxLength=50;
                columnCreatedBy.MaxLength=10;
                columnAlphaCode.MaxLength=6;
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public spGetAnalysesSummaryRow NewspGetAnalysesSummaryRow()
            {
                return (spGetAnalysesSummaryRow)NewRow();
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder)
            {
                return new spGetAnalysesSummaryRow(builder);
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            protected override Type GetRowType()
            {
                return typeof(spGetAnalysesSummaryRow);
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            protected override void OnRowChanged(DataRowChangeEventArgs e)
            {
                base.OnRowChanged(e);
                if (spGetAnalysesSummaryRowChanged is not null)
                {
                    spGetAnalysesSummaryRowChanged?.Invoke(this, new spGetAnalysesSummaryRowChangeEvent((spGetAnalysesSummaryRow)e.Row, e.Action));
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            protected override void OnRowChanging(DataRowChangeEventArgs e)
            {
                base.OnRowChanging(e);
                if (spGetAnalysesSummaryRowChanging is not null)
                {
                    spGetAnalysesSummaryRowChanging?.Invoke(this, new spGetAnalysesSummaryRowChangeEvent((spGetAnalysesSummaryRow)e.Row, e.Action));
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            protected override void OnRowDeleted(DataRowChangeEventArgs e)
            {
                base.OnRowDeleted(e);
                if (spGetAnalysesSummaryRowDeleted is not null)
                {
                    spGetAnalysesSummaryRowDeleted?.Invoke(this, new spGetAnalysesSummaryRowChangeEvent((spGetAnalysesSummaryRow)e.Row, e.Action));
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            protected override void OnRowDeleting(DataRowChangeEventArgs e)
            {
                base.OnRowDeleting(e);
                if (spGetAnalysesSummaryRowDeleting is not null)
                {
                    spGetAnalysesSummaryRowDeleting?.Invoke(this, new spGetAnalysesSummaryRowChangeEvent((spGetAnalysesSummaryRow)e.Row, e.Action));
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public void RemovespGetAnalysesSummaryRow(spGetAnalysesSummaryRow row)
            {
                Rows.Remove(row);
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs)
            {
                var type = new System.Xml.Schema.XmlSchemaComplexType();
                var sequence = new System.Xml.Schema.XmlSchemaSequence();
                var ds = new HCHDataCostAnalysis();
                var any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace="http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs=new decimal(0);
                any1.MaxOccurs=decimal.MaxValue;
                any1.ProcessContents=System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                var any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace="urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs=new decimal(1);
                any2.ProcessContents=System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                var attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name="namespace";
                attribute1.FixedValue=ds.Namespace;
                type.Attributes.Add(attribute1);
                var attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name="tableTypeName";
                attribute2.FixedValue="spGetAnalysesSummaryDataTable";
                type.Attributes.Add(attribute2);
                type.Particle=sequence;
                var dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace))
                {
                    var s1 = new System.IO.MemoryStream();
                    var s2 = new System.IO.MemoryStream();
                    try
                    {
                        System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        var schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator();
                        while (schemas.MoveNext())
                        {
                            schema=(System.Xml.Schema.XmlSchema)schemas.Current;
                            s2.SetLength(0L);
                            schema.Write(s2);
                            if (s1.Length==s2.Length)
                            {
                                s1.Position=0L;
                                s2.Position=0L;

                                while (s1.Position!=s1.Length&&s1.ReadByte()==s2.ReadByte())
                                {


                                }
                                if (s1.Position==s1.Length)
                                {
                                    return type;
                                }
                            }

                        }
                    }
                    finally
                    {
                        if (s1 is not null)
                        {
                            s1.Close();
                        }
                        if (s2 is not null)
                        {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }

        /// <summary>
    /// Represents strongly named DataRow class.
    /// </summary>
        public partial class spGetAnalysesSummaryRow : DataRow
        {

            private spGetAnalysesSummaryDataTable tablespGetAnalysesSummary;

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            internal spGetAnalysesSummaryRow(DataRowBuilder rb) : base(rb)
            {
                tablespGetAnalysesSummary=(spGetAnalysesSummaryDataTable)Table;
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public string VersionName
            {
                get
                {
                    return Conversions.ToString(this[tablespGetAnalysesSummary.VersionNameColumn]);
                }
                set
                {
                    this[tablespGetAnalysesSummary.VersionNameColumn]=value;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public decimal NewMargin
            {
                get
                {
                    try
                    {
                        return Conversions.ToDecimal(this[tablespGetAnalysesSummary.NewMarginColumn]);
                    }
                    catch (InvalidCastException e)
                    {
                        throw new StrongTypingException("The value for column 'NewMargin' in table 'spGetAnalysesSummary' is DBNull.", e);
                    }
                }
                set
                {
                    this[tablespGetAnalysesSummary.NewMarginColumn]=value;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public int CostProjectID
            {
                get
                {
                    try
                    {
                        return (int)(this[tablespGetAnalysesSummary.CostProjectIDColumn]);
                    }
                    catch (InvalidCastException e)
                    {
                        throw new StrongTypingException("The value for column 'CostProjectID' in table 'spGetAnalysesSummary' is DBNull.", e);
                    }
                }
                set
                {
                    this[tablespGetAnalysesSummary.CostProjectIDColumn]=value;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public DateTime AnalysisDate
            {
                get
                {
                    return Conversions.ToDate(this[tablespGetAnalysesSummary.AnalysisDateColumn]);
                }
                set
                {
                    this[tablespGetAnalysesSummary.AnalysisDateColumn]=value;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public string CostProjectID1
            {
                get
                {
                    try
                    {
                        return Conversions.ToString(this[tablespGetAnalysesSummary.CostProjectID1Column]);
                    }
                    catch (InvalidCastException e)
                    {
                        throw new StrongTypingException("The value for column 'CostProjectID1' in table 'spGetAnalysesSummary' is DBNull.", e);
                    }
                }
                set
                {
                    this[tablespGetAnalysesSummary.CostProjectID1Column]=value;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public string CostProjectName
            {
                get
                {
                    try
                    {
                        return Conversions.ToString(this[tablespGetAnalysesSummary.CostProjectNameColumn]);
                    }
                    catch (InvalidCastException e)
                    {
                        throw new StrongTypingException("The value for column 'CostProjectName' in table 'spGetAnalysesSummary' is DBNull."+"", e);
                    }
                }
                set
                {
                    this[tablespGetAnalysesSummary.CostProjectNameColumn]=value;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public int AnalysisID
            {
                get
                {
                    return (int)(this[tablespGetAnalysesSummary.AnalysisIDColumn]);
                }
                set
                {
                    this[tablespGetAnalysesSummary.AnalysisIDColumn]=value;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public int TaxPermitID
            {
                get
                {
                    try
                    {
                        return (int)(this[tablespGetAnalysesSummary.TaxPermitIDColumn]);
                    }
                    catch (InvalidCastException e)
                    {
                        throw new StrongTypingException("The value for column 'TaxPermitID' in table 'spGetAnalysesSummary' is DBNull.", e);
                    }
                }
                set
                {
                    this[tablespGetAnalysesSummary.TaxPermitIDColumn]=value;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public string TaxPermitDistrict
            {
                get
                {
                    return Conversions.ToString(this[tablespGetAnalysesSummary.TaxPermitDistrictColumn]);
                }
                set
                {
                    this[tablespGetAnalysesSummary.TaxPermitDistrictColumn]=value;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public string ProjectID
            {
                get
                {
                    try
                    {
                        return Conversions.ToString(this[tablespGetAnalysesSummary.ProjectIDColumn]);
                    }
                    catch (InvalidCastException e)
                    {
                        throw new StrongTypingException("The value for column 'ProjectID' in table 'spGetAnalysesSummary' is DBNull.", e);
                    }
                }
                set
                {
                    this[tablespGetAnalysesSummary.ProjectIDColumn]=value;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public decimal ProjectMargin
            {
                get
                {
                    try
                    {
                        return Conversions.ToDecimal(this[tablespGetAnalysesSummary.ProjectMarginColumn]);
                    }
                    catch (InvalidCastException e)
                    {
                        throw new StrongTypingException("The value for column 'ProjectMargin' in table 'spGetAnalysesSummary' is DBNull.", e);
                    }
                }
                set
                {
                    this[tablespGetAnalysesSummary.ProjectMarginColumn]=value;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public string CopyProjectID
            {
                get
                {
                    try
                    {
                        return Conversions.ToString(this[tablespGetAnalysesSummary.CopyProjectIDColumn]);
                    }
                    catch (InvalidCastException e)
                    {
                        throw new StrongTypingException("The value for column 'CopyProjectID' in table 'spGetAnalysesSummary' is DBNull.", e);
                    }
                }
                set
                {
                    this[tablespGetAnalysesSummary.CopyProjectIDColumn]=value;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public string OptionProjectID
            {
                get
                {
                    try
                    {
                        return Conversions.ToString(this[tablespGetAnalysesSummary.OptionProjectIDColumn]);
                    }
                    catch (InvalidCastException e)
                    {
                        throw new StrongTypingException("The value for column 'OptionProjectID' in table 'spGetAnalysesSummary' is DBNull."+"", e);
                    }
                }
                set
                {
                    this[tablespGetAnalysesSummary.OptionProjectIDColumn]=value;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public int CostIncreaseAlpha
            {
                get
                {
                    try
                    {
                        return (int)(this[tablespGetAnalysesSummary.CostIncreaseAlphaColumn]);
                    }
                    catch (InvalidCastException e)
                    {
                        throw new StrongTypingException("The value for column 'CostIncreaseAlpha' in table 'spGetAnalysesSummary' is DBNul"+"l.", e);
                    }
                }
                set
                {
                    this[tablespGetAnalysesSummary.CostIncreaseAlphaColumn]=value;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public decimal CostIncreasePercent
            {
                get
                {
                    try
                    {
                        return Conversions.ToDecimal(this[tablespGetAnalysesSummary.CostIncreasePercentColumn]);
                    }
                    catch (InvalidCastException e)
                    {
                        throw new StrongTypingException("The value for column 'CostIncreasePercent' in table 'spGetAnalysesSummary' is DBN"+"ull.", e);
                    }
                }
                set
                {
                    this[tablespGetAnalysesSummary.CostIncreasePercentColumn]=value;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public string PlanProjectID
            {
                get
                {
                    try
                    {
                        return Conversions.ToString(this[tablespGetAnalysesSummary.PlanProjectIDColumn]);
                    }
                    catch (InvalidCastException e)
                    {
                        throw new StrongTypingException("The value for column 'PlanProjectID' in table 'spGetAnalysesSummary' is DBNull.", e);
                    }
                }
                set
                {
                    this[tablespGetAnalysesSummary.PlanProjectIDColumn]=value;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public string Notes
            {
                get
                {
                    try
                    {
                        return Conversions.ToString(this[tablespGetAnalysesSummary.NotesColumn]);
                    }
                    catch (InvalidCastException e)
                    {
                        throw new StrongTypingException("The value for column 'Notes' in table 'spGetAnalysesSummary' is DBNull.", e);
                    }
                }
                set
                {
                    this[tablespGetAnalysesSummary.NotesColumn]=value;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public string ProjectName
            {
                get
                {
                    try
                    {
                        return Conversions.ToString(this[tablespGetAnalysesSummary.ProjectNameColumn]);
                    }
                    catch (InvalidCastException e)
                    {
                        throw new StrongTypingException("The value for column 'ProjectName' in table 'spGetAnalysesSummary' is DBNull.", e);
                    }
                }
                set
                {
                    this[tablespGetAnalysesSummary.ProjectNameColumn]=value;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public int SoftCosts
            {
                get
                {
                    try
                    {
                        return (int)(this[tablespGetAnalysesSummary.SoftCostsColumn]);
                    }
                    catch (InvalidCastException e)
                    {
                        throw new StrongTypingException("The value for column 'SoftCosts' in table 'spGetAnalysesSummary' is DBNull.", e);
                    }
                }
                set
                {
                    this[tablespGetAnalysesSummary.SoftCostsColumn]=value;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public string Period
            {
                get
                {
                    try
                    {
                        return Conversions.ToString(this[tablespGetAnalysesSummary.PeriodColumn]);
                    }
                    catch (InvalidCastException e)
                    {
                        throw new StrongTypingException("The value for column 'Period' in table 'spGetAnalysesSummary' is DBNull.", e);
                    }
                }
                set
                {
                    this[tablespGetAnalysesSummary.PeriodColumn]=value;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public int ProjectPremium
            {
                get
                {
                    try
                    {
                        return (int)(this[tablespGetAnalysesSummary.ProjectPremiumColumn]);
                    }
                    catch (InvalidCastException e)
                    {
                        throw new StrongTypingException("The value for column 'ProjectPremium' in table 'spGetAnalysesSummary' is DBNull.", e);
                    }
                }
                set
                {
                    this[tablespGetAnalysesSummary.ProjectPremiumColumn]=value;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public string CreatedBy
            {
                get
                {
                    try
                    {
                        return Conversions.ToString(this[tablespGetAnalysesSummary.CreatedByColumn]);
                    }
                    catch (InvalidCastException e)
                    {
                        throw new StrongTypingException("The value for column 'CreatedBy' in table 'spGetAnalysesSummary' is DBNull.", e);
                    }
                }
                set
                {
                    this[tablespGetAnalysesSummary.CreatedByColumn]=value;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public bool DoNotUse
            {
                get
                {
                    try
                    {
                        return Conversions.ToBoolean(this[tablespGetAnalysesSummary.DoNotUseColumn]);
                    }
                    catch (InvalidCastException e)
                    {
                        throw new StrongTypingException("The value for column 'DoNotUse' in table 'spGetAnalysesSummary' is DBNull.", e);
                    }
                }
                set
                {
                    this[tablespGetAnalysesSummary.DoNotUseColumn]=value;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public string AlphaCode
            {
                get
                {
                    try
                    {
                        return Conversions.ToString(this[tablespGetAnalysesSummary.AlphaCodeColumn]);
                    }
                    catch (InvalidCastException e)
                    {
                        throw new StrongTypingException("The value for column 'AlphaCode' in table 'spGetAnalysesSummary' is DBNull.", e);
                    }
                }
                set
                {
                    this[tablespGetAnalysesSummary.AlphaCodeColumn]=value;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public bool IsNewMarginNull()
            {
                return IsNull(tablespGetAnalysesSummary.NewMarginColumn);
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public void SetNewMarginNull()
            {
                this[tablespGetAnalysesSummary.NewMarginColumn]=Convert.DBNull;
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public bool IsCostProjectIDNull()
            {
                return IsNull(tablespGetAnalysesSummary.CostProjectIDColumn);
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public void SetCostProjectIDNull()
            {
                this[tablespGetAnalysesSummary.CostProjectIDColumn]=Convert.DBNull;
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public bool IsCostProjectID1Null()
            {
                return IsNull(tablespGetAnalysesSummary.CostProjectID1Column);
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public void SetCostProjectID1Null()
            {
                this[tablespGetAnalysesSummary.CostProjectID1Column]=Convert.DBNull;
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public bool IsCostProjectNameNull()
            {
                return IsNull(tablespGetAnalysesSummary.CostProjectNameColumn);
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public void SetCostProjectNameNull()
            {
                this[tablespGetAnalysesSummary.CostProjectNameColumn]=Convert.DBNull;
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public bool IsTaxPermitIDNull()
            {
                return IsNull(tablespGetAnalysesSummary.TaxPermitIDColumn);
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public void SetTaxPermitIDNull()
            {
                this[tablespGetAnalysesSummary.TaxPermitIDColumn]=Convert.DBNull;
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public bool IsProjectIDNull()
            {
                return IsNull(tablespGetAnalysesSummary.ProjectIDColumn);
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public void SetProjectIDNull()
            {
                this[tablespGetAnalysesSummary.ProjectIDColumn]=Convert.DBNull;
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public bool IsProjectMarginNull()
            {
                return IsNull(tablespGetAnalysesSummary.ProjectMarginColumn);
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public void SetProjectMarginNull()
            {
                this[tablespGetAnalysesSummary.ProjectMarginColumn]=Convert.DBNull;
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public bool IsCopyProjectIDNull()
            {
                return IsNull(tablespGetAnalysesSummary.CopyProjectIDColumn);
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public void SetCopyProjectIDNull()
            {
                this[tablespGetAnalysesSummary.CopyProjectIDColumn]=Convert.DBNull;
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public bool IsOptionProjectIDNull()
            {
                return IsNull(tablespGetAnalysesSummary.OptionProjectIDColumn);
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public void SetOptionProjectIDNull()
            {
                this[tablespGetAnalysesSummary.OptionProjectIDColumn]=Convert.DBNull;
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public bool IsCostIncreaseAlphaNull()
            {
                return IsNull(tablespGetAnalysesSummary.CostIncreaseAlphaColumn);
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public void SetCostIncreaseAlphaNull()
            {
                this[tablespGetAnalysesSummary.CostIncreaseAlphaColumn]=Convert.DBNull;
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public bool IsCostIncreasePercentNull()
            {
                return IsNull(tablespGetAnalysesSummary.CostIncreasePercentColumn);
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public void SetCostIncreasePercentNull()
            {
                this[tablespGetAnalysesSummary.CostIncreasePercentColumn]=Convert.DBNull;
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public bool IsPlanProjectIDNull()
            {
                return IsNull(tablespGetAnalysesSummary.PlanProjectIDColumn);
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public void SetPlanProjectIDNull()
            {
                this[tablespGetAnalysesSummary.PlanProjectIDColumn]=Convert.DBNull;
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public bool IsNotesNull()
            {
                return IsNull(tablespGetAnalysesSummary.NotesColumn);
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public void SetNotesNull()
            {
                this[tablespGetAnalysesSummary.NotesColumn]=Convert.DBNull;
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public bool IsProjectNameNull()
            {
                return IsNull(tablespGetAnalysesSummary.ProjectNameColumn);
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public void SetProjectNameNull()
            {
                this[tablespGetAnalysesSummary.ProjectNameColumn]=Convert.DBNull;
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public bool IsSoftCostsNull()
            {
                return IsNull(tablespGetAnalysesSummary.SoftCostsColumn);
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public void SetSoftCostsNull()
            {
                this[tablespGetAnalysesSummary.SoftCostsColumn]=Convert.DBNull;
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public bool IsPeriodNull()
            {
                return IsNull(tablespGetAnalysesSummary.PeriodColumn);
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public void SetPeriodNull()
            {
                this[tablespGetAnalysesSummary.PeriodColumn]=Convert.DBNull;
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public bool IsProjectPremiumNull()
            {
                return IsNull(tablespGetAnalysesSummary.ProjectPremiumColumn);
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public void SetProjectPremiumNull()
            {
                this[tablespGetAnalysesSummary.ProjectPremiumColumn]=Convert.DBNull;
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public bool IsCreatedByNull()
            {
                return IsNull(tablespGetAnalysesSummary.CreatedByColumn);
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public void SetCreatedByNull()
            {
                this[tablespGetAnalysesSummary.CreatedByColumn]=Convert.DBNull;
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public bool IsDoNotUseNull()
            {
                return IsNull(tablespGetAnalysesSummary.DoNotUseColumn);
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public void SetDoNotUseNull()
            {
                this[tablespGetAnalysesSummary.DoNotUseColumn]=Convert.DBNull;
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public bool IsAlphaCodeNull()
            {
                return IsNull(tablespGetAnalysesSummary.AlphaCodeColumn);
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public void SetAlphaCodeNull()
            {
                this[tablespGetAnalysesSummary.AlphaCodeColumn]=Convert.DBNull;
            }
        }

        /// <summary>
    /// Row event argument class
    /// </summary>
        [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        public class spGetAnalysesSummaryRowChangeEvent : EventArgs
        {

            private spGetAnalysesSummaryRow eventRow;

            private DataRowAction eventAction;

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public spGetAnalysesSummaryRowChangeEvent(spGetAnalysesSummaryRow row, DataRowAction action) : base()
            {
                eventRow=row;
                eventAction=action;
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public spGetAnalysesSummaryRow Row
            {
                get
                {
                    return eventRow;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public DataRowAction Action
            {
                get
                {
                    return eventAction;
                }
            }
        }
    }

    namespace HCHDataCostAnalysisTableAdapters
    {

        /// <summary>
    /// Represents the connection and commands used to retrieve and save data.
    /// </summary>
        [System.ComponentModel.DesignerCategory("code")]
        [System.ComponentModel.ToolboxItem(true)]
        [System.ComponentModel.DataObject(true)]
        [System.ComponentModel.Designer("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"+", Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]

        [System.ComponentModel.Design.HelpKeyword("vs.data.TableAdapter")]
        public partial class spGetAnalysesSummaryTableAdapter : System.ComponentModel.Component
        {

            private System.Data.SqlClient.SqlDataAdapter __adapter;

            private System.Data.SqlClient.SqlDataAdapter _adapter
            {
                [MethodImpl(MethodImplOptions.Synchronized)]
                get
                {
                    return __adapter;
                }

                [MethodImpl(MethodImplOptions.Synchronized)]
                set
                {
                    __adapter=value;
                }
            }

            private System.Data.SqlClient.SqlConnection _connection;

            private System.Data.SqlClient.SqlTransaction _transaction;

            private System.Data.SqlClient.SqlCommand[] _commandCollection;

            private bool _clearBeforeFill;

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public spGetAnalysesSummaryTableAdapter() : base()
            {
                ClearBeforeFill=true;
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            protected internal System.Data.SqlClient.SqlDataAdapter Adapter
            {
                get
                {
                    if (_adapter is null)
                    {
                        InitAdapter();
                    }
                    return _adapter;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            internal System.Data.SqlClient.SqlConnection Connection
            {
                get
                {
                    if (_connection is null)
                    {
                        InitConnection();
                    }
                    return _connection;
                }
                set
                {
                    _connection=value;
                    if (Adapter.InsertCommand is not null)
                    {
                        Adapter.InsertCommand.Connection=value;
                    }
                    if (Adapter.DeleteCommand is not null)
                    {
                        Adapter.DeleteCommand.Connection=value;
                    }
                    if (Adapter.UpdateCommand is not null)
                    {
                        Adapter.UpdateCommand.Connection=value;
                    }
                    int i = 0;
                    while (i<CommandCollection.Length)
                    {
                        if (CommandCollection[i] is not null)
                        {
                            CommandCollection[i].Connection=value;
                        }
                        i=i+1;
                    }
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            internal System.Data.SqlClient.SqlTransaction Transaction
            {
                get
                {
                    return _transaction;
                }
                set
                {
                    _transaction=value;
                    int i = 0;
                    while (i<CommandCollection.Length)
                    {
                        CommandCollection[i].Transaction=_transaction;
                        i=i+1;
                    }
                    if (Adapter is not null&&Adapter.DeleteCommand is not null)
                    {
                        Adapter.DeleteCommand.Transaction=_transaction;
                    }
                    if (Adapter is not null&&Adapter.InsertCommand is not null)
                    {
                        Adapter.InsertCommand.Transaction=_transaction;
                    }
                    if (Adapter is not null&&Adapter.UpdateCommand is not null)
                    {
                        Adapter.UpdateCommand.Transaction=_transaction;
                    }
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            protected System.Data.SqlClient.SqlCommand[] CommandCollection
            {
                get
                {
                    if (_commandCollection is null)
                    {
                        InitCommandCollection();
                    }
                    return _commandCollection;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public bool ClearBeforeFill
            {
                get
                {
                    return _clearBeforeFill;
                }
                set
                {
                    _clearBeforeFill=value;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            private void InitAdapter()
            {
                _adapter=new System.Data.SqlClient.SqlDataAdapter();
                var tableMapping = new System.Data.Common.DataTableMapping();
                tableMapping.SourceTable="Table";
                tableMapping.DataSetTable="spGetAnalysesSummary";
                tableMapping.ColumnMappings.Add("VersionName", "VersionName");
                tableMapping.ColumnMappings.Add("NewMargin", "NewMargin");
                tableMapping.ColumnMappings.Add("CostProjectID", "CostProjectID");
                tableMapping.ColumnMappings.Add("AnalysisDate", "AnalysisDate");
                tableMapping.ColumnMappings.Add("CostProjectID1", "CostProjectID1");
                tableMapping.ColumnMappings.Add("CostProjectName", "CostProjectName");
                tableMapping.ColumnMappings.Add("AnalysisID", "AnalysisID");
                tableMapping.ColumnMappings.Add("TaxPermitID", "TaxPermitID");
                tableMapping.ColumnMappings.Add("TaxPermitDistrict", "TaxPermitDistrict");
                tableMapping.ColumnMappings.Add("ProjectID", "ProjectID");
                tableMapping.ColumnMappings.Add("ProjectMargin", "ProjectMargin");
                tableMapping.ColumnMappings.Add("CopyProjectID", "CopyProjectID");
                tableMapping.ColumnMappings.Add("OptionProjectID", "OptionProjectID");
                tableMapping.ColumnMappings.Add("CostIncreaseAlpha", "CostIncreaseAlpha");
                tableMapping.ColumnMappings.Add("CostIncreasePercent", "CostIncreasePercent");
                tableMapping.ColumnMappings.Add("PlanProjectID", "PlanProjectID");
                tableMapping.ColumnMappings.Add("Notes", "Notes");
                tableMapping.ColumnMappings.Add("ProjectName", "ProjectName");
                tableMapping.ColumnMappings.Add("SoftCosts", "SoftCosts");
                tableMapping.ColumnMappings.Add("Period", "Period");
                tableMapping.ColumnMappings.Add("ProjectPremium", "ProjectPremium");
                tableMapping.ColumnMappings.Add("CreatedBy", "CreatedBy");
                tableMapping.ColumnMappings.Add("DoNotUse", "DoNotUse");
                tableMapping.ColumnMappings.Add("AlphaCode", "AlphaCode");
                _adapter.TableMappings.Add(tableMapping);
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            private void InitConnection()
            {
                _connection=new System.Data.SqlClient.SqlConnection();
                _connection.ConnectionString=My.MySettings.Default.HCHDataQAConnectionString;
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            private void InitCommandCollection()
            {
                _commandCollection=new System.Data.SqlClient.SqlCommand[1];
                _commandCollection[0]=new System.Data.SqlClient.SqlCommand();
                _commandCollection[0].Connection=Connection;
                _commandCollection[0].CommandText="dbo.spGetAnalysesSummary";
                _commandCollection[0].CommandType=CommandType.StoredProcedure;
                _commandCollection[0].Parameters.Add(new System.Data.SqlClient.SqlParameter("@RETURN_VALUE", SqlDbType.Int, 4, ParameterDirection.ReturnValue, 10, 0, null, DataRowVersion.Current, false, null, "", "", ""));
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            [System.ComponentModel.Design.HelpKeyword("vs.data.TableAdapter")]
            [System.ComponentModel.DataObjectMethod(System.ComponentModel.DataObjectMethodType.Fill, true)]
            public virtual int Fill(HCHDataCostAnalysis.spGetAnalysesSummaryDataTable dataTable)
            {
                Adapter.SelectCommand=CommandCollection[0];
                if (ClearBeforeFill==true)
                {
                    dataTable.Clear();
                }
                int returnValue = Adapter.Fill(dataTable);
                return returnValue;
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            [System.ComponentModel.Design.HelpKeyword("vs.data.TableAdapter")]
            [System.ComponentModel.DataObjectMethod(System.ComponentModel.DataObjectMethodType.Select, true)]
            public virtual HCHDataCostAnalysis.spGetAnalysesSummaryDataTable GetData()
            {
                Adapter.SelectCommand=CommandCollection[0];
                var dataTable = new HCHDataCostAnalysis.spGetAnalysesSummaryDataTable();
                Adapter.Fill(dataTable);
                return dataTable;
            }
        }

        /// <summary>
    /// TableAdapterManager is used to coordinate TableAdapters in the dataset to enable Hierarchical Update scenarios
    /// </summary>
        [System.ComponentModel.DesignerCategory("code")]
        [System.ComponentModel.ToolboxItem(true)]
        [System.ComponentModel.Designer("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerDesigner, Microsoft.VSD"+"esigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]

        [System.ComponentModel.Design.HelpKeyword("vs.data.TableAdapterManager")]
        public partial class TableAdapterManager : System.ComponentModel.Component
        {

            private UpdateOrderOption _updateOrder;

            private bool _backupDataSetBeforeUpdate;

            private IDbConnection _connection;

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public UpdateOrderOption UpdateOrder
            {
                get
                {
                    return _updateOrder;
                }
                set
                {
                    _updateOrder=value;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public bool BackupDataSetBeforeUpdate
            {
                get
                {
                    return _backupDataSetBeforeUpdate;
                }
                set
                {
                    _backupDataSetBeforeUpdate=value;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            [System.ComponentModel.Browsable(false)]
            public IDbConnection Connection
            {
                get
                {
                    if (_connection is not null)
                    {
                        return _connection;
                    }
                    return null;
                }
                set
                {
                    _connection=value;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            [System.ComponentModel.Browsable(false)]
            public int TableAdapterInstanceCount
            {
                get
                {
                    int count = 0;
                    return count;
                }
            }

            /// <summary>
        /// Update rows in top-down order.
        /// </summary>
            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            private int UpdateUpdatedRows(HCHDataCostAnalysis dataSet, List<DataRow> allChangedRows, List<DataRow> allAddedRows)
            {
                int result = 0;
                return result;
            }

            /// <summary>
        /// Insert rows in top-down order.
        /// </summary>
            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            private int UpdateInsertedRows(HCHDataCostAnalysis dataSet, List<DataRow> allAddedRows)
            {
                int result = 0;
                return result;
            }

            /// <summary>
        /// Delete rows in bottom-up order.
        /// </summary>
            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            private int UpdateDeletedRows(HCHDataCostAnalysis dataSet, List<DataRow> allChangedRows)
            {
                int result = 0;
                return result;
            }

            /// <summary>
        /// Remove inserted rows that become updated rows after calling TableAdapter.Update(inserted rows) first
        /// </summary>
            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            private DataRow[] GetRealUpdatedRows(DataRow[] updatedRows, List<DataRow> allAddedRows)
            {
                if (updatedRows is null||updatedRows.Length<1)
                {
                    return updatedRows;
                }
                if (allAddedRows is null||allAddedRows.Count<1)
                {
                    return updatedRows;
                }
                var realUpdatedRows = new List<DataRow>();
                int i = 0;
                while (i<updatedRows.Length)
                {
                    var row = updatedRows[i];
                    if (allAddedRows.Contains(row)==false)
                    {
                        realUpdatedRows.Add(row);
                    }
                    i=i+1;
                }
                return realUpdatedRows.ToArray();
            }

            /// <summary>
        /// Update all changes to the dataset.
        /// </summary>
            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public virtual int UpdateAll(HCHDataCostAnalysis dataSet)
            {
                if (dataSet is null)
                {
                    throw new ArgumentNullException("dataSet");
                }
                if (dataSet.HasChanges()==false)
                {
                    return 0;
                }
                var workConnection = Connection;
                if (workConnection is null)
                {
                    throw new ApplicationException("TableAdapterManager contains no connection information. Set each TableAdapterMana"+"ger TableAdapter property to a valid TableAdapter instance.");
                }
                bool workConnOpened = false;
                if ((workConnection.State&ConnectionState.Broken)==ConnectionState.Broken)
                {
                    workConnection.Close();
                }
                if (workConnection.State==ConnectionState.Closed)
                {
                    workConnection.Open();
                    workConnOpened=true;
                }
                var workTransaction = workConnection.BeginTransaction();
                if (workTransaction is null)
                {
                    throw new ApplicationException("The transaction cannot begin. The current data connection does not support transa"+"ctions or the current state is not allowing the transaction to begin.");
                }
                var allChangedRows = new List<DataRow>();
                var allAddedRows = new List<DataRow>();
                var adaptersWithAcceptChangesDuringUpdate = new List<System.Data.Common.DataAdapter>();
                var revertConnections = new Dictionary<object, IDbConnection>();
                int result = 0;
                DataSet backupDataSet = null;
                if (BackupDataSetBeforeUpdate)
                {
                    backupDataSet=new DataSet();
                    backupDataSet.Merge(dataSet);
                }
                try
                {
                    // ---- Prepare for update -----------
                    // 
                    // 
                    // ---- Perform updates -----------
                    // 
                    if (UpdateOrder==UpdateOrderOption.UpdateInsertDelete)
                    {
                        result=result+UpdateUpdatedRows(dataSet, allChangedRows, allAddedRows);
                        result=result+UpdateInsertedRows(dataSet, allAddedRows);
                    }
                    else
                    {
                        result=result+UpdateInsertedRows(dataSet, allAddedRows);
                        result=result+UpdateUpdatedRows(dataSet, allChangedRows, allAddedRows);
                    }
                    result=result+UpdateDeletedRows(dataSet, allChangedRows);
                    // 
                    // ---- Commit updates -----------
                    // 
                    workTransaction.Commit();
                    if (0<allAddedRows.Count)
                    {
                        var rows = new DataRow[allAddedRows.Count];
                        allAddedRows.CopyTo(rows);
                        int i = 0;
                        while (i<rows.Length)
                        {
                            var row = rows[i];
                            row.AcceptChanges();
                            i=i+1;
                        }
                    }
                    if (0<allChangedRows.Count)
                    {
                        var rows = new DataRow[allChangedRows.Count];
                        allChangedRows.CopyTo(rows);
                        int i = 0;
                        while (i<rows.Length)
                        {
                            var row = rows[i];
                            row.AcceptChanges();
                            i=i+1;
                        }
                    }
                }
                catch (Exception ex)
                {
                    workTransaction.Rollback();
                    // ---- Restore the dataset -----------
                    if (BackupDataSetBeforeUpdate)
                    {
                        Debug.Assert(backupDataSet is not null);
                        dataSet.Clear();
                        dataSet.Merge(backupDataSet);
                    }
                    else if (0<allAddedRows.Count)
                    {
                        var rows = new DataRow[allAddedRows.Count];
                        allAddedRows.CopyTo(rows);
                        int i = 0;
                        while (i<rows.Length)
                        {
                            var row = rows[i];
                            row.AcceptChanges();
                            row.SetAdded();
                            i=i+1;
                        }
                    }
                    throw ex;
                }
                finally
                {
                    if (workConnOpened)
                    {
                        workConnection.Close();
                    }
                    if (0<adaptersWithAcceptChangesDuringUpdate.Count)
                    {
                        var adapters = new System.Data.Common.DataAdapter[adaptersWithAcceptChangesDuringUpdate.Count];
                        adaptersWithAcceptChangesDuringUpdate.CopyTo(adapters);
                        int i = 0;
                        while (i<adapters.Length)
                        {
                            var adapter = adapters[i];
                            adapter.AcceptChangesDuringUpdate=true;
                            i=i+1;
                        }
                    }
                }
                return result;
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            protected virtual void SortSelfReferenceRows(DataRow[] rows, DataRelation relation, bool childFirst)
            {
                Array.Sort(rows, new SelfReferenceComparer(relation, childFirst));
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            protected virtual bool MatchTableAdapterConnection(IDbConnection inputConnection)
            {
                if (_connection is not null)
                {
                    return true;
                }
                if (Connection is null||inputConnection is null)
                {
                    return true;
                }
                if (string.Equals(Connection.ConnectionString, inputConnection.ConnectionString, StringComparison.Ordinal))
                {
                    return true;
                }
                return false;
            }

            /// <summary>
        /// Update Order Option
        /// </summary>
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public enum UpdateOrderOption
            {

                InsertUpdateDelete = 0,

                UpdateInsertDelete = 1
            }

            /// <summary>
        /// Used to sort self-referenced table's rows
        /// </summary>
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            private class SelfReferenceComparer : object, IComparer<DataRow>
            {

                private DataRelation _relation;

                private int _childFirst;

                [DebuggerNonUserCode()]
                [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
                internal SelfReferenceComparer(DataRelation relation, bool childFirst) : base()
                {
                    _relation=relation;
                    if (childFirst)
                    {
                        _childFirst=-1;
                    }
                    else
                    {
                        _childFirst=1;
                    }
                }

                [DebuggerNonUserCode()]
                [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
                private DataRow GetRoot(DataRow row, ref int distance)
                {
                    Debug.Assert(row is not null);
                    var root = row;
                    distance=0;

                    IDictionary<DataRow, DataRow> traversedRows = new Dictionary<DataRow, DataRow>();
                    traversedRows[row]=row;

                    var parent = row.GetParentRow(_relation, DataRowVersion.Default);

                    while (parent is not null&&traversedRows.ContainsKey(parent)==false)
                    {
                        distance=distance+1;
                        root=parent;
                        traversedRows[parent]=parent;
                        parent=parent.GetParentRow(_relation, DataRowVersion.Default);

                    }

                    if (distance==0)
                    {
                        traversedRows.Clear();
                        traversedRows[row]=row;
                        parent=row.GetParentRow(_relation, DataRowVersion.Original);

                        while (parent is not null&&traversedRows.ContainsKey(parent)==false)
                        {
                            distance=distance+1;
                            root=parent;
                            traversedRows[parent]=parent;
                            parent=parent.GetParentRow(_relation, DataRowVersion.Original);

                        }
                    }

                    return root;
                }

                [DebuggerNonUserCode()]
                [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
                public int Compare(DataRow row1, DataRow row2)
                {
                    if (ReferenceEquals(row1, row2))
                    {
                        return 0;
                    }
                    if (row1 is null)
                    {
                        return -1;
                    }
                    if (row2 is null)
                    {
                        return 1;
                    }

                    int distance1 = 0;
                    var root1 = GetRoot(row1, ref distance1);

                    int distance2 = 0;
                    var root2 = GetRoot(row2, ref distance2);

                    if (ReferenceEquals(root1, root2))
                    {
                        return _childFirst*distance1.CompareTo(distance2);
                    }
                    else
                    {
                        Debug.Assert(root1.Table is not null&&root2.Table is not null);
                        if (root1.Table.Rows.IndexOf(root1)<root2.Table.Rows.IndexOf(root2))
                        {
                            return -1;
                        }
                        else
                        {
                            return 1;
                        }
                    }
                }
            }
        }
    }
}