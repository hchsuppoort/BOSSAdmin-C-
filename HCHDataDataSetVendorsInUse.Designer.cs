// ------------------------------------------------------------------------------
// <auto-generated>
// This code was generated by a tool.
// Runtime Version:4.0.30319.42000
// 
// Changes to this file may cause incorrect behavior and will be lost if
// the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Data;
using System.Diagnostics;
using System.Runtime.CompilerServices;
using Microsoft.VisualBasic.CompilerServices;

namespace BossAdmin
{



    /// <summary>
/// Represents a strongly typed in-memory cache of data.
/// </summary>
    [Serializable()]
    [System.ComponentModel.DesignerCategory("code")]
    [System.ComponentModel.ToolboxItem(true)]
    [System.Xml.Serialization.XmlSchemaProvider("GetTypedDataSetSchema")]
    [System.Xml.Serialization.XmlRoot("HCHDataDataSetVendorsInUse")]
    [System.ComponentModel.Design.HelpKeyword("vs.data.DataSet")]
    public partial class HCHDataDataSetVendorsInUse : DataSet
    {

        private spGetVendorsInUseDataTable tablespGetVendorsInUse;

        private SchemaSerializationMode _schemaSerializationMode = SchemaSerializationMode.IncludeSchema;

        /// <summary>
        /// 
        /// </summary>
        [DebuggerNonUserCode()]
        [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        
        public HCHDataDataSetVendorsInUse() : base()
        {
            BeginInit();
            InitClass();
            System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = SchemaChanged;
            base.Tables.CollectionChanged+=schemaChangedHandler;
            base.Relations.CollectionChanged+=schemaChangedHandler;
            EndInit();
        }

        /// <summary>
        /// 
        /// </summary>
        /// <param name="info"></param>
        /// <param name="context"></param>
        [DebuggerNonUserCode()]
        [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        
        protected HCHDataDataSetVendorsInUse(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : base(info, context, false)
        {
            if (IsBinarySerialized(info, context)==true)
            {
                InitVars(false);
                System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler1 = SchemaChanged;
                Tables.CollectionChanged+=schemaChangedHandler1;
                Relations.CollectionChanged+=schemaChangedHandler1;
                return;
            }
            string strSchema = Conversions.ToString(info.GetValue("XmlSchema", typeof(string)));
            if (DetermineSchemaSerializationMode(info, context)==SchemaSerializationMode.IncludeSchema)
            {
                var ds = new DataSet();
                ds.ReadXmlSchema(new System.Xml.XmlTextReader(new System.IO.StringReader(strSchema)));
                if (ds.Tables["spGetVendorsInUse"] is not null)
                {
                    base.Tables.Add(new spGetVendorsInUseDataTable(ds.Tables["spGetVendorsInUse"]));
                }
                DataSetName=ds.DataSetName;
                Prefix=ds.Prefix;
                Namespace=ds.Namespace;
                Locale=ds.Locale;
                CaseSensitive=ds.CaseSensitive;
                EnforceConstraints=ds.EnforceConstraints;
                Merge(ds, false, MissingSchemaAction.Add);
                InitVars();
            }
            else
            {
                ReadXmlSchema(new System.Xml.XmlTextReader(new System.IO.StringReader(strSchema)));
            }
            GetSerializationData(info, context);
            System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = SchemaChanged;
            base.Tables.CollectionChanged+=schemaChangedHandler;
            Relations.CollectionChanged+=schemaChangedHandler;
        }

        /// <summary>
        /// 
        /// </summary>
        [DebuggerNonUserCode()]
        [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
        
        public spGetVendorsInUseDataTable spGetVendorsInUse
        {
            get
            {
                return tablespGetVendorsInUse;
            }
        }

        [DebuggerNonUserCode()]
        [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        [System.ComponentModel.Browsable(true)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Visible)]
        public override SchemaSerializationMode SchemaSerializationMode
        {
            get
            {
                return _schemaSerializationMode;
            }
            set
            {
                _schemaSerializationMode=value;
            }
        }

        [DebuggerNonUserCode()]
        [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new DataTableCollection Tables
        {
            get
            {
                return base.Tables;
            }
        }

        [DebuggerNonUserCode()]
        [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new DataRelationCollection Relations
        {
            get
            {
                return base.Relations;
            }
        }

        [DebuggerNonUserCode()]
        [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        protected override void InitializeDerivedDataSet()
        {
            BeginInit();
            InitClass();
            EndInit();
        }

        [DebuggerNonUserCode()]
        [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        public override DataSet Clone()
        {
            HCHDataDataSetVendorsInUse cln = (HCHDataDataSetVendorsInUse)base.Clone();
            cln.InitVars();
            cln.SchemaSerializationMode=SchemaSerializationMode;
            return cln;
        }

        [DebuggerNonUserCode()]
        [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        protected override bool ShouldSerializeTables()
        {
            return false;
        }

        [DebuggerNonUserCode()]
        [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        protected override bool ShouldSerializeRelations()
        {
            return false;
        }

        [DebuggerNonUserCode()]
        [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        protected override void ReadXmlSerializable(System.Xml.XmlReader reader)
        {
            if (DetermineSchemaSerializationMode(reader)==SchemaSerializationMode.IncludeSchema)
            {
                Reset();
                var ds = new DataSet();
                ds.ReadXml(reader);
                if (ds.Tables["spGetVendorsInUse"] is not null)
                {
                    base.Tables.Add(new spGetVendorsInUseDataTable(ds.Tables["spGetVendorsInUse"]));
                }
                DataSetName=ds.DataSetName;
                Prefix=ds.Prefix;
                Namespace=ds.Namespace;
                Locale=ds.Locale;
                CaseSensitive=ds.CaseSensitive;
                EnforceConstraints=ds.EnforceConstraints;
                Merge(ds, false, MissingSchemaAction.Add);
                InitVars();
            }
            else
            {
                ReadXml(reader);
                InitVars();
            }
        }

        [DebuggerNonUserCode()]
        [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        protected override System.Xml.Schema.XmlSchema GetSchemaSerializable()
        {
            var stream = new System.IO.MemoryStream();
            WriteXmlSchema(new System.Xml.XmlTextWriter(stream, null));
            stream.Position=0L;
            return System.Xml.Schema.XmlSchema.Read(new System.Xml.XmlTextReader(stream), null);
        }

        [DebuggerNonUserCode()]
        [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        internal void InitVars()
        {
            InitVars(true);
        }

        [DebuggerNonUserCode()]
        [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        internal void InitVars(bool initTable)
        {
            tablespGetVendorsInUse=(spGetVendorsInUseDataTable)base.Tables["spGetVendorsInUse"];
            if (initTable==true)
            {
                if (tablespGetVendorsInUse is not null)
                {
                    tablespGetVendorsInUse.InitVars();
                }
            }
        }

        [DebuggerNonUserCode()]
        [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        private void InitClass()
        {
            DataSetName="HCHDataDataSetVendorsInUse";
            Prefix="";
            Namespace="http://tempuri.org/HCHDataDataSetVendorsInUse.xsd";
            EnforceConstraints=true;
            SchemaSerializationMode=SchemaSerializationMode.IncludeSchema;
            tablespGetVendorsInUse=new spGetVendorsInUseDataTable();
            base.Tables.Add(tablespGetVendorsInUse);
        }

        [DebuggerNonUserCode()]
        [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        private bool ShouldSerializespGetVendorsInUse()
        {
            return false;
        }

        [DebuggerNonUserCode()]
        [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        private void SchemaChanged(object sender, System.ComponentModel.CollectionChangeEventArgs e)
        {
            if (e.Action==System.ComponentModel.CollectionChangeAction.Remove)
            {
                InitVars();
            }
        }

        [DebuggerNonUserCode()]
        [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        public static System.Xml.Schema.XmlSchemaComplexType GetTypedDataSetSchema(System.Xml.Schema.XmlSchemaSet xs)
        {
            var ds = new HCHDataDataSetVendorsInUse();
            var type = new System.Xml.Schema.XmlSchemaComplexType();
            var sequence = new System.Xml.Schema.XmlSchemaSequence();
            var any = new System.Xml.Schema.XmlSchemaAny();
            any.Namespace=ds.Namespace;
            sequence.Items.Add(any);
            type.Particle=sequence;
            var dsSchema = ds.GetSchemaSerializable();
            if (xs.Contains(dsSchema.TargetNamespace))
            {
                var s1 = new System.IO.MemoryStream();
                var s2 = new System.IO.MemoryStream();
                try
                {
                    System.Xml.Schema.XmlSchema schema = null;
                    dsSchema.Write(s1);
                    var schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator();
                    while (schemas.MoveNext())
                    {
                        schema=(System.Xml.Schema.XmlSchema)schemas.Current;
                        s2.SetLength(0L);
                        schema.Write(s2);
                        if (s1.Length==s2.Length)
                        {
                            s1.Position=0L;
                            s2.Position=0L;

                            while (s1.Position!=s1.Length&&s1.ReadByte()==s2.ReadByte())
                            {


                            }
                            if (s1.Position==s1.Length)
                            {
                                return type;
                            }
                        }

                    }
                }
                finally
                {
                    if (s1 is not null)
                    {
                        s1.Close();
                    }
                    if (s2 is not null)
                    {
                        s2.Close();
                    }
                }
            }
            xs.Add(dsSchema);
            return type;
        }

        [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        public delegate void spGetVendorsInUseRowChangeEventHandler(object sender, spGetVendorsInUseRowChangeEvent e);

        /// <summary>
    /// Represents the strongly named DataTable class.
    /// </summary>
        [Serializable()]
        [System.Xml.Serialization.XmlSchemaProvider("GetTypedTableSchema")]
        public partial class spGetVendorsInUseDataTable : TypedTableBase<spGetVendorsInUseRow>
        {

            private DataColumn columnvendorid;

            private DataColumn columnvdrName;

            private DataColumn columnvdrFax;

            private DataColumn columnDrawsExist;

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public spGetVendorsInUseDataTable() : base()
            {
                TableName="spGetVendorsInUse";
                BeginInit();
                InitClass();
                EndInit();
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            internal spGetVendorsInUseDataTable(DataTable table) : base()
            {
                TableName=table.TableName;
                if (table.CaseSensitive!=table.DataSet.CaseSensitive)
                {
                    CaseSensitive=table.CaseSensitive;
                }
                if ((table.Locale.ToString()??"")!=(table.DataSet.Locale.ToString()??""))
                {
                    Locale=table.Locale;
                }
                if ((table.Namespace??"")!=(table.DataSet.Namespace??""))
                {
                    Namespace=table.Namespace;
                }
                Prefix=table.Prefix;
                MinimumCapacity=table.MinimumCapacity;
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            protected spGetVendorsInUseDataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : base(info, context)
            {
                InitVars();
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public DataColumn vendoridColumn
            {
                get
                {
                    return columnvendorid;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public DataColumn vdrNameColumn
            {
                get
                {
                    return columnvdrName;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public DataColumn vdrFaxColumn
            {
                get
                {
                    return columnvdrFax;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public DataColumn DrawsExistColumn
            {
                get
                {
                    return columnDrawsExist;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            [System.ComponentModel.Browsable(false)]
            public int Count
            {
                get
                {
                    return Rows.Count;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public spGetVendorsInUseRow this[int index]
            {
                get
                {
                    return (spGetVendorsInUseRow)Rows[index];
                }
            }

            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public event spGetVendorsInUseRowChangeEventHandler spGetVendorsInUseRowChanging;

            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public event spGetVendorsInUseRowChangeEventHandler spGetVendorsInUseRowChanged;

            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public event spGetVendorsInUseRowChangeEventHandler spGetVendorsInUseRowDeleting;

            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public event spGetVendorsInUseRowChangeEventHandler spGetVendorsInUseRowDeleted;

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public void AddspGetVendorsInUseRow(spGetVendorsInUseRow row)
            {
                Rows.Add(row);
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public spGetVendorsInUseRow AddspGetVendorsInUseRow(string vdrName, string vdrFax, int DrawsExist)
            {
                spGetVendorsInUseRow rowspGetVendorsInUseRow = (spGetVendorsInUseRow)NewRow();
                object[] columnValuesArray = new object[] { null, vdrName, vdrFax, DrawsExist };
                rowspGetVendorsInUseRow.ItemArray=columnValuesArray;
                Rows.Add(rowspGetVendorsInUseRow);
                return rowspGetVendorsInUseRow;
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public spGetVendorsInUseRow FindByvendorid(int vendorid)
            {
                return (spGetVendorsInUseRow)Rows.Find(new object[] { vendorid });
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public override DataTable Clone()
            {
                spGetVendorsInUseDataTable cln = (spGetVendorsInUseDataTable)base.Clone();
                cln.InitVars();
                return cln;
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            protected override DataTable CreateInstance()
            {
                return new spGetVendorsInUseDataTable();
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            internal void InitVars()
            {
                columnvendorid=Columns["vendorid"];
                columnvdrName=Columns["vdrName"];
                columnvdrFax=Columns["vdrFax"];
                columnDrawsExist=Columns["DrawsExist"];
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            private void InitClass()
            {
                columnvendorid=new DataColumn("vendorid", typeof(int), null, MappingType.Element);
                Columns.Add(columnvendorid);
                columnvdrName=new DataColumn("vdrName", typeof(string), null, MappingType.Element);
                Columns.Add(columnvdrName);
                columnvdrFax=new DataColumn("vdrFax", typeof(string), null, MappingType.Element);
                Columns.Add(columnvdrFax);
                columnDrawsExist=new DataColumn("DrawsExist", typeof(int), null, MappingType.Element);
                Columns.Add(columnDrawsExist);
                Constraints.Add(new UniqueConstraint("Constraint1", new DataColumn[] { columnvendorid }, true));
                columnvendorid.AutoIncrement=true;
                columnvendorid.AllowDBNull=false;
                columnvendorid.ReadOnly=true;
                columnvendorid.Unique=true;
                columnvdrName.MaxLength=50;
                columnvdrFax.MaxLength=15;
                columnDrawsExist.ReadOnly=true;
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public spGetVendorsInUseRow NewspGetVendorsInUseRow()
            {
                return (spGetVendorsInUseRow)NewRow();
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder)
            {
                return new spGetVendorsInUseRow(builder);
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            protected override Type GetRowType()
            {
                return typeof(spGetVendorsInUseRow);
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            protected override void OnRowChanged(DataRowChangeEventArgs e)
            {
                base.OnRowChanged(e);
                if (spGetVendorsInUseRowChanged is not null)
                {
                    spGetVendorsInUseRowChanged?.Invoke(this, new spGetVendorsInUseRowChangeEvent((spGetVendorsInUseRow)e.Row, e.Action));
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            protected override void OnRowChanging(DataRowChangeEventArgs e)
            {
                base.OnRowChanging(e);
                if (spGetVendorsInUseRowChanging is not null)
                {
                    spGetVendorsInUseRowChanging?.Invoke(this, new spGetVendorsInUseRowChangeEvent((spGetVendorsInUseRow)e.Row, e.Action));
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            protected override void OnRowDeleted(DataRowChangeEventArgs e)
            {
                base.OnRowDeleted(e);
                if (spGetVendorsInUseRowDeleted is not null)
                {
                    spGetVendorsInUseRowDeleted?.Invoke(this, new spGetVendorsInUseRowChangeEvent((spGetVendorsInUseRow)e.Row, e.Action));
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            protected override void OnRowDeleting(DataRowChangeEventArgs e)
            {
                base.OnRowDeleting(e);
                if (spGetVendorsInUseRowDeleting is not null)
                {
                    spGetVendorsInUseRowDeleting?.Invoke(this, new spGetVendorsInUseRowChangeEvent((spGetVendorsInUseRow)e.Row, e.Action));
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public void RemovespGetVendorsInUseRow(spGetVendorsInUseRow row)
            {
                Rows.Remove(row);
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs)
            {
                var type = new System.Xml.Schema.XmlSchemaComplexType();
                var sequence = new System.Xml.Schema.XmlSchemaSequence();
                var ds = new HCHDataDataSetVendorsInUse();
                var any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace="http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs=new decimal(0);
                any1.MaxOccurs=decimal.MaxValue;
                any1.ProcessContents=System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                var any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace="urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs=new decimal(1);
                any2.ProcessContents=System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                var attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name="namespace";
                attribute1.FixedValue=ds.Namespace;
                type.Attributes.Add(attribute1);
                var attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name="tableTypeName";
                attribute2.FixedValue="spGetVendorsInUseDataTable";
                type.Attributes.Add(attribute2);
                type.Particle=sequence;
                var dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace))
                {
                    var s1 = new System.IO.MemoryStream();
                    var s2 = new System.IO.MemoryStream();
                    try
                    {
                        System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        var schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator();
                        while (schemas.MoveNext())
                        {
                            schema=(System.Xml.Schema.XmlSchema)schemas.Current;
                            s2.SetLength(0L);
                            schema.Write(s2);
                            if (s1.Length==s2.Length)
                            {
                                s1.Position=0L;
                                s2.Position=0L;

                                while (s1.Position!=s1.Length&&s1.ReadByte()==s2.ReadByte())
                                {


                                }
                                if (s1.Position==s1.Length)
                                {
                                    return type;
                                }
                            }

                        }
                    }
                    finally
                    {
                        if (s1 is not null)
                        {
                            s1.Close();
                        }
                        if (s2 is not null)
                        {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }

        /// <summary>
    /// Represents strongly named DataRow class.
    /// </summary>
        public partial class spGetVendorsInUseRow : DataRow
        {

            private spGetVendorsInUseDataTable tablespGetVendorsInUse;

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            internal spGetVendorsInUseRow(DataRowBuilder rb) : base(rb)
            {
                tablespGetVendorsInUse=(spGetVendorsInUseDataTable)Table;
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public int vendorid
            {
                get
                {
                    return (int)(this[tablespGetVendorsInUse.vendoridColumn]);
                }
                set
                {
                    this[tablespGetVendorsInUse.vendoridColumn]=value;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public string vdrName
            {
                get
                {
                    try
                    {
                        return Conversions.ToString(this[tablespGetVendorsInUse.vdrNameColumn]);
                    }
                    catch (InvalidCastException e)
                    {
                        throw new StrongTypingException("The value for column 'vdrName' in table 'spGetVendorsInUse' is DBNull.", e);
                    }
                }
                set
                {
                    this[tablespGetVendorsInUse.vdrNameColumn]=value;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public string vdrFax
            {
                get
                {
                    try
                    {
                        return Conversions.ToString(this[tablespGetVendorsInUse.vdrFaxColumn]);
                    }
                    catch (InvalidCastException e)
                    {
                        throw new StrongTypingException("The value for column 'vdrFax' in table 'spGetVendorsInUse' is DBNull.", e);
                    }
                }
                set
                {
                    this[tablespGetVendorsInUse.vdrFaxColumn]=value;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public int DrawsExist
            {
                get
                {
                    try
                    {
                        return (int)(this[tablespGetVendorsInUse.DrawsExistColumn]);
                    }
                    catch (InvalidCastException e)
                    {
                        throw new StrongTypingException("The value for column 'DrawsExist' in table 'spGetVendorsInUse' is DBNull.", e);
                    }
                }
                set
                {
                    this[tablespGetVendorsInUse.DrawsExistColumn]=value;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public bool IsvdrNameNull()
            {
                return IsNull(tablespGetVendorsInUse.vdrNameColumn);
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public void SetvdrNameNull()
            {
                this[tablespGetVendorsInUse.vdrNameColumn]=Convert.DBNull;
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public bool IsvdrFaxNull()
            {
                return IsNull(tablespGetVendorsInUse.vdrFaxColumn);
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public void SetvdrFaxNull()
            {
                this[tablespGetVendorsInUse.vdrFaxColumn]=Convert.DBNull;
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public bool IsDrawsExistNull()
            {
                return IsNull(tablespGetVendorsInUse.DrawsExistColumn);
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public void SetDrawsExistNull()
            {
                this[tablespGetVendorsInUse.DrawsExistColumn]=Convert.DBNull;
            }
        }

        /// <summary>
    /// Row event argument class
    /// </summary>
        [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        public class spGetVendorsInUseRowChangeEvent : EventArgs
        {

            private spGetVendorsInUseRow eventRow;

            private DataRowAction eventAction;

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public spGetVendorsInUseRowChangeEvent(spGetVendorsInUseRow row, DataRowAction action) : base()
            {
                eventRow=row;
                eventAction=action;
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public spGetVendorsInUseRow Row
            {
                get
                {
                    return eventRow;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public DataRowAction Action
            {
                get
                {
                    return eventAction;
                }
            }
        }
    }

    namespace HCHDataDataSetVendorsInUseTableAdapters
    {

        /// <summary>
    /// Represents the connection and commands used to retrieve and save data.
    /// </summary>
        [System.ComponentModel.DesignerCategory("code")]
        [System.ComponentModel.ToolboxItem(true)]
        [System.ComponentModel.DataObject(true)]
        [System.ComponentModel.Designer("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"+", Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]

        [System.ComponentModel.Design.HelpKeyword("vs.data.TableAdapter")]
        public partial class spGetVendorsInUseTableAdapter : System.ComponentModel.Component
        {

            private System.Data.SqlClient.SqlDataAdapter __adapter;

            private System.Data.SqlClient.SqlDataAdapter _adapter
            {
                [MethodImpl(MethodImplOptions.Synchronized)]
                get
                {
                    return __adapter;
                }

                [MethodImpl(MethodImplOptions.Synchronized)]
                set
                {
                    __adapter=value;
                }
            }

            private System.Data.SqlClient.SqlConnection _connection;

            private System.Data.SqlClient.SqlTransaction _transaction;

            private System.Data.SqlClient.SqlCommand[] _commandCollection;

            private bool _clearBeforeFill;

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public spGetVendorsInUseTableAdapter() : base()
            {
                ClearBeforeFill=true;
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            protected internal System.Data.SqlClient.SqlDataAdapter Adapter
            {
                get
                {
                    if (_adapter is null)
                    {
                        InitAdapter();
                    }
                    return _adapter;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            internal System.Data.SqlClient.SqlConnection Connection
            {
                get
                {
                    if (_connection is null)
                    {
                        InitConnection();
                    }
                    return _connection;
                }
                set
                {
                    _connection=value;
                    if (Adapter.InsertCommand is not null)
                    {
                        Adapter.InsertCommand.Connection=value;
                    }
                    if (Adapter.DeleteCommand is not null)
                    {
                        Adapter.DeleteCommand.Connection=value;
                    }
                    if (Adapter.UpdateCommand is not null)
                    {
                        Adapter.UpdateCommand.Connection=value;
                    }
                    int i = 0;
                    while (i<CommandCollection.Length)
                    {
                        if (CommandCollection[i] is not null)
                        {
                            CommandCollection[i].Connection=value;
                        }
                        i=i+1;
                    }
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            internal System.Data.SqlClient.SqlTransaction Transaction
            {
                get
                {
                    return _transaction;
                }
                set
                {
                    _transaction=value;
                    int i = 0;
                    while (i<CommandCollection.Length)
                    {
                        CommandCollection[i].Transaction=_transaction;
                        i=i+1;
                    }
                    if (Adapter is not null&&Adapter.DeleteCommand is not null)
                    {
                        Adapter.DeleteCommand.Transaction=_transaction;
                    }
                    if (Adapter is not null&&Adapter.InsertCommand is not null)
                    {
                        Adapter.InsertCommand.Transaction=_transaction;
                    }
                    if (Adapter is not null&&Adapter.UpdateCommand is not null)
                    {
                        Adapter.UpdateCommand.Transaction=_transaction;
                    }
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            protected System.Data.SqlClient.SqlCommand[] CommandCollection
            {
                get
                {
                    if (_commandCollection is null)
                    {
                        InitCommandCollection();
                    }
                    return _commandCollection;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public bool ClearBeforeFill
            {
                get
                {
                    return _clearBeforeFill;
                }
                set
                {
                    _clearBeforeFill=value;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            private void InitAdapter()
            {
                _adapter=new System.Data.SqlClient.SqlDataAdapter();
                var tableMapping = new System.Data.Common.DataTableMapping();
                tableMapping.SourceTable="Table";
                tableMapping.DataSetTable="spGetVendorsInUse";
                tableMapping.ColumnMappings.Add("vendorid", "vendorid");
                tableMapping.ColumnMappings.Add("vdrName", "vdrName");
                tableMapping.ColumnMappings.Add("vdrFax", "vdrFax");
                tableMapping.ColumnMappings.Add("DrawsExist", "DrawsExist");
                _adapter.TableMappings.Add(tableMapping);
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            private void InitConnection()
            {
                _connection=new System.Data.SqlClient.SqlConnection();
                _connection.ConnectionString=My.MySettings.Default.HCHDataConnectionString;
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            private void InitCommandCollection()
            {
                _commandCollection=new System.Data.SqlClient.SqlCommand[1];
                _commandCollection[0]=new System.Data.SqlClient.SqlCommand();
                _commandCollection[0].Connection=Connection;
                _commandCollection[0].CommandText="dbo.spGetVendorsInUse";
                _commandCollection[0].CommandType=CommandType.StoredProcedure;
                _commandCollection[0].Parameters.Add(new System.Data.SqlClient.SqlParameter("@RETURN_VALUE", SqlDbType.Int, 4, ParameterDirection.ReturnValue, 10, 0, null, DataRowVersion.Current, false, null, "", "", ""));
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            [System.ComponentModel.Design.HelpKeyword("vs.data.TableAdapter")]
            [System.ComponentModel.DataObjectMethod(System.ComponentModel.DataObjectMethodType.Fill, true)]
            public virtual int Fill(HCHDataDataSetVendorsInUse.spGetVendorsInUseDataTable dataTable)
            {
                Adapter.SelectCommand=CommandCollection[0];
                if (ClearBeforeFill==true)
                {
                    dataTable.Clear();
                }
                int returnValue = Adapter.Fill(dataTable);
                return returnValue;
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            [System.ComponentModel.Design.HelpKeyword("vs.data.TableAdapter")]
            [System.ComponentModel.DataObjectMethod(System.ComponentModel.DataObjectMethodType.Select, true)]
            public virtual HCHDataDataSetVendorsInUse.spGetVendorsInUseDataTable GetData()
            {
                Adapter.SelectCommand=CommandCollection[0];
                var dataTable = new HCHDataDataSetVendorsInUse.spGetVendorsInUseDataTable();
                Adapter.Fill(dataTable);
                return dataTable;
            }
        }

        /// <summary>
    /// TableAdapterManager is used to coordinate TableAdapters in the dataset to enable Hierarchical Update scenarios
    /// </summary>
        [System.ComponentModel.DesignerCategory("code")]
        [System.ComponentModel.ToolboxItem(true)]
        [System.ComponentModel.Designer("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerDesigner, Microsoft.VSD"+"esigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]

        [System.ComponentModel.Design.HelpKeyword("vs.data.TableAdapterManager")]
        public partial class TableAdapterManager : System.ComponentModel.Component
        {

            private UpdateOrderOption _updateOrder;

            private bool _backupDataSetBeforeUpdate;

            private IDbConnection _connection;

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public UpdateOrderOption UpdateOrder
            {
                get
                {
                    return _updateOrder;
                }
                set
                {
                    _updateOrder=value;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public bool BackupDataSetBeforeUpdate
            {
                get
                {
                    return _backupDataSetBeforeUpdate;
                }
                set
                {
                    _backupDataSetBeforeUpdate=value;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            [System.ComponentModel.Browsable(false)]
            public IDbConnection Connection
            {
                get
                {
                    if (_connection is not null)
                    {
                        return _connection;
                    }
                    return null;
                }
                set
                {
                    _connection=value;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            [System.ComponentModel.Browsable(false)]
            public int TableAdapterInstanceCount
            {
                get
                {
                    int count = 0;
                    return count;
                }
            }

            /// <summary>
        /// Update rows in top-down order.
        /// </summary>
            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            private int UpdateUpdatedRows(HCHDataDataSetVendorsInUse dataSet, List<DataRow> allChangedRows, List<DataRow> allAddedRows)
            {
                int result = 0;
                return result;
            }

            /// <summary>
        /// Insert rows in top-down order.
        /// </summary>
            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            private int UpdateInsertedRows(HCHDataDataSetVendorsInUse dataSet, List<DataRow> allAddedRows)
            {
                int result = 0;
                return result;
            }

            /// <summary>
        /// Delete rows in bottom-up order.
        /// </summary>
            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            private int UpdateDeletedRows(HCHDataDataSetVendorsInUse dataSet, List<DataRow> allChangedRows)
            {
                int result = 0;
                return result;
            }

            /// <summary>
        /// Remove inserted rows that become updated rows after calling TableAdapter.Update(inserted rows) first
        /// </summary>
            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            private DataRow[] GetRealUpdatedRows(DataRow[] updatedRows, List<DataRow> allAddedRows)
            {
                if (updatedRows is null||updatedRows.Length<1)
                {
                    return updatedRows;
                }
                if (allAddedRows is null||allAddedRows.Count<1)
                {
                    return updatedRows;
                }
                var realUpdatedRows = new List<DataRow>();
                int i = 0;
                while (i<updatedRows.Length)
                {
                    var row = updatedRows[i];
                    if (allAddedRows.Contains(row)==false)
                    {
                        realUpdatedRows.Add(row);
                    }
                    i=i+1;
                }
                return realUpdatedRows.ToArray();
            }

            /// <summary>
        /// Update all changes to the dataset.
        /// </summary>
            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public virtual int UpdateAll(HCHDataDataSetVendorsInUse dataSet)
            {
                if (dataSet is null)
                {
                    throw new ArgumentNullException("dataSet");
                }
                if (dataSet.HasChanges()==false)
                {
                    return 0;
                }
                var workConnection = Connection;
                if (workConnection is null)
                {
                    throw new ApplicationException("TableAdapterManager contains no connection information. Set each TableAdapterMana"+"ger TableAdapter property to a valid TableAdapter instance.");
                }
                bool workConnOpened = false;
                if ((workConnection.State&ConnectionState.Broken)==ConnectionState.Broken)
                {
                    workConnection.Close();
                }
                if (workConnection.State==ConnectionState.Closed)
                {
                    workConnection.Open();
                    workConnOpened=true;
                }
                var workTransaction = workConnection.BeginTransaction();
                if (workTransaction is null)
                {
                    throw new ApplicationException("The transaction cannot begin. The current data connection does not support transa"+"ctions or the current state is not allowing the transaction to begin.");
                }
                var allChangedRows = new List<DataRow>();
                var allAddedRows = new List<DataRow>();
                var adaptersWithAcceptChangesDuringUpdate = new List<System.Data.Common.DataAdapter>();
                var revertConnections = new Dictionary<object, IDbConnection>();
                int result = 0;
                DataSet backupDataSet = null;
                if (BackupDataSetBeforeUpdate)
                {
                    backupDataSet=new DataSet();
                    backupDataSet.Merge(dataSet);
                }
                try
                {
                    // ---- Prepare for update -----------
                    // 
                    // 
                    // ---- Perform updates -----------
                    // 
                    if (UpdateOrder==UpdateOrderOption.UpdateInsertDelete)
                    {
                        result=result+UpdateUpdatedRows(dataSet, allChangedRows, allAddedRows);
                        result=result+UpdateInsertedRows(dataSet, allAddedRows);
                    }
                    else
                    {
                        result=result+UpdateInsertedRows(dataSet, allAddedRows);
                        result=result+UpdateUpdatedRows(dataSet, allChangedRows, allAddedRows);
                    }
                    result=result+UpdateDeletedRows(dataSet, allChangedRows);
                    // 
                    // ---- Commit updates -----------
                    // 
                    workTransaction.Commit();
                    if (0<allAddedRows.Count)
                    {
                        var rows = new DataRow[allAddedRows.Count];
                        allAddedRows.CopyTo(rows);
                        int i = 0;
                        while (i<rows.Length)
                        {
                            var row = rows[i];
                            row.AcceptChanges();
                            i=i+1;
                        }
                    }
                    if (0<allChangedRows.Count)
                    {
                        var rows = new DataRow[allChangedRows.Count];
                        allChangedRows.CopyTo(rows);
                        int i = 0;
                        while (i<rows.Length)
                        {
                            var row = rows[i];
                            row.AcceptChanges();
                            i=i+1;
                        }
                    }
                }
                catch (Exception ex)
                {
                    workTransaction.Rollback();
                    // ---- Restore the dataset -----------
                    if (BackupDataSetBeforeUpdate)
                    {
                        Debug.Assert(backupDataSet is not null);
                        dataSet.Clear();
                        dataSet.Merge(backupDataSet);
                    }
                    else if (0<allAddedRows.Count)
                    {
                        var rows = new DataRow[allAddedRows.Count];
                        allAddedRows.CopyTo(rows);
                        int i = 0;
                        while (i<rows.Length)
                        {
                            var row = rows[i];
                            row.AcceptChanges();
                            row.SetAdded();
                            i=i+1;
                        }
                    }
                    throw ex;
                }
                finally
                {
                    if (workConnOpened)
                    {
                        workConnection.Close();
                    }
                    if (0<adaptersWithAcceptChangesDuringUpdate.Count)
                    {
                        var adapters = new System.Data.Common.DataAdapter[adaptersWithAcceptChangesDuringUpdate.Count];
                        adaptersWithAcceptChangesDuringUpdate.CopyTo(adapters);
                        int i = 0;
                        while (i<adapters.Length)
                        {
                            var adapter = adapters[i];
                            adapter.AcceptChangesDuringUpdate=true;
                            i=i+1;
                        }
                    }
                }
                return result;
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            protected virtual void SortSelfReferenceRows(DataRow[] rows, DataRelation relation, bool childFirst)
            {
                Array.Sort(rows, new SelfReferenceComparer(relation, childFirst));
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            protected virtual bool MatchTableAdapterConnection(IDbConnection inputConnection)
            {
                if (_connection is not null)
                {
                    return true;
                }
                if (Connection is null||inputConnection is null)
                {
                    return true;
                }
                if (string.Equals(Connection.ConnectionString, inputConnection.ConnectionString, StringComparison.Ordinal))
                {
                    return true;
                }
                return false;
            }

            /// <summary>
        /// Update Order Option
        /// </summary>
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public enum UpdateOrderOption
            {

                InsertUpdateDelete = 0,

                UpdateInsertDelete = 1
            }

            /// <summary>
        /// Used to sort self-referenced table's rows
        /// </summary>
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            private class SelfReferenceComparer : object, IComparer<DataRow>
            {

                private DataRelation _relation;

                private int _childFirst;

                [DebuggerNonUserCode()]
                [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
                internal SelfReferenceComparer(DataRelation relation, bool childFirst) : base()
                {
                    _relation=relation;
                    if (childFirst)
                    {
                        _childFirst=-1;
                    }
                    else
                    {
                        _childFirst=1;
                    }
                }

                [DebuggerNonUserCode()]
                [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
                private DataRow GetRoot(DataRow row, ref int distance)
                {
                    Debug.Assert(row is not null);
                    var root = row;
                    distance=0;

                    IDictionary<DataRow, DataRow> traversedRows = new Dictionary<DataRow, DataRow>();
                    traversedRows[row]=row;

                    var parent = row.GetParentRow(_relation, DataRowVersion.Default);

                    while (parent is not null&&traversedRows.ContainsKey(parent)==false)
                    {
                        distance=distance+1;
                        root=parent;
                        traversedRows[parent]=parent;
                        parent=parent.GetParentRow(_relation, DataRowVersion.Default);

                    }

                    if (distance==0)
                    {
                        traversedRows.Clear();
                        traversedRows[row]=row;
                        parent=row.GetParentRow(_relation, DataRowVersion.Original);

                        while (parent is not null&&traversedRows.ContainsKey(parent)==false)
                        {
                            distance=distance+1;
                            root=parent;
                            traversedRows[parent]=parent;
                            parent=parent.GetParentRow(_relation, DataRowVersion.Original);

                        }
                    }

                    return root;
                }

                [DebuggerNonUserCode()]
                [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
                public int Compare(DataRow row1, DataRow row2)
                {
                    if (ReferenceEquals(row1, row2))
                    {
                        return 0;
                    }
                    if (row1 is null)
                    {
                        return -1;
                    }
                    if (row2 is null)
                    {
                        return 1;
                    }

                    int distance1 = 0;
                    var root1 = GetRoot(row1, ref distance1);

                    int distance2 = 0;
                    var root2 = GetRoot(row2, ref distance2);

                    if (ReferenceEquals(root1, root2))
                    {
                        return _childFirst*distance1.CompareTo(distance2);
                    }
                    else
                    {
                        Debug.Assert(root1.Table is not null&&root2.Table is not null);
                        if (root1.Table.Rows.IndexOf(root1)<root2.Table.Rows.IndexOf(root2))
                        {
                            return -1;
                        }
                        else
                        {
                            return 1;
                        }
                    }
                }
            }
        }
    }
}