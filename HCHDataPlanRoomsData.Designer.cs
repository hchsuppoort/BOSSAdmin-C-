// ------------------------------------------------------------------------------
// <auto-generated>
// This code was generated by a tool.
// Runtime Version:4.0.30319.42000
// 
// Changes to this file may cause incorrect behavior and will be lost if
// the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Data;
using System.Diagnostics;
using System.Runtime.CompilerServices;
using Microsoft.VisualBasic.CompilerServices;

namespace BossAdmin
{



    /// <summary>
/// Represents a strongly typed in-memory cache of data.
/// </summary>
    [Serializable()]
    [System.ComponentModel.DesignerCategory("code")]
    [System.ComponentModel.ToolboxItem(true)]
    [System.Xml.Serialization.XmlSchemaProvider("GetTypedDataSetSchema")]
    [System.Xml.Serialization.XmlRoot("HCHDataPlanRoomsData")]
    [System.ComponentModel.Design.HelpKeyword("vs.data.DataSet")]
    public partial class HCHDataPlanRoomsData : DataSet
    {

        private spPlanRoomsGetDataTable tablespPlanRoomsGet;

        private SchemaSerializationMode _schemaSerializationMode = SchemaSerializationMode.IncludeSchema;

        [DebuggerNonUserCode()]
        [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        public HCHDataPlanRoomsData() : base()
        {
            BeginInit();
            InitClass();
            System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = SchemaChanged;
            base.Tables.CollectionChanged+=schemaChangedHandler;
            base.Relations.CollectionChanged+=schemaChangedHandler;
            EndInit();
            Initialized+=HCHDataPlanRoomsData_Initialized;
        }

        [DebuggerNonUserCode()]
        [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        protected HCHDataPlanRoomsData(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : base(info, context, false)
        {
            if (IsBinarySerialized(info, context)==true)
            {
                InitVars(false);
                System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler1 = SchemaChanged;
                Tables.CollectionChanged+=schemaChangedHandler1;
                Relations.CollectionChanged+=schemaChangedHandler1;
                return;
            }
            string strSchema = Conversions.ToString(info.GetValue("XmlSchema", typeof(string)));
            if (DetermineSchemaSerializationMode(info, context)==SchemaSerializationMode.IncludeSchema)
            {
                var ds = new DataSet();
                ds.ReadXmlSchema(new System.Xml.XmlTextReader(new System.IO.StringReader(strSchema)));
                if (ds.Tables["spPlanRoomsGet"] is not null)
                {
                    base.Tables.Add(new spPlanRoomsGetDataTable(ds.Tables["spPlanRoomsGet"]));
                }
                DataSetName=ds.DataSetName;
                Prefix=ds.Prefix;
                Namespace=ds.Namespace;
                Locale=ds.Locale;
                CaseSensitive=ds.CaseSensitive;
                EnforceConstraints=ds.EnforceConstraints;
                Merge(ds, false, MissingSchemaAction.Add);
                InitVars();
            }
            else
            {
                ReadXmlSchema(new System.Xml.XmlTextReader(new System.IO.StringReader(strSchema)));
            }
            GetSerializationData(info, context);
            System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = SchemaChanged;
            base.Tables.CollectionChanged+=schemaChangedHandler;
            Relations.CollectionChanged+=schemaChangedHandler;
            Initialized+=HCHDataPlanRoomsData_Initialized;
        }

        [DebuggerNonUserCode()]
        [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public spPlanRoomsGetDataTable spPlanRoomsGet
        {
            get
            {
                return tablespPlanRoomsGet;
            }
        }

        [DebuggerNonUserCode()]
        [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        [System.ComponentModel.Browsable(true)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Visible)]
        public override SchemaSerializationMode SchemaSerializationMode
        {
            get
            {
                return _schemaSerializationMode;
            }
            set
            {
                _schemaSerializationMode=value;
            }
        }

        [DebuggerNonUserCode()]
        [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new DataTableCollection Tables
        {
            get
            {
                return base.Tables;
            }
        }

        [DebuggerNonUserCode()]
        [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new DataRelationCollection Relations
        {
            get
            {
                return base.Relations;
            }
        }

        [DebuggerNonUserCode()]
        [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        protected override void InitializeDerivedDataSet()
        {
            BeginInit();
            InitClass();
            EndInit();
        }

        [DebuggerNonUserCode()]
        [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        public override DataSet Clone()
        {
            HCHDataPlanRoomsData cln = (HCHDataPlanRoomsData)base.Clone();
            cln.InitVars();
            cln.SchemaSerializationMode=SchemaSerializationMode;
            return cln;
        }

        [DebuggerNonUserCode()]
        [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        protected override bool ShouldSerializeTables()
        {
            return false;
        }

        [DebuggerNonUserCode()]
        [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        protected override bool ShouldSerializeRelations()
        {
            return false;
        }

        [DebuggerNonUserCode()]
        [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        protected override void ReadXmlSerializable(System.Xml.XmlReader reader)
        {
            if (DetermineSchemaSerializationMode(reader)==SchemaSerializationMode.IncludeSchema)
            {
                Reset();
                var ds = new DataSet();
                ds.ReadXml(reader);
                if (ds.Tables["spPlanRoomsGet"] is not null)
                {
                    base.Tables.Add(new spPlanRoomsGetDataTable(ds.Tables["spPlanRoomsGet"]));
                }
                DataSetName=ds.DataSetName;
                Prefix=ds.Prefix;
                Namespace=ds.Namespace;
                Locale=ds.Locale;
                CaseSensitive=ds.CaseSensitive;
                EnforceConstraints=ds.EnforceConstraints;
                Merge(ds, false, MissingSchemaAction.Add);
                InitVars();
            }
            else
            {
                ReadXml(reader);
                InitVars();
            }
        }

        [DebuggerNonUserCode()]
        [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        protected override System.Xml.Schema.XmlSchema GetSchemaSerializable()
        {
            var stream = new System.IO.MemoryStream();
            WriteXmlSchema(new System.Xml.XmlTextWriter(stream, null));
            stream.Position=0L;
            return System.Xml.Schema.XmlSchema.Read(new System.Xml.XmlTextReader(stream), null);
        }

        [DebuggerNonUserCode()]
        [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        internal void InitVars()
        {
            InitVars(true);
        }

        [DebuggerNonUserCode()]
        [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        internal void InitVars(bool initTable)
        {
            tablespPlanRoomsGet=(spPlanRoomsGetDataTable)base.Tables["spPlanRoomsGet"];
            if (initTable==true)
            {
                if (tablespPlanRoomsGet is not null)
                {
                    tablespPlanRoomsGet.InitVars();
                }
            }
        }

        [DebuggerNonUserCode()]
        [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        private void InitClass()
        {
            DataSetName="HCHDataPlanRoomsData";
            Prefix="";
            Namespace="http://tempuri.org/HCHDataPlanRoomsData.xsd";
            EnforceConstraints=true;
            SchemaSerializationMode=SchemaSerializationMode.IncludeSchema;
            tablespPlanRoomsGet=new spPlanRoomsGetDataTable();
            base.Tables.Add(tablespPlanRoomsGet);
        }

        [DebuggerNonUserCode()]
        [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        private bool ShouldSerializespPlanRoomsGet()
        {
            return false;
        }

        [DebuggerNonUserCode()]
        [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        private void SchemaChanged(object sender, System.ComponentModel.CollectionChangeEventArgs e)
        {
            if (e.Action==System.ComponentModel.CollectionChangeAction.Remove)
            {
                InitVars();
            }
        }

        [DebuggerNonUserCode()]
        [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        public static System.Xml.Schema.XmlSchemaComplexType GetTypedDataSetSchema(System.Xml.Schema.XmlSchemaSet xs)
        {
            var ds = new HCHDataPlanRoomsData();
            var type = new System.Xml.Schema.XmlSchemaComplexType();
            var sequence = new System.Xml.Schema.XmlSchemaSequence();
            var any = new System.Xml.Schema.XmlSchemaAny();
            any.Namespace=ds.Namespace;
            sequence.Items.Add(any);
            type.Particle=sequence;
            var dsSchema = ds.GetSchemaSerializable();
            if (xs.Contains(dsSchema.TargetNamespace))
            {
                var s1 = new System.IO.MemoryStream();
                var s2 = new System.IO.MemoryStream();
                try
                {
                    System.Xml.Schema.XmlSchema schema = null;
                    dsSchema.Write(s1);
                    var schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator();
                    while (schemas.MoveNext())
                    {
                        schema=(System.Xml.Schema.XmlSchema)schemas.Current;
                        s2.SetLength(0L);
                        schema.Write(s2);
                        if (s1.Length==s2.Length)
                        {
                            s1.Position=0L;
                            s2.Position=0L;

                            while (s1.Position!=s1.Length&&s1.ReadByte()==s2.ReadByte())
                            {


                            }
                            if (s1.Position==s1.Length)
                            {
                                return type;
                            }
                        }

                    }
                }
                finally
                {
                    if (s1 is not null)
                    {
                        s1.Close();
                    }
                    if (s2 is not null)
                    {
                        s2.Close();
                    }
                }
            }
            xs.Add(dsSchema);
            return type;
        }

        [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        public delegate void spPlanRoomsGetRowChangeEventHandler(object sender, spPlanRoomsGetRowChangeEvent e);

        /// <summary>
    /// Represents the strongly named DataTable class.
    /// </summary>
        [Serializable()]
        [System.Xml.Serialization.XmlSchemaProvider("GetTypedTableSchema")]
        public partial class spPlanRoomsGetDataTable : TypedTableBase<spPlanRoomsGetRow>
        {

            private DataColumn columnPlanRoomID;

            private DataColumn columnPlanID;

            private DataColumn columnRoom;

            private DataColumn columnCreatedDate;

            private DataColumn columnCreatedBy;

            private DataColumn columnUpdatedDate;

            private DataColumn columnUpdatedby;

            private DataColumn columnOptional;

            private DataColumn columnSqFt;

            private DataColumn columnFlooringDefault;

            private DataColumn columnOtherRoom;

            private DataColumn columnlftrim;

            private DataColumn columnlfcrown;

            private DataColumn columnTrimResource;

            private DataColumn columnOtherResource;

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public spPlanRoomsGetDataTable() : base()
            {
                TableName="spPlanRoomsGet";
                BeginInit();
                InitClass();
                EndInit();
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            internal spPlanRoomsGetDataTable(DataTable table) : base()
            {
                TableName=table.TableName;
                if (table.CaseSensitive!=table.DataSet.CaseSensitive)
                {
                    CaseSensitive=table.CaseSensitive;
                }
                if ((table.Locale.ToString()??"")!=(table.DataSet.Locale.ToString()??""))
                {
                    Locale=table.Locale;
                }
                if ((table.Namespace??"")!=(table.DataSet.Namespace??""))
                {
                    Namespace=table.Namespace;
                }
                Prefix=table.Prefix;
                MinimumCapacity=table.MinimumCapacity;
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            protected spPlanRoomsGetDataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : base(info, context)
            {
                InitVars();
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public DataColumn PlanRoomIDColumn
            {
                get
                {
                    return columnPlanRoomID;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public DataColumn PlanIDColumn
            {
                get
                {
                    return columnPlanID;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public DataColumn RoomColumn
            {
                get
                {
                    return columnRoom;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public DataColumn CreatedDateColumn
            {
                get
                {
                    return columnCreatedDate;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public DataColumn CreatedByColumn
            {
                get
                {
                    return columnCreatedBy;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public DataColumn UpdatedDateColumn
            {
                get
                {
                    return columnUpdatedDate;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public DataColumn UpdatedbyColumn
            {
                get
                {
                    return columnUpdatedby;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public DataColumn OptionalColumn
            {
                get
                {
                    return columnOptional;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public DataColumn SqFtColumn
            {
                get
                {
                    return columnSqFt;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public DataColumn FlooringDefaultColumn
            {
                get
                {
                    return columnFlooringDefault;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public DataColumn OtherRoomColumn
            {
                get
                {
                    return columnOtherRoom;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public DataColumn lftrimColumn
            {
                get
                {
                    return columnlftrim;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public DataColumn lfcrownColumn
            {
                get
                {
                    return columnlfcrown;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public DataColumn TrimResourceColumn
            {
                get
                {
                    return columnTrimResource;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public DataColumn OtherResourceColumn
            {
                get
                {
                    return columnOtherResource;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            [System.ComponentModel.Browsable(false)]
            public int Count
            {
                get
                {
                    return Rows.Count;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public spPlanRoomsGetRow this[int index]
            {
                get
                {
                    return (spPlanRoomsGetRow)Rows[index];
                }
            }

            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public event spPlanRoomsGetRowChangeEventHandler spPlanRoomsGetRowChanging;

            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public event spPlanRoomsGetRowChangeEventHandler spPlanRoomsGetRowChanged;

            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public event spPlanRoomsGetRowChangeEventHandler spPlanRoomsGetRowDeleting;

            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public event spPlanRoomsGetRowChangeEventHandler spPlanRoomsGetRowDeleted;

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public void AddspPlanRoomsGetRow(spPlanRoomsGetRow row)
            {
                Rows.Add(row);
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public spPlanRoomsGetRow AddspPlanRoomsGetRow(string PlanID, string Room, DateTime CreatedDate, string CreatedBy, DateTime UpdatedDate, string Updatedby, bool _Optional, int SqFt, string FlooringDefault, string OtherRoom, int lftrim, int lfcrown, string TrimResource, string OtherResource)
            {
                spPlanRoomsGetRow rowspPlanRoomsGetRow = (spPlanRoomsGetRow)NewRow();
                object[] columnValuesArray = new object[] { null, PlanID, Room, CreatedDate, CreatedBy, UpdatedDate, Updatedby, _Optional, SqFt, FlooringDefault, OtherRoom, lftrim, lfcrown, TrimResource, OtherResource };
                rowspPlanRoomsGetRow.ItemArray=columnValuesArray;
                Rows.Add(rowspPlanRoomsGetRow);
                return rowspPlanRoomsGetRow;
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public spPlanRoomsGetRow FindByPlanRoomID(int PlanRoomID)
            {
                return (spPlanRoomsGetRow)Rows.Find(new object[] { PlanRoomID });
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public override DataTable Clone()
            {
                spPlanRoomsGetDataTable cln = (spPlanRoomsGetDataTable)base.Clone();
                cln.InitVars();
                return cln;
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            protected override DataTable CreateInstance()
            {
                return new spPlanRoomsGetDataTable();
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            internal void InitVars()
            {
                columnPlanRoomID=Columns["PlanRoomID"];
                columnPlanID=Columns["PlanID"];
                columnRoom=Columns["Room"];
                columnCreatedDate=Columns["CreatedDate"];
                columnCreatedBy=Columns["CreatedBy"];
                columnUpdatedDate=Columns["UpdatedDate"];
                columnUpdatedby=Columns["Updatedby"];
                columnOptional=Columns["Optional"];
                columnSqFt=Columns["SqFt"];
                columnFlooringDefault=Columns["FlooringDefault"];
                columnOtherRoom=Columns["OtherRoom"];
                columnlftrim=Columns["lftrim"];
                columnlfcrown=Columns["lfcrown"];
                columnTrimResource=Columns["TrimResource"];
                columnOtherResource=Columns["OtherResource"];
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            private void InitClass()
            {
                columnPlanRoomID=new DataColumn("PlanRoomID", typeof(int), null, MappingType.Element);
                Columns.Add(columnPlanRoomID);
                columnPlanID=new DataColumn("PlanID", typeof(string), null, MappingType.Element);
                Columns.Add(columnPlanID);
                columnRoom=new DataColumn("Room", typeof(string), null, MappingType.Element);
                Columns.Add(columnRoom);
                columnCreatedDate=new DataColumn("CreatedDate", typeof(DateTime), null, MappingType.Element);
                Columns.Add(columnCreatedDate);
                columnCreatedBy=new DataColumn("CreatedBy", typeof(string), null, MappingType.Element);
                Columns.Add(columnCreatedBy);
                columnUpdatedDate=new DataColumn("UpdatedDate", typeof(DateTime), null, MappingType.Element);
                Columns.Add(columnUpdatedDate);
                columnUpdatedby=new DataColumn("Updatedby", typeof(string), null, MappingType.Element);
                Columns.Add(columnUpdatedby);
                columnOptional=new DataColumn("Optional", typeof(bool), null, MappingType.Element);
                columnOptional.ExtendedProperties.Add("Generator_ColumnPropNameInTable", "OptionalColumn");
                columnOptional.ExtendedProperties.Add("Generator_ColumnVarNameInTable", "columnOptional");
                columnOptional.ExtendedProperties.Add("Generator_UserColumnName", "Optional");
                Columns.Add(columnOptional);
                columnSqFt=new DataColumn("SqFt", typeof(int), null, MappingType.Element);
                Columns.Add(columnSqFt);
                columnFlooringDefault=new DataColumn("FlooringDefault", typeof(string), null, MappingType.Element);
                Columns.Add(columnFlooringDefault);
                columnOtherRoom=new DataColumn("OtherRoom", typeof(string), null, MappingType.Element);
                Columns.Add(columnOtherRoom);
                columnlftrim=new DataColumn("lftrim", typeof(int), null, MappingType.Element);
                Columns.Add(columnlftrim);
                columnlfcrown=new DataColumn("lfcrown", typeof(int), null, MappingType.Element);
                Columns.Add(columnlfcrown);
                columnTrimResource=new DataColumn("TrimResource", typeof(string), null, MappingType.Element);
                Columns.Add(columnTrimResource);
                columnOtherResource=new DataColumn("OtherResource", typeof(string), null, MappingType.Element);
                Columns.Add(columnOtherResource);
                Constraints.Add(new UniqueConstraint("Constraint1", new DataColumn[] { columnPlanRoomID }, true));
                columnPlanRoomID.AutoIncrement=true;
                columnPlanRoomID.AllowDBNull=false;
                columnPlanRoomID.ReadOnly=true;
                columnPlanRoomID.Unique=true;
                columnPlanID.MaxLength=50;
                columnRoom.MaxLength=15;
                columnCreatedBy.MaxLength=10;
                columnUpdatedby.MaxLength=10;
                columnFlooringDefault.MaxLength=20;
                columnOtherRoom.MaxLength=15;
                columnTrimResource.MaxLength=20;
                columnOtherResource.MaxLength=20;
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public spPlanRoomsGetRow NewspPlanRoomsGetRow()
            {
                return (spPlanRoomsGetRow)NewRow();
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder)
            {
                return new spPlanRoomsGetRow(builder);
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            protected override Type GetRowType()
            {
                return typeof(spPlanRoomsGetRow);
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            protected override void OnRowChanged(DataRowChangeEventArgs e)
            {
                base.OnRowChanged(e);
                if (spPlanRoomsGetRowChanged is not null)
                {
                    spPlanRoomsGetRowChanged?.Invoke(this, new spPlanRoomsGetRowChangeEvent((spPlanRoomsGetRow)e.Row, e.Action));
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            protected override void OnRowChanging(DataRowChangeEventArgs e)
            {
                base.OnRowChanging(e);
                if (spPlanRoomsGetRowChanging is not null)
                {
                    spPlanRoomsGetRowChanging?.Invoke(this, new spPlanRoomsGetRowChangeEvent((spPlanRoomsGetRow)e.Row, e.Action));
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            protected override void OnRowDeleted(DataRowChangeEventArgs e)
            {
                base.OnRowDeleted(e);
                if (spPlanRoomsGetRowDeleted is not null)
                {
                    spPlanRoomsGetRowDeleted?.Invoke(this, new spPlanRoomsGetRowChangeEvent((spPlanRoomsGetRow)e.Row, e.Action));
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            protected override void OnRowDeleting(DataRowChangeEventArgs e)
            {
                base.OnRowDeleting(e);
                if (spPlanRoomsGetRowDeleting is not null)
                {
                    spPlanRoomsGetRowDeleting?.Invoke(this, new spPlanRoomsGetRowChangeEvent((spPlanRoomsGetRow)e.Row, e.Action));
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public void RemovespPlanRoomsGetRow(spPlanRoomsGetRow row)
            {
                Rows.Remove(row);
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs)
            {
                var type = new System.Xml.Schema.XmlSchemaComplexType();
                var sequence = new System.Xml.Schema.XmlSchemaSequence();
                var ds = new HCHDataPlanRoomsData();
                var any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace="http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs=new decimal(0);
                any1.MaxOccurs=decimal.MaxValue;
                any1.ProcessContents=System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                var any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace="urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs=new decimal(1);
                any2.ProcessContents=System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                var attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name="namespace";
                attribute1.FixedValue=ds.Namespace;
                type.Attributes.Add(attribute1);
                var attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name="tableTypeName";
                attribute2.FixedValue="spPlanRoomsGetDataTable";
                type.Attributes.Add(attribute2);
                type.Particle=sequence;
                var dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace))
                {
                    var s1 = new System.IO.MemoryStream();
                    var s2 = new System.IO.MemoryStream();
                    try
                    {
                        System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        var schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator();
                        while (schemas.MoveNext())
                        {
                            schema=(System.Xml.Schema.XmlSchema)schemas.Current;
                            s2.SetLength(0L);
                            schema.Write(s2);
                            if (s1.Length==s2.Length)
                            {
                                s1.Position=0L;
                                s2.Position=0L;

                                while (s1.Position!=s1.Length&&s1.ReadByte()==s2.ReadByte())
                                {


                                }
                                if (s1.Position==s1.Length)
                                {
                                    return type;
                                }
                            }

                        }
                    }
                    finally
                    {
                        if (s1 is not null)
                        {
                            s1.Close();
                        }
                        if (s2 is not null)
                        {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }

        /// <summary>
    /// Represents strongly named DataRow class.
    /// </summary>
        public partial class spPlanRoomsGetRow : DataRow
        {

            private spPlanRoomsGetDataTable tablespPlanRoomsGet;

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            internal spPlanRoomsGetRow(DataRowBuilder rb) : base(rb)
            {
                tablespPlanRoomsGet=(spPlanRoomsGetDataTable)Table;
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public int PlanRoomID
            {
                get
                {
                    return (int)(this[tablespPlanRoomsGet.PlanRoomIDColumn]);
                }
                set
                {
                    this[tablespPlanRoomsGet.PlanRoomIDColumn]=value;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public string PlanID
            {
                get
                {
                    try
                    {
                        return Conversions.ToString(this[tablespPlanRoomsGet.PlanIDColumn]);
                    }
                    catch (InvalidCastException e)
                    {
                        throw new StrongTypingException("The value for column 'PlanID' in table 'spPlanRoomsGet' is DBNull.", e);
                    }
                }
                set
                {
                    this[tablespPlanRoomsGet.PlanIDColumn]=value;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public string Room
            {
                get
                {
                    try
                    {
                        return Conversions.ToString(this[tablespPlanRoomsGet.RoomColumn]);
                    }
                    catch (InvalidCastException e)
                    {
                        throw new StrongTypingException("The value for column 'Room' in table 'spPlanRoomsGet' is DBNull.", e);
                    }
                }
                set
                {
                    this[tablespPlanRoomsGet.RoomColumn]=value;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public DateTime CreatedDate
            {
                get
                {
                    try
                    {
                        return Conversions.ToDate(this[tablespPlanRoomsGet.CreatedDateColumn]);
                    }
                    catch (InvalidCastException e)
                    {
                        throw new StrongTypingException("The value for column 'CreatedDate' in table 'spPlanRoomsGet' is DBNull.", e);
                    }
                }
                set
                {
                    this[tablespPlanRoomsGet.CreatedDateColumn]=value;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public string CreatedBy
            {
                get
                {
                    try
                    {
                        return Conversions.ToString(this[tablespPlanRoomsGet.CreatedByColumn]);
                    }
                    catch (InvalidCastException e)
                    {
                        throw new StrongTypingException("The value for column 'CreatedBy' in table 'spPlanRoomsGet' is DBNull.", e);
                    }
                }
                set
                {
                    this[tablespPlanRoomsGet.CreatedByColumn]=value;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public DateTime UpdatedDate
            {
                get
                {
                    try
                    {
                        return Conversions.ToDate(this[tablespPlanRoomsGet.UpdatedDateColumn]);
                    }
                    catch (InvalidCastException e)
                    {
                        throw new StrongTypingException("The value for column 'UpdatedDate' in table 'spPlanRoomsGet' is DBNull.", e);
                    }
                }
                set
                {
                    this[tablespPlanRoomsGet.UpdatedDateColumn]=value;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public string Updatedby
            {
                get
                {
                    try
                    {
                        return Conversions.ToString(this[tablespPlanRoomsGet.UpdatedbyColumn]);
                    }
                    catch (InvalidCastException e)
                    {
                        throw new StrongTypingException("The value for column 'Updatedby' in table 'spPlanRoomsGet' is DBNull.", e);
                    }
                }
                set
                {
                    this[tablespPlanRoomsGet.UpdatedbyColumn]=value;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public bool _Optional
            {
                get
                {
                    try
                    {
                        return Conversions.ToBoolean(this[tablespPlanRoomsGet.OptionalColumn]);
                    }
                    catch (InvalidCastException e)
                    {
                        throw new StrongTypingException("The value for column 'Optional' in table 'spPlanRoomsGet' is DBNull.", e);
                    }
                }
                set
                {
                    this[tablespPlanRoomsGet.OptionalColumn]=value;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public int SqFt
            {
                get
                {
                    try
                    {
                        return (int)(this[tablespPlanRoomsGet.SqFtColumn]);
                    }
                    catch (InvalidCastException e)
                    {
                        throw new StrongTypingException("The value for column 'SqFt' in table 'spPlanRoomsGet' is DBNull.", e);
                    }
                }
                set
                {
                    this[tablespPlanRoomsGet.SqFtColumn]=value;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public string FlooringDefault
            {
                get
                {
                    try
                    {
                        return Conversions.ToString(this[tablespPlanRoomsGet.FlooringDefaultColumn]);
                    }
                    catch (InvalidCastException e)
                    {
                        throw new StrongTypingException("The value for column 'FlooringDefault' in table 'spPlanRoomsGet' is DBNull.", e);
                    }
                }
                set
                {
                    this[tablespPlanRoomsGet.FlooringDefaultColumn]=value;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public string OtherRoom
            {
                get
                {
                    try
                    {
                        return Conversions.ToString(this[tablespPlanRoomsGet.OtherRoomColumn]);
                    }
                    catch (InvalidCastException e)
                    {
                        throw new StrongTypingException("The value for column 'OtherRoom' in table 'spPlanRoomsGet' is DBNull.", e);
                    }
                }
                set
                {
                    this[tablespPlanRoomsGet.OtherRoomColumn]=value;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public int lftrim
            {
                get
                {
                    try
                    {
                        return (int)(this[tablespPlanRoomsGet.lftrimColumn]);
                    }
                    catch (InvalidCastException e)
                    {
                        throw new StrongTypingException("The value for column 'lftrim' in table 'spPlanRoomsGet' is DBNull.", e);
                    }
                }
                set
                {
                    this[tablespPlanRoomsGet.lftrimColumn]=value;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public int lfcrown
            {
                get
                {
                    try
                    {
                        return (int)(this[tablespPlanRoomsGet.lfcrownColumn]);
                    }
                    catch (InvalidCastException e)
                    {
                        throw new StrongTypingException("The value for column 'lfcrown' in table 'spPlanRoomsGet' is DBNull.", e);
                    }
                }
                set
                {
                    this[tablespPlanRoomsGet.lfcrownColumn]=value;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public string TrimResource
            {
                get
                {
                    try
                    {
                        return Conversions.ToString(this[tablespPlanRoomsGet.TrimResourceColumn]);
                    }
                    catch (InvalidCastException e)
                    {
                        throw new StrongTypingException("The value for column 'TrimResource' in table 'spPlanRoomsGet' is DBNull.", e);
                    }
                }
                set
                {
                    this[tablespPlanRoomsGet.TrimResourceColumn]=value;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public string OtherResource
            {
                get
                {
                    try
                    {
                        return Conversions.ToString(this[tablespPlanRoomsGet.OtherResourceColumn]);
                    }
                    catch (InvalidCastException e)
                    {
                        throw new StrongTypingException("The value for column 'OtherResource' in table 'spPlanRoomsGet' is DBNull.", e);
                    }
                }
                set
                {
                    this[tablespPlanRoomsGet.OtherResourceColumn]=value;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public bool IsPlanIDNull()
            {
                return IsNull(tablespPlanRoomsGet.PlanIDColumn);
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public void SetPlanIDNull()
            {
                this[tablespPlanRoomsGet.PlanIDColumn]=Convert.DBNull;
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public bool IsRoomNull()
            {
                return IsNull(tablespPlanRoomsGet.RoomColumn);
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public void SetRoomNull()
            {
                this[tablespPlanRoomsGet.RoomColumn]=Convert.DBNull;
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public bool IsCreatedDateNull()
            {
                return IsNull(tablespPlanRoomsGet.CreatedDateColumn);
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public void SetCreatedDateNull()
            {
                this[tablespPlanRoomsGet.CreatedDateColumn]=Convert.DBNull;
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public bool IsCreatedByNull()
            {
                return IsNull(tablespPlanRoomsGet.CreatedByColumn);
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public void SetCreatedByNull()
            {
                this[tablespPlanRoomsGet.CreatedByColumn]=Convert.DBNull;
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public bool IsUpdatedDateNull()
            {
                return IsNull(tablespPlanRoomsGet.UpdatedDateColumn);
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public void SetUpdatedDateNull()
            {
                this[tablespPlanRoomsGet.UpdatedDateColumn]=Convert.DBNull;
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public bool IsUpdatedbyNull()
            {
                return IsNull(tablespPlanRoomsGet.UpdatedbyColumn);
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public void SetUpdatedbyNull()
            {
                this[tablespPlanRoomsGet.UpdatedbyColumn]=Convert.DBNull;
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public bool Is_OptionalNull()
            {
                return IsNull(tablespPlanRoomsGet.OptionalColumn);
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public void Set_OptionalNull()
            {
                this[tablespPlanRoomsGet.OptionalColumn]=Convert.DBNull;
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public bool IsSqFtNull()
            {
                return IsNull(tablespPlanRoomsGet.SqFtColumn);
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public void SetSqFtNull()
            {
                this[tablespPlanRoomsGet.SqFtColumn]=Convert.DBNull;
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public bool IsFlooringDefaultNull()
            {
                return IsNull(tablespPlanRoomsGet.FlooringDefaultColumn);
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public void SetFlooringDefaultNull()
            {
                this[tablespPlanRoomsGet.FlooringDefaultColumn]=Convert.DBNull;
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public bool IsOtherRoomNull()
            {
                return IsNull(tablespPlanRoomsGet.OtherRoomColumn);
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public void SetOtherRoomNull()
            {
                this[tablespPlanRoomsGet.OtherRoomColumn]=Convert.DBNull;
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public bool IslftrimNull()
            {
                return IsNull(tablespPlanRoomsGet.lftrimColumn);
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public void SetlftrimNull()
            {
                this[tablespPlanRoomsGet.lftrimColumn]=Convert.DBNull;
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public bool IslfcrownNull()
            {
                return IsNull(tablespPlanRoomsGet.lfcrownColumn);
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public void SetlfcrownNull()
            {
                this[tablespPlanRoomsGet.lfcrownColumn]=Convert.DBNull;
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public bool IsTrimResourceNull()
            {
                return IsNull(tablespPlanRoomsGet.TrimResourceColumn);
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public void SetTrimResourceNull()
            {
                this[tablespPlanRoomsGet.TrimResourceColumn]=Convert.DBNull;
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public bool IsOtherResourceNull()
            {
                return IsNull(tablespPlanRoomsGet.OtherResourceColumn);
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public void SetOtherResourceNull()
            {
                this[tablespPlanRoomsGet.OtherResourceColumn]=Convert.DBNull;
            }
        }

        /// <summary>
    /// Row event argument class
    /// </summary>
        [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        public class spPlanRoomsGetRowChangeEvent : EventArgs
        {

            private spPlanRoomsGetRow eventRow;

            private DataRowAction eventAction;

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public spPlanRoomsGetRowChangeEvent(spPlanRoomsGetRow row, DataRowAction action) : base()
            {
                eventRow=row;
                eventAction=action;
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public spPlanRoomsGetRow Row
            {
                get
                {
                    return eventRow;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public DataRowAction Action
            {
                get
                {
                    return eventAction;
                }
            }
        }
    }

    namespace HCHDataPlanRoomsDataTableAdapters
    {

        /// <summary>
    /// Represents the connection and commands used to retrieve and save data.
    /// </summary>
        [System.ComponentModel.DesignerCategory("code")]
        [System.ComponentModel.ToolboxItem(true)]
        [System.ComponentModel.DataObject(true)]
        [System.ComponentModel.Designer("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"+", Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]

        [System.ComponentModel.Design.HelpKeyword("vs.data.TableAdapter")]
        public partial class spPlanRoomsGetTableAdapter : System.ComponentModel.Component
        {

            private System.Data.SqlClient.SqlDataAdapter __adapter;

            private System.Data.SqlClient.SqlDataAdapter _adapter
            {
                [MethodImpl(MethodImplOptions.Synchronized)]
                get
                {
                    return __adapter;
                }

                [MethodImpl(MethodImplOptions.Synchronized)]
                set
                {
                    __adapter=value;
                }
            }

            private System.Data.SqlClient.SqlConnection _connection;

            private System.Data.SqlClient.SqlTransaction _transaction;

            private System.Data.SqlClient.SqlCommand[] _commandCollection;

            private bool _clearBeforeFill;

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public spPlanRoomsGetTableAdapter() : base()
            {
                ClearBeforeFill=true;
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            protected internal System.Data.SqlClient.SqlDataAdapter Adapter
            {
                get
                {
                    if (_adapter is null)
                    {
                        InitAdapter();
                    }
                    return _adapter;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public System.Data.SqlClient.SqlConnection Connection
            {
                get
                {
                    if (_connection is null)
                    {
                        InitConnection();
                    }
                    return _connection;
                }
                set
                {
                    _connection=value;
                    if (Adapter.InsertCommand is not null)
                    {
                        Adapter.InsertCommand.Connection=value;
                    }
                    if (Adapter.DeleteCommand is not null)
                    {
                        Adapter.DeleteCommand.Connection=value;
                    }
                    if (Adapter.UpdateCommand is not null)
                    {
                        Adapter.UpdateCommand.Connection=value;
                    }
                    int i = 0;
                    while (i<CommandCollection.Length)
                    {
                        if (CommandCollection[i] is not null)
                        {
                            CommandCollection[i].Connection=value;
                        }
                        i=i+1;
                    }
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            internal System.Data.SqlClient.SqlTransaction Transaction
            {
                get
                {
                    return _transaction;
                }
                set
                {
                    _transaction=value;
                    int i = 0;
                    while (i<CommandCollection.Length)
                    {
                        CommandCollection[i].Transaction=_transaction;
                        i=i+1;
                    }
                    if (Adapter is not null&&Adapter.DeleteCommand is not null)
                    {
                        Adapter.DeleteCommand.Transaction=_transaction;
                    }
                    if (Adapter is not null&&Adapter.InsertCommand is not null)
                    {
                        Adapter.InsertCommand.Transaction=_transaction;
                    }
                    if (Adapter is not null&&Adapter.UpdateCommand is not null)
                    {
                        Adapter.UpdateCommand.Transaction=_transaction;
                    }
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            protected System.Data.SqlClient.SqlCommand[] CommandCollection
            {
                get
                {
                    if (_commandCollection is null)
                    {
                        InitCommandCollection();
                    }
                    return _commandCollection;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public bool ClearBeforeFill
            {
                get
                {
                    return _clearBeforeFill;
                }
                set
                {
                    _clearBeforeFill=value;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            private void InitAdapter()
            {
                _adapter=new System.Data.SqlClient.SqlDataAdapter();
                var tableMapping = new System.Data.Common.DataTableMapping();
                tableMapping.SourceTable="Table";
                tableMapping.DataSetTable="spPlanRoomsGet";
                tableMapping.ColumnMappings.Add("PlanRoomID", "PlanRoomID");
                tableMapping.ColumnMappings.Add("PlanID", "PlanID");
                tableMapping.ColumnMappings.Add("Room", "Room");
                tableMapping.ColumnMappings.Add("CreatedDate", "CreatedDate");
                tableMapping.ColumnMappings.Add("CreatedBy", "CreatedBy");
                tableMapping.ColumnMappings.Add("UpdatedDate", "UpdatedDate");
                tableMapping.ColumnMappings.Add("Updatedby", "Updatedby");
                tableMapping.ColumnMappings.Add("Optional", "Optional");
                tableMapping.ColumnMappings.Add("SqFt", "SqFt");
                tableMapping.ColumnMappings.Add("FlooringDefault", "FlooringDefault");
                tableMapping.ColumnMappings.Add("OtherRoom", "OtherRoom");
                tableMapping.ColumnMappings.Add("lftrim", "lftrim");
                tableMapping.ColumnMappings.Add("lfcrown", "lfcrown");
                tableMapping.ColumnMappings.Add("TrimResource", "TrimResource");
                tableMapping.ColumnMappings.Add("OtherResource", "OtherResource");
                _adapter.TableMappings.Add(tableMapping);
                _adapter.InsertCommand=new System.Data.SqlClient.SqlCommand();
                _adapter.InsertCommand.Connection=Connection;
                _adapter.InsertCommand.CommandText="dbo.spPlanRoomsInsert";
                _adapter.InsertCommand.CommandType=CommandType.StoredProcedure;
                _adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@RETURN_VALUE", SqlDbType.Int, 4, ParameterDirection.ReturnValue, 10, 0, null, DataRowVersion.Current, false, null, "", "", ""));
                _adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@PlanID", SqlDbType.NVarChar, 50, ParameterDirection.Input, 0, 0, "PlanID", DataRowVersion.Current, false, null, "", "", ""));
                _adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Room", SqlDbType.NVarChar, 15, ParameterDirection.Input, 0, 0, "Room", DataRowVersion.Current, false, null, "", "", ""));
                _adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@CreatedBy", SqlDbType.NChar, 10, ParameterDirection.Input, 0, 0, "CreatedBy", DataRowVersion.Current, false, null, "", "", ""));
                _adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@SqFt", SqlDbType.Int, 4, ParameterDirection.Input, 10, 0, "SqFt", DataRowVersion.Current, false, null, "", "", ""));
                _adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@lftrim", SqlDbType.Int, 4, ParameterDirection.Input, 10, 0, "lftrim", DataRowVersion.Current, false, null, "", "", ""));
                _adapter.InsertCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@lfcrown", SqlDbType.Int, 4, ParameterDirection.Input, 10, 0, "lfcrown", DataRowVersion.Current, false, null, "", "", ""));
                _adapter.UpdateCommand=new System.Data.SqlClient.SqlCommand();
                _adapter.UpdateCommand.Connection=Connection;
                _adapter.UpdateCommand.CommandText="dbo.spPlanRoomsUpdate";
                _adapter.UpdateCommand.CommandType=CommandType.StoredProcedure;
                _adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@RETURN_VALUE", SqlDbType.Int, 4, ParameterDirection.ReturnValue, 10, 0, null, DataRowVersion.Current, false, null, "", "", ""));
                _adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@PlanRoomId", SqlDbType.Int, 4, ParameterDirection.Input, 10, 0, "PlanRoomID", DataRowVersion.Current, false, null, "", "", ""));
                _adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Optional", SqlDbType.Bit, 1, ParameterDirection.Input, 1, 0, "Optional", DataRowVersion.Current, false, null, "", "", ""));
                _adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@SqFt", SqlDbType.Int, 4, ParameterDirection.Input, 10, 0, "SqFt", DataRowVersion.Current, false, null, "", "", ""));
                _adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@FlooringDefault", SqlDbType.NVarChar, 20, ParameterDirection.Input, 0, 0, "FlooringDefault", DataRowVersion.Current, false, null, "", "", ""));
                _adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@OtherRoom", SqlDbType.NVarChar, 15, ParameterDirection.Input, 0, 0, "OtherRoom", DataRowVersion.Current, false, null, "", "", ""));
                _adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@lftrim", SqlDbType.Int, 4, ParameterDirection.Input, 10, 0, "lftrim", DataRowVersion.Current, false, null, "", "", ""));
                _adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@lfcrown", SqlDbType.Int, 4, ParameterDirection.Input, 10, 0, "lfcrown", DataRowVersion.Current, false, null, "", "", ""));
                _adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@OtherResource", SqlDbType.NVarChar, 20, ParameterDirection.Input, 0, 0, "OtherResource", DataRowVersion.Current, false, null, "", "", ""));
                _adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@UpdatedBy", SqlDbType.NChar, 10, ParameterDirection.Input, 0, 0, "Updatedby", DataRowVersion.Current, false, null, "", "", ""));
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            private void InitConnection()
            {
                _connection=new System.Data.SqlClient.SqlConnection();
                _connection.ConnectionString=My.MySettings.Default.HCHDataConnectionString;
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            private void InitCommandCollection()
            {
                _commandCollection=new System.Data.SqlClient.SqlCommand[3];
                _commandCollection[0]=new System.Data.SqlClient.SqlCommand();
                _commandCollection[0].Connection=Connection;
                _commandCollection[0].CommandText="dbo.spPlanRoomsGet";
                _commandCollection[0].CommandType=CommandType.StoredProcedure;
                _commandCollection[0].Parameters.Add(new System.Data.SqlClient.SqlParameter("@RETURN_VALUE", SqlDbType.Int, 4, ParameterDirection.ReturnValue, 10, 0, null, DataRowVersion.Current, false, null, "", "", ""));
                _commandCollection[1]=new System.Data.SqlClient.SqlCommand();
                _commandCollection[1].Connection=Connection;
                _commandCollection[1].CommandText="dbo.spPlanRoomsInsert";
                _commandCollection[1].CommandType=CommandType.StoredProcedure;
                _commandCollection[1].Parameters.Add(new System.Data.SqlClient.SqlParameter("@RETURN_VALUE", SqlDbType.Int, 4, ParameterDirection.ReturnValue, 10, 0, null, DataRowVersion.Current, false, null, "", "", ""));
                _commandCollection[1].Parameters.Add(new System.Data.SqlClient.SqlParameter("@PlanID", SqlDbType.NVarChar, 50, ParameterDirection.Input, 0, 0, null, DataRowVersion.Current, false, null, "", "", ""));
                _commandCollection[1].Parameters.Add(new System.Data.SqlClient.SqlParameter("@Room", SqlDbType.NVarChar, 15, ParameterDirection.Input, 0, 0, null, DataRowVersion.Current, false, null, "", "", ""));
                _commandCollection[1].Parameters.Add(new System.Data.SqlClient.SqlParameter("@CreatedBy", SqlDbType.NChar, 10, ParameterDirection.Input, 0, 0, null, DataRowVersion.Current, false, null, "", "", ""));
                _commandCollection[1].Parameters.Add(new System.Data.SqlClient.SqlParameter("@SqFt", SqlDbType.Int, 4, ParameterDirection.Input, 10, 0, null, DataRowVersion.Current, false, null, "", "", ""));
                _commandCollection[1].Parameters.Add(new System.Data.SqlClient.SqlParameter("@lftrim", SqlDbType.Int, 4, ParameterDirection.Input, 10, 0, null, DataRowVersion.Current, false, null, "", "", ""));
                _commandCollection[1].Parameters.Add(new System.Data.SqlClient.SqlParameter("@lfcrown", SqlDbType.Int, 4, ParameterDirection.Input, 10, 0, null, DataRowVersion.Current, false, null, "", "", ""));
                _commandCollection[2]=new System.Data.SqlClient.SqlCommand();
                _commandCollection[2].Connection=Connection;
                _commandCollection[2].CommandText="dbo.spPlanRoomsUpdate";
                _commandCollection[2].CommandType=CommandType.StoredProcedure;
                _commandCollection[2].Parameters.Add(new System.Data.SqlClient.SqlParameter("@RETURN_VALUE", SqlDbType.Int, 4, ParameterDirection.ReturnValue, 10, 0, null, DataRowVersion.Current, false, null, "", "", ""));
                _commandCollection[2].Parameters.Add(new System.Data.SqlClient.SqlParameter("@PlanRoomId", SqlDbType.Int, 4, ParameterDirection.Input, 10, 0, null, DataRowVersion.Current, false, null, "", "", ""));
                _commandCollection[2].Parameters.Add(new System.Data.SqlClient.SqlParameter("@Optional", SqlDbType.Bit, 1, ParameterDirection.Input, 1, 0, null, DataRowVersion.Current, false, null, "", "", ""));
                _commandCollection[2].Parameters.Add(new System.Data.SqlClient.SqlParameter("@SqFt", SqlDbType.Int, 4, ParameterDirection.Input, 10, 0, null, DataRowVersion.Current, false, null, "", "", ""));
                _commandCollection[2].Parameters.Add(new System.Data.SqlClient.SqlParameter("@FlooringDefault", SqlDbType.NVarChar, 20, ParameterDirection.Input, 0, 0, null, DataRowVersion.Current, false, null, "", "", ""));
                _commandCollection[2].Parameters.Add(new System.Data.SqlClient.SqlParameter("@OtherRoom", SqlDbType.NVarChar, 15, ParameterDirection.Input, 0, 0, null, DataRowVersion.Current, false, null, "", "", ""));
                _commandCollection[2].Parameters.Add(new System.Data.SqlClient.SqlParameter("@lftrim", SqlDbType.Int, 4, ParameterDirection.Input, 10, 0, null, DataRowVersion.Current, false, null, "", "", ""));
                _commandCollection[2].Parameters.Add(new System.Data.SqlClient.SqlParameter("@lfcrown", SqlDbType.Int, 4, ParameterDirection.Input, 10, 0, null, DataRowVersion.Current, false, null, "", "", ""));
                _commandCollection[2].Parameters.Add(new System.Data.SqlClient.SqlParameter("@OtherResource", SqlDbType.NVarChar, 20, ParameterDirection.Input, 0, 0, null, DataRowVersion.Current, false, null, "", "", ""));
                _commandCollection[2].Parameters.Add(new System.Data.SqlClient.SqlParameter("@UpdatedBy", SqlDbType.NChar, 10, ParameterDirection.Input, 0, 0, null, DataRowVersion.Current, false, null, "", "", ""));
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            [System.ComponentModel.Design.HelpKeyword("vs.data.TableAdapter")]
            [System.ComponentModel.DataObjectMethod(System.ComponentModel.DataObjectMethodType.Fill, true)]
            public virtual int Fill(HCHDataPlanRoomsData.spPlanRoomsGetDataTable dataTable)
            {
                Adapter.SelectCommand=CommandCollection[0];
                if (ClearBeforeFill==true)
                {
                    dataTable.Clear();
                }
                int returnValue = Adapter.Fill(dataTable);
                return returnValue;
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            [System.ComponentModel.Design.HelpKeyword("vs.data.TableAdapter")]
            [System.ComponentModel.DataObjectMethod(System.ComponentModel.DataObjectMethodType.Select, true)]
            public virtual HCHDataPlanRoomsData.spPlanRoomsGetDataTable GetData()
            {
                Adapter.SelectCommand=CommandCollection[0];
                var dataTable = new HCHDataPlanRoomsData.spPlanRoomsGetDataTable();
                Adapter.Fill(dataTable);
                return dataTable;
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            [System.ComponentModel.Design.HelpKeyword("vs.data.TableAdapter")]
            public virtual int Update(HCHDataPlanRoomsData.spPlanRoomsGetDataTable dataTable)
            {
                return Adapter.Update(dataTable);
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            [System.ComponentModel.Design.HelpKeyword("vs.data.TableAdapter")]
            public virtual int Update(HCHDataPlanRoomsData dataSet)
            {
                return Adapter.Update(dataSet, "spPlanRoomsGet");
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            [System.ComponentModel.Design.HelpKeyword("vs.data.TableAdapter")]
            public virtual int Update(DataRow dataRow)
            {
                return Adapter.Update(new DataRow[] { dataRow });
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            [System.ComponentModel.Design.HelpKeyword("vs.data.TableAdapter")]
            public virtual int Update(DataRow[] dataRows)
            {
                return Adapter.Update(dataRows);
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            [System.ComponentModel.Design.HelpKeyword("vs.data.TableAdapter")]
            [System.ComponentModel.DataObjectMethod(System.ComponentModel.DataObjectMethodType.Insert, true)]
            public virtual int Insert(string PlanID, string Room, string CreatedBy, int? SqFt, int? lftrim, int? lfcrown)
            {
                if (PlanID is null)
                {
                    Adapter.InsertCommand.Parameters[1].Value=DBNull.Value;
                }
                else
                {
                    Adapter.InsertCommand.Parameters[1].Value=PlanID;
                }
                if (Room is null)
                {
                    Adapter.InsertCommand.Parameters[2].Value=DBNull.Value;
                }
                else
                {
                    Adapter.InsertCommand.Parameters[2].Value=Room;
                }
                if (CreatedBy is null)
                {
                    Adapter.InsertCommand.Parameters[3].Value=DBNull.Value;
                }
                else
                {
                    Adapter.InsertCommand.Parameters[3].Value=CreatedBy;
                }
                if (SqFt.HasValue==true)
                {
                    Adapter.InsertCommand.Parameters[4].Value=SqFt.Value;
                }
                else
                {
                    Adapter.InsertCommand.Parameters[4].Value=DBNull.Value;
                }
                if (lftrim.HasValue==true)
                {
                    Adapter.InsertCommand.Parameters[5].Value=lftrim.Value;
                }
                else
                {
                    Adapter.InsertCommand.Parameters[5].Value=DBNull.Value;
                }
                if (lfcrown.HasValue==true)
                {
                    Adapter.InsertCommand.Parameters[6].Value=lfcrown.Value;
                }
                else
                {
                    Adapter.InsertCommand.Parameters[6].Value=DBNull.Value;
                }
                var previousConnectionState = Adapter.InsertCommand.Connection.State;
                if ((Adapter.InsertCommand.Connection.State&ConnectionState.Open)!=ConnectionState.Open)
                {
                    Adapter.InsertCommand.Connection.Open();
                }
                try
                {
                    int returnValue = Adapter.InsertCommand.ExecuteNonQuery();
                    return returnValue;
                }
                finally
                {
                    if (previousConnectionState==ConnectionState.Closed)
                    {
                        Adapter.InsertCommand.Connection.Close();
                    }
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            [System.ComponentModel.Design.HelpKeyword("vs.data.TableAdapter")]
            [System.ComponentModel.DataObjectMethod(System.ComponentModel.DataObjectMethodType.Update, true)]
            public virtual int Update(int? PlanRoomId, bool? _Optional, int? SqFt, string FlooringDefault, string OtherRoom, int? lftrim, int? lfcrown, string OtherResource, string UpdatedBy)
            {
                if (PlanRoomId.HasValue==true)
                {
                    Adapter.UpdateCommand.Parameters[1].Value=PlanRoomId.Value;
                }
                else
                {
                    Adapter.UpdateCommand.Parameters[1].Value=DBNull.Value;
                }
                if (_Optional.HasValue==true)
                {
                    Adapter.UpdateCommand.Parameters[2].Value=_Optional.Value;
                }
                else
                {
                    Adapter.UpdateCommand.Parameters[2].Value=DBNull.Value;
                }
                if (SqFt.HasValue==true)
                {
                    Adapter.UpdateCommand.Parameters[3].Value=SqFt.Value;
                }
                else
                {
                    Adapter.UpdateCommand.Parameters[3].Value=DBNull.Value;
                }
                if (FlooringDefault is null)
                {
                    Adapter.UpdateCommand.Parameters[4].Value=DBNull.Value;
                }
                else
                {
                    Adapter.UpdateCommand.Parameters[4].Value=FlooringDefault;
                }
                if (OtherRoom is null)
                {
                    Adapter.UpdateCommand.Parameters[5].Value=DBNull.Value;
                }
                else
                {
                    Adapter.UpdateCommand.Parameters[5].Value=OtherRoom;
                }
                if (lftrim.HasValue==true)
                {
                    Adapter.UpdateCommand.Parameters[6].Value=lftrim.Value;
                }
                else
                {
                    Adapter.UpdateCommand.Parameters[6].Value=DBNull.Value;
                }
                if (lfcrown.HasValue==true)
                {
                    Adapter.UpdateCommand.Parameters[7].Value=lfcrown.Value;
                }
                else
                {
                    Adapter.UpdateCommand.Parameters[7].Value=DBNull.Value;
                }
                if (OtherResource is null)
                {
                    Adapter.UpdateCommand.Parameters[8].Value=DBNull.Value;
                }
                else
                {
                    Adapter.UpdateCommand.Parameters[8].Value=OtherResource;
                }
                if (UpdatedBy is null)
                {
                    Adapter.UpdateCommand.Parameters[9].Value=DBNull.Value;
                }
                else
                {
                    Adapter.UpdateCommand.Parameters[9].Value=UpdatedBy;
                }
                var previousConnectionState = Adapter.UpdateCommand.Connection.State;
                if ((Adapter.UpdateCommand.Connection.State&ConnectionState.Open)!=ConnectionState.Open)
                {
                    Adapter.UpdateCommand.Connection.Open();
                }
                try
                {
                    int returnValue = Adapter.UpdateCommand.ExecuteNonQuery();
                    return returnValue;
                }
                finally
                {
                    if (previousConnectionState==ConnectionState.Closed)
                    {
                        Adapter.UpdateCommand.Connection.Close();
                    }
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            [System.ComponentModel.Design.HelpKeyword("vs.data.TableAdapter")]
            public virtual object spPlanRoomsInsert(string PlanID, string Room, string CreatedBy, int? SqFt, int? lftrim, int? lfcrown)
            {
                var command = CommandCollection[1];
                if (PlanID is null)
                {
                    command.Parameters[1].Value=DBNull.Value;
                }
                else
                {
                    command.Parameters[1].Value=PlanID;
                }
                if (Room is null)
                {
                    command.Parameters[2].Value=DBNull.Value;
                }
                else
                {
                    command.Parameters[2].Value=Room;
                }
                if (CreatedBy is null)
                {
                    command.Parameters[3].Value=DBNull.Value;
                }
                else
                {
                    command.Parameters[3].Value=CreatedBy;
                }
                if (SqFt.HasValue==true)
                {
                    command.Parameters[4].Value=SqFt.Value;
                }
                else
                {
                    command.Parameters[4].Value=DBNull.Value;
                }
                if (lftrim.HasValue==true)
                {
                    command.Parameters[5].Value=lftrim.Value;
                }
                else
                {
                    command.Parameters[5].Value=DBNull.Value;
                }
                if (lfcrown.HasValue==true)
                {
                    command.Parameters[6].Value=lfcrown.Value;
                }
                else
                {
                    command.Parameters[6].Value=DBNull.Value;
                }
                var previousConnectionState = command.Connection.State;
                if ((command.Connection.State&ConnectionState.Open)!=ConnectionState.Open)
                {
                    command.Connection.Open();
                }
                object returnValue;
                try
                {
                    returnValue=command.ExecuteScalar();
                }
                finally
                {
                    if (previousConnectionState==ConnectionState.Closed)
                    {
                        command.Connection.Close();
                    }
                }
                if (returnValue is null||ReferenceEquals(returnValue.GetType(), typeof(DBNull)))
                {
                    return null;
                }
                else
                {
                    return returnValue;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            [System.ComponentModel.Design.HelpKeyword("vs.data.TableAdapter")]
            public virtual object spPlanRoomsUpdate(int? PlanRoomId, bool? _Optional, int? SqFt, string FlooringDefault, string OtherRoom, int? lftrim, int? lfcrown, string OtherResource, string UpdatedBy)
            {
                var command = CommandCollection[2];
                if (PlanRoomId.HasValue==true)
                {
                    command.Parameters[1].Value=PlanRoomId.Value;
                }
                else
                {
                    command.Parameters[1].Value=DBNull.Value;
                }
                if (_Optional.HasValue==true)
                {
                    command.Parameters[2].Value=_Optional.Value;
                }
                else
                {
                    command.Parameters[2].Value=DBNull.Value;
                }
                if (SqFt.HasValue==true)
                {
                    command.Parameters[3].Value=SqFt.Value;
                }
                else
                {
                    command.Parameters[3].Value=DBNull.Value;
                }
                if (FlooringDefault is null)
                {
                    command.Parameters[4].Value=DBNull.Value;
                }
                else
                {
                    command.Parameters[4].Value=FlooringDefault;
                }
                if (OtherRoom is null)
                {
                    command.Parameters[5].Value=DBNull.Value;
                }
                else
                {
                    command.Parameters[5].Value=OtherRoom;
                }
                if (lftrim.HasValue==true)
                {
                    command.Parameters[6].Value=lftrim.Value;
                }
                else
                {
                    command.Parameters[6].Value=DBNull.Value;
                }
                if (lfcrown.HasValue==true)
                {
                    command.Parameters[7].Value=lfcrown.Value;
                }
                else
                {
                    command.Parameters[7].Value=DBNull.Value;
                }
                if (OtherResource is null)
                {
                    command.Parameters[8].Value=DBNull.Value;
                }
                else
                {
                    command.Parameters[8].Value=OtherResource;
                }
                if (UpdatedBy is null)
                {
                    command.Parameters[9].Value=DBNull.Value;
                }
                else
                {
                    command.Parameters[9].Value=UpdatedBy;
                }
                var previousConnectionState = command.Connection.State;
                if ((command.Connection.State&ConnectionState.Open)!=ConnectionState.Open)
                {
                    command.Connection.Open();
                }
                object returnValue;
                try
                {
                    returnValue=command.ExecuteScalar();
                }
                finally
                {
                    if (previousConnectionState==ConnectionState.Closed)
                    {
                        command.Connection.Close();
                    }
                }
                if (returnValue is null||ReferenceEquals(returnValue.GetType(), typeof(DBNull)))
                {
                    return null;
                }
                else
                {
                    return returnValue;
                }
            }
        }

        /// <summary>
    /// Represents the connection and commands used to retrieve and save data.
    /// </summary>
        [System.ComponentModel.DesignerCategory("code")]
        [System.ComponentModel.ToolboxItem(true)]
        [System.ComponentModel.DataObject(true)]
        [System.ComponentModel.Designer("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"+", Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]

        [System.ComponentModel.Design.HelpKeyword("vs.data.TableAdapter")]
        public partial class QueriesTableAdapter : System.ComponentModel.Component
        {

            private IDbCommand[] _commandCollection;

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            protected IDbCommand[] CommandCollection
            {
                get
                {
                    if (_commandCollection is null)
                    {
                        InitCommandCollection();
                    }
                    return _commandCollection;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            private void InitCommandCollection()
            {
                _commandCollection=new IDbCommand[2];
                _commandCollection[0]=new System.Data.SqlClient.SqlCommand();
                ((System.Data.SqlClient.SqlCommand)_commandCollection[0]).Connection=new System.Data.SqlClient.SqlConnection(My.MySettings.Default.HCHDataConnectionString);
                ((System.Data.SqlClient.SqlCommand)_commandCollection[0]).CommandText="dbo.spPlanRoomsInsert";
                ((System.Data.SqlClient.SqlCommand)_commandCollection[0]).CommandType=CommandType.StoredProcedure;
                ((System.Data.SqlClient.SqlCommand)_commandCollection[0]).Parameters.Add(new System.Data.SqlClient.SqlParameter("@RETURN_VALUE", SqlDbType.Int, 4, ParameterDirection.ReturnValue, 10, 0, null, DataRowVersion.Current, false, null, "", "", ""));
                ((System.Data.SqlClient.SqlCommand)_commandCollection[0]).Parameters.Add(new System.Data.SqlClient.SqlParameter("@PlanID", SqlDbType.NVarChar, 50, ParameterDirection.Input, 0, 0, null, DataRowVersion.Current, false, null, "", "", ""));
                ((System.Data.SqlClient.SqlCommand)_commandCollection[0]).Parameters.Add(new System.Data.SqlClient.SqlParameter("@Room", SqlDbType.NVarChar, 15, ParameterDirection.Input, 0, 0, null, DataRowVersion.Current, false, null, "", "", ""));
                ((System.Data.SqlClient.SqlCommand)_commandCollection[0]).Parameters.Add(new System.Data.SqlClient.SqlParameter("@CreatedBy", SqlDbType.NChar, 10, ParameterDirection.Input, 0, 0, null, DataRowVersion.Current, false, null, "", "", ""));
                ((System.Data.SqlClient.SqlCommand)_commandCollection[0]).Parameters.Add(new System.Data.SqlClient.SqlParameter("@SqFt", SqlDbType.Int, 4, ParameterDirection.Input, 10, 0, null, DataRowVersion.Current, false, null, "", "", ""));
                ((System.Data.SqlClient.SqlCommand)_commandCollection[0]).Parameters.Add(new System.Data.SqlClient.SqlParameter("@lftrim", SqlDbType.Int, 4, ParameterDirection.Input, 10, 0, null, DataRowVersion.Current, false, null, "", "", ""));
                ((System.Data.SqlClient.SqlCommand)_commandCollection[0]).Parameters.Add(new System.Data.SqlClient.SqlParameter("@lfcrown", SqlDbType.Int, 4, ParameterDirection.Input, 10, 0, null, DataRowVersion.Current, false, null, "", "", ""));
                _commandCollection[1]=new System.Data.SqlClient.SqlCommand();
                ((System.Data.SqlClient.SqlCommand)_commandCollection[1]).Connection=new System.Data.SqlClient.SqlConnection(My.MySettings.Default.HCHDataConnectionString);
                ((System.Data.SqlClient.SqlCommand)_commandCollection[1]).CommandText="dbo.spPlanRoomsUpdate";
                ((System.Data.SqlClient.SqlCommand)_commandCollection[1]).CommandType=CommandType.StoredProcedure;
                ((System.Data.SqlClient.SqlCommand)_commandCollection[1]).Parameters.Add(new System.Data.SqlClient.SqlParameter("@RETURN_VALUE", SqlDbType.Int, 4, ParameterDirection.ReturnValue, 10, 0, null, DataRowVersion.Current, false, null, "", "", ""));
                ((System.Data.SqlClient.SqlCommand)_commandCollection[1]).Parameters.Add(new System.Data.SqlClient.SqlParameter("@PlanRoomId", SqlDbType.Int, 4, ParameterDirection.Input, 10, 0, null, DataRowVersion.Current, false, null, "", "", ""));
                ((System.Data.SqlClient.SqlCommand)_commandCollection[1]).Parameters.Add(new System.Data.SqlClient.SqlParameter("@Optional", SqlDbType.Bit, 1, ParameterDirection.Input, 1, 0, null, DataRowVersion.Current, false, null, "", "", ""));
                ((System.Data.SqlClient.SqlCommand)_commandCollection[1]).Parameters.Add(new System.Data.SqlClient.SqlParameter("@SqFt", SqlDbType.Int, 4, ParameterDirection.Input, 10, 0, null, DataRowVersion.Current, false, null, "", "", ""));
                ((System.Data.SqlClient.SqlCommand)_commandCollection[1]).Parameters.Add(new System.Data.SqlClient.SqlParameter("@FlooringDefault", SqlDbType.NVarChar, 20, ParameterDirection.Input, 0, 0, null, DataRowVersion.Current, false, null, "", "", ""));
                ((System.Data.SqlClient.SqlCommand)_commandCollection[1]).Parameters.Add(new System.Data.SqlClient.SqlParameter("@OtherRoom", SqlDbType.NVarChar, 15, ParameterDirection.Input, 0, 0, null, DataRowVersion.Current, false, null, "", "", ""));
                ((System.Data.SqlClient.SqlCommand)_commandCollection[1]).Parameters.Add(new System.Data.SqlClient.SqlParameter("@lftrim", SqlDbType.Int, 4, ParameterDirection.Input, 10, 0, null, DataRowVersion.Current, false, null, "", "", ""));
                ((System.Data.SqlClient.SqlCommand)_commandCollection[1]).Parameters.Add(new System.Data.SqlClient.SqlParameter("@lfcrown", SqlDbType.Int, 4, ParameterDirection.Input, 10, 0, null, DataRowVersion.Current, false, null, "", "", ""));
                ((System.Data.SqlClient.SqlCommand)_commandCollection[1]).Parameters.Add(new System.Data.SqlClient.SqlParameter("@OtherResource", SqlDbType.NVarChar, 20, ParameterDirection.Input, 0, 0, null, DataRowVersion.Current, false, null, "", "", ""));
                ((System.Data.SqlClient.SqlCommand)_commandCollection[1]).Parameters.Add(new System.Data.SqlClient.SqlParameter("@UpdatedBy", SqlDbType.NChar, 10, ParameterDirection.Input, 0, 0, null, DataRowVersion.Current, false, null, "", "", ""));
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            [System.ComponentModel.Design.HelpKeyword("vs.data.TableAdapter")]
            public virtual object spPlanRoomsInsert(string PlanID, string Room, string CreatedBy, int? SqFt, int? lftrim, int? lfcrown)
            {
                System.Data.SqlClient.SqlCommand command = (System.Data.SqlClient.SqlCommand)CommandCollection[0];
                if (PlanID is null)
                {
                    command.Parameters[1].Value=DBNull.Value;
                }
                else
                {
                    command.Parameters[1].Value=PlanID;
                }
                if (Room is null)
                {
                    command.Parameters[2].Value=DBNull.Value;
                }
                else
                {
                    command.Parameters[2].Value=Room;
                }
                if (CreatedBy is null)
                {
                    command.Parameters[3].Value=DBNull.Value;
                }
                else
                {
                    command.Parameters[3].Value=CreatedBy;
                }
                if (SqFt.HasValue==true)
                {
                    command.Parameters[4].Value=SqFt.Value;
                }
                else
                {
                    command.Parameters[4].Value=DBNull.Value;
                }
                if (lftrim.HasValue==true)
                {
                    command.Parameters[5].Value=lftrim.Value;
                }
                else
                {
                    command.Parameters[5].Value=DBNull.Value;
                }
                if (lfcrown.HasValue==true)
                {
                    command.Parameters[6].Value=lfcrown.Value;
                }
                else
                {
                    command.Parameters[6].Value=DBNull.Value;
                }
                var previousConnectionState = command.Connection.State;
                if ((command.Connection.State&ConnectionState.Open)!=ConnectionState.Open)
                {
                    command.Connection.Open();
                }
                object returnValue;
                try
                {
                    returnValue=command.ExecuteScalar();
                }
                finally
                {
                    if (previousConnectionState==ConnectionState.Closed)
                    {
                        command.Connection.Close();
                    }
                }
                if (returnValue is null||ReferenceEquals(returnValue.GetType(), typeof(DBNull)))
                {
                    return null;
                }
                else
                {
                    return returnValue;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            [System.ComponentModel.Design.HelpKeyword("vs.data.TableAdapter")]
            public virtual int spPlanRoomsUpdate(int? PlanRoomId, bool? _Optional, int? SqFt, string FlooringDefault, string OtherRoom, int? lftrim, int? lfcrown, string OtherResource, string UpdatedBy)
            {
                System.Data.SqlClient.SqlCommand command = (System.Data.SqlClient.SqlCommand)CommandCollection[1];
                if (PlanRoomId.HasValue==true)
                {
                    command.Parameters[1].Value=PlanRoomId.Value;
                }
                else
                {
                    command.Parameters[1].Value=DBNull.Value;
                }
                if (_Optional.HasValue==true)
                {
                    command.Parameters[2].Value=_Optional.Value;
                }
                else
                {
                    command.Parameters[2].Value=DBNull.Value;
                }
                if (SqFt.HasValue==true)
                {
                    command.Parameters[3].Value=SqFt.Value;
                }
                else
                {
                    command.Parameters[3].Value=DBNull.Value;
                }
                if (FlooringDefault is null)
                {
                    command.Parameters[4].Value=DBNull.Value;
                }
                else
                {
                    command.Parameters[4].Value=FlooringDefault;
                }
                if (OtherRoom is null)
                {
                    command.Parameters[5].Value=DBNull.Value;
                }
                else
                {
                    command.Parameters[5].Value=OtherRoom;
                }
                if (lftrim.HasValue==true)
                {
                    command.Parameters[6].Value=lftrim.Value;
                }
                else
                {
                    command.Parameters[6].Value=DBNull.Value;
                }
                if (lfcrown.HasValue==true)
                {
                    command.Parameters[7].Value=lfcrown.Value;
                }
                else
                {
                    command.Parameters[7].Value=DBNull.Value;
                }
                if (OtherResource is null)
                {
                    command.Parameters[8].Value=DBNull.Value;
                }
                else
                {
                    command.Parameters[8].Value=OtherResource;
                }
                if (UpdatedBy is null)
                {
                    command.Parameters[9].Value=DBNull.Value;
                }
                else
                {
                    command.Parameters[9].Value=UpdatedBy;
                }
                var previousConnectionState = command.Connection.State;
                if ((command.Connection.State&ConnectionState.Open)!=ConnectionState.Open)
                {
                    command.Connection.Open();
                }
                int returnValue;
                try
                {
                    returnValue=command.ExecuteNonQuery();
                }
                finally
                {
                    if (previousConnectionState==ConnectionState.Closed)
                    {
                        command.Connection.Close();
                    }
                }
                return returnValue;
            }
        }

        /// <summary>
    /// TableAdapterManager is used to coordinate TableAdapters in the dataset to enable Hierarchical Update scenarios
    /// </summary>
        [System.ComponentModel.DesignerCategory("code")]
        [System.ComponentModel.ToolboxItem(true)]
        [System.ComponentModel.Designer("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerDesigner, Microsoft.VSD"+"esigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]

        [System.ComponentModel.Design.HelpKeyword("vs.data.TableAdapterManager")]
        public partial class TableAdapterManager : System.ComponentModel.Component
        {

            private UpdateOrderOption _updateOrder;

            private spPlanRoomsGetTableAdapter _spPlanRoomsGetTableAdapter;

            private bool _backupDataSetBeforeUpdate;

            private IDbConnection _connection;

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public UpdateOrderOption UpdateOrder
            {
                get
                {
                    return _updateOrder;
                }
                set
                {
                    _updateOrder=value;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            [System.ComponentModel.Editor("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso"+"ft.VSDesigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3"+"a", "System.Drawing.Design.UITypeEditor")]


            public spPlanRoomsGetTableAdapter spPlanRoomsGetTableAdapter
            {
                get
                {
                    return _spPlanRoomsGetTableAdapter;
                }
                set
                {
                    _spPlanRoomsGetTableAdapter=value;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public bool BackupDataSetBeforeUpdate
            {
                get
                {
                    return _backupDataSetBeforeUpdate;
                }
                set
                {
                    _backupDataSetBeforeUpdate=value;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            [System.ComponentModel.Browsable(false)]
            public IDbConnection Connection
            {
                get
                {
                    if (_connection is not null)
                    {
                        return _connection;
                    }
                    if (_spPlanRoomsGetTableAdapter is not null&&_spPlanRoomsGetTableAdapter.Connection is not null)
                    {
                        return _spPlanRoomsGetTableAdapter.Connection;
                    }
                    return null;
                }
                set
                {
                    _connection=value;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            [System.ComponentModel.Browsable(false)]
            public int TableAdapterInstanceCount
            {
                get
                {
                    int count = 0;
                    if (_spPlanRoomsGetTableAdapter is not null)
                    {
                        count=count+1;
                    }
                    return count;
                }
            }

            /// <summary>
        /// Update rows in top-down order.
        /// </summary>
            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            private int UpdateUpdatedRows(HCHDataPlanRoomsData dataSet, List<DataRow> allChangedRows, List<DataRow> allAddedRows)
            {
                int result = 0;
                if (_spPlanRoomsGetTableAdapter is not null)
                {
                    DataRow[] updatedRows = dataSet.spPlanRoomsGet.Select(null, null, DataViewRowState.ModifiedCurrent);
                    updatedRows=GetRealUpdatedRows(updatedRows, allAddedRows);
                    if (updatedRows is not null&&0<updatedRows.Length)
                    {
                        result=result+_spPlanRoomsGetTableAdapter.Update(updatedRows);
                        allChangedRows.AddRange(updatedRows);
                    }
                }
                return result;
            }

            /// <summary>
        /// Insert rows in top-down order.
        /// </summary>
            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            private int UpdateInsertedRows(HCHDataPlanRoomsData dataSet, List<DataRow> allAddedRows)
            {
                int result = 0;
                if (_spPlanRoomsGetTableAdapter is not null)
                {
                    DataRow[] addedRows = dataSet.spPlanRoomsGet.Select(null, null, DataViewRowState.Added);
                    if (addedRows is not null&&0<addedRows.Length)
                    {
                        result=result+_spPlanRoomsGetTableAdapter.Update(addedRows);
                        allAddedRows.AddRange(addedRows);
                    }
                }
                return result;
            }

            /// <summary>
        /// Delete rows in bottom-up order.
        /// </summary>
            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            private int UpdateDeletedRows(HCHDataPlanRoomsData dataSet, List<DataRow> allChangedRows)
            {
                int result = 0;
                if (_spPlanRoomsGetTableAdapter is not null)
                {
                    DataRow[] deletedRows = dataSet.spPlanRoomsGet.Select(null, null, DataViewRowState.Deleted);
                    if (deletedRows is not null&&0<deletedRows.Length)
                    {
                        result=result+_spPlanRoomsGetTableAdapter.Update(deletedRows);
                        allChangedRows.AddRange(deletedRows);
                    }
                }
                return result;
            }

            /// <summary>
        /// Remove inserted rows that become updated rows after calling TableAdapter.Update(inserted rows) first
        /// </summary>
            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            private DataRow[] GetRealUpdatedRows(DataRow[] updatedRows, List<DataRow> allAddedRows)
            {
                if (updatedRows is null||updatedRows.Length<1)
                {
                    return updatedRows;
                }
                if (allAddedRows is null||allAddedRows.Count<1)
                {
                    return updatedRows;
                }
                var realUpdatedRows = new List<DataRow>();
                int i = 0;
                while (i<updatedRows.Length)
                {
                    var row = updatedRows[i];
                    if (allAddedRows.Contains(row)==false)
                    {
                        realUpdatedRows.Add(row);
                    }
                    i=i+1;
                }
                return realUpdatedRows.ToArray();
            }

            /// <summary>
        /// Update all changes to the dataset.
        /// </summary>
            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public virtual int UpdateAll(HCHDataPlanRoomsData dataSet)
            {
                if (dataSet is null)
                {
                    throw new ArgumentNullException("dataSet");
                }
                if (dataSet.HasChanges()==false)
                {
                    return 0;
                }
                if (_spPlanRoomsGetTableAdapter is not null&&MatchTableAdapterConnection(_spPlanRoomsGetTableAdapter.Connection)==false)
                {
                    throw new ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s"+"tring.");
                }
                var workConnection = Connection;
                if (workConnection is null)
                {
                    throw new ApplicationException("TableAdapterManager contains no connection information. Set each TableAdapterMana"+"ger TableAdapter property to a valid TableAdapter instance.");
                }
                bool workConnOpened = false;
                if ((workConnection.State&ConnectionState.Broken)==ConnectionState.Broken)
                {
                    workConnection.Close();
                }
                if (workConnection.State==ConnectionState.Closed)
                {
                    workConnection.Open();
                    workConnOpened=true;
                }
                var workTransaction = workConnection.BeginTransaction();
                if (workTransaction is null)
                {
                    throw new ApplicationException("The transaction cannot begin. The current data connection does not support transa"+"ctions or the current state is not allowing the transaction to begin.");
                }
                var allChangedRows = new List<DataRow>();
                var allAddedRows = new List<DataRow>();
                var adaptersWithAcceptChangesDuringUpdate = new List<System.Data.Common.DataAdapter>();
                var revertConnections = new Dictionary<object, IDbConnection>();
                int result = 0;
                DataSet backupDataSet = null;
                if (BackupDataSetBeforeUpdate)
                {
                    backupDataSet=new DataSet();
                    backupDataSet.Merge(dataSet);
                }
                try
                {
                    // ---- Prepare for update -----------
                    // 
                    if (_spPlanRoomsGetTableAdapter is not null)
                    {
                        revertConnections.Add(_spPlanRoomsGetTableAdapter, _spPlanRoomsGetTableAdapter.Connection);
                        _spPlanRoomsGetTableAdapter.Connection=(System.Data.SqlClient.SqlConnection)workConnection;
                        _spPlanRoomsGetTableAdapter.Transaction=(System.Data.SqlClient.SqlTransaction)workTransaction;
                        if (_spPlanRoomsGetTableAdapter.Adapter.AcceptChangesDuringUpdate)
                        {
                            _spPlanRoomsGetTableAdapter.Adapter.AcceptChangesDuringUpdate=false;
                            adaptersWithAcceptChangesDuringUpdate.Add(_spPlanRoomsGetTableAdapter.Adapter);
                        }
                    }
                    // 
                    // ---- Perform updates -----------
                    // 
                    if (UpdateOrder==UpdateOrderOption.UpdateInsertDelete)
                    {
                        result=result+UpdateUpdatedRows(dataSet, allChangedRows, allAddedRows);
                        result=result+UpdateInsertedRows(dataSet, allAddedRows);
                    }
                    else
                    {
                        result=result+UpdateInsertedRows(dataSet, allAddedRows);
                        result=result+UpdateUpdatedRows(dataSet, allChangedRows, allAddedRows);
                    }
                    result=result+UpdateDeletedRows(dataSet, allChangedRows);
                    // 
                    // ---- Commit updates -----------
                    // 
                    workTransaction.Commit();
                    if (0<allAddedRows.Count)
                    {
                        var rows = new DataRow[allAddedRows.Count];
                        allAddedRows.CopyTo(rows);
                        int i = 0;
                        while (i<rows.Length)
                        {
                            var row = rows[i];
                            row.AcceptChanges();
                            i=i+1;
                        }
                    }
                    if (0<allChangedRows.Count)
                    {
                        var rows = new DataRow[allChangedRows.Count];
                        allChangedRows.CopyTo(rows);
                        int i = 0;
                        while (i<rows.Length)
                        {
                            var row = rows[i];
                            row.AcceptChanges();
                            i=i+1;
                        }
                    }
                }
                catch (Exception ex)
                {
                    workTransaction.Rollback();
                    // ---- Restore the dataset -----------
                    if (BackupDataSetBeforeUpdate)
                    {
                        Debug.Assert(backupDataSet is not null);
                        dataSet.Clear();
                        dataSet.Merge(backupDataSet);
                    }
                    else if (0<allAddedRows.Count)
                    {
                        var rows = new DataRow[allAddedRows.Count];
                        allAddedRows.CopyTo(rows);
                        int i = 0;
                        while (i<rows.Length)
                        {
                            var row = rows[i];
                            row.AcceptChanges();
                            row.SetAdded();
                            i=i+1;
                        }
                    }
                    throw ex;
                }
                finally
                {
                    if (workConnOpened)
                    {
                        workConnection.Close();
                    }
                    if (_spPlanRoomsGetTableAdapter is not null)
                    {
                        _spPlanRoomsGetTableAdapter.Connection=(System.Data.SqlClient.SqlConnection)revertConnections[_spPlanRoomsGetTableAdapter];
                        _spPlanRoomsGetTableAdapter.Transaction=null;
                    }
                    if (0<adaptersWithAcceptChangesDuringUpdate.Count)
                    {
                        var adapters = new System.Data.Common.DataAdapter[adaptersWithAcceptChangesDuringUpdate.Count];
                        adaptersWithAcceptChangesDuringUpdate.CopyTo(adapters);
                        int i = 0;
                        while (i<adapters.Length)
                        {
                            var adapter = adapters[i];
                            adapter.AcceptChangesDuringUpdate=true;
                            i=i+1;
                        }
                    }
                }
                return result;
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            protected virtual void SortSelfReferenceRows(DataRow[] rows, DataRelation relation, bool childFirst)
            {
                Array.Sort(rows, new SelfReferenceComparer(relation, childFirst));
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            protected virtual bool MatchTableAdapterConnection(IDbConnection inputConnection)
            {
                if (_connection is not null)
                {
                    return true;
                }
                if (Connection is null||inputConnection is null)
                {
                    return true;
                }
                if (string.Equals(Connection.ConnectionString, inputConnection.ConnectionString, StringComparison.Ordinal))
                {
                    return true;
                }
                return false;
            }

            /// <summary>
        /// Update Order Option
        /// </summary>
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public enum UpdateOrderOption
            {

                InsertUpdateDelete = 0,

                UpdateInsertDelete = 1
            }

            /// <summary>
        /// Used to sort self-referenced table's rows
        /// </summary>
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            private class SelfReferenceComparer : object, IComparer<DataRow>
            {

                private DataRelation _relation;

                private int _childFirst;

                [DebuggerNonUserCode()]
                [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
                internal SelfReferenceComparer(DataRelation relation, bool childFirst) : base()
                {
                    _relation=relation;
                    if (childFirst)
                    {
                        _childFirst=-1;
                    }
                    else
                    {
                        _childFirst=1;
                    }
                }

                [DebuggerNonUserCode()]
                [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
                private DataRow GetRoot(DataRow row, ref int distance)
                {
                    Debug.Assert(row is not null);
                    var root = row;
                    distance=0;

                    IDictionary<DataRow, DataRow> traversedRows = new Dictionary<DataRow, DataRow>();
                    traversedRows[row]=row;

                    var parent = row.GetParentRow(_relation, DataRowVersion.Default);

                    while (parent is not null&&traversedRows.ContainsKey(parent)==false)
                    {
                        distance=distance+1;
                        root=parent;
                        traversedRows[parent]=parent;
                        parent=parent.GetParentRow(_relation, DataRowVersion.Default);

                    }

                    if (distance==0)
                    {
                        traversedRows.Clear();
                        traversedRows[row]=row;
                        parent=row.GetParentRow(_relation, DataRowVersion.Original);

                        while (parent is not null&&traversedRows.ContainsKey(parent)==false)
                        {
                            distance=distance+1;
                            root=parent;
                            traversedRows[parent]=parent;
                            parent=parent.GetParentRow(_relation, DataRowVersion.Original);

                        }
                    }

                    return root;
                }

                [DebuggerNonUserCode()]
                [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
                public int Compare(DataRow row1, DataRow row2)
                {
                    if (ReferenceEquals(row1, row2))
                    {
                        return 0;
                    }
                    if (row1 is null)
                    {
                        return -1;
                    }
                    if (row2 is null)
                    {
                        return 1;
                    }

                    int distance1 = 0;
                    var root1 = GetRoot(row1, ref distance1);

                    int distance2 = 0;
                    var root2 = GetRoot(row2, ref distance2);

                    if (ReferenceEquals(root1, root2))
                    {
                        return _childFirst*distance1.CompareTo(distance2);
                    }
                    else
                    {
                        Debug.Assert(root1.Table is not null&&root2.Table is not null);
                        if (root1.Table.Rows.IndexOf(root1)<root2.Table.Rows.IndexOf(root2))
                        {
                            return -1;
                        }
                        else
                        {
                            return 1;
                        }
                    }
                }
            }
        }
    }
}