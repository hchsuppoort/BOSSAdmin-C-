// ------------------------------------------------------------------------------
// <auto-generated>
// This code was generated by a tool.
// Runtime Version:4.0.30319.42000
// 
// Changes to this file may cause incorrect behavior and will be lost if
// the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Data;
using System.Diagnostics;
using System.Runtime.CompilerServices;
using Microsoft.VisualBasic.CompilerServices;

namespace BossAdmin
{



    /// <summary>
/// Represents a strongly typed in-memory cache of data.
/// </summary>
    [Serializable()]
    [System.ComponentModel.DesignerCategory("code")]
    [System.ComponentModel.ToolboxItem(true)]
    [System.Xml.Serialization.XmlSchemaProvider("GetTypedDataSetSchema")]
    [System.Xml.Serialization.XmlRoot("HCHDataQADataSet2")]
    [System.ComponentModel.Design.HelpKeyword("vs.data.DataSet")]
    public partial class HCHDataQADataSet2 : DataSet
    {

        private spGetJobDataDataTable tablespGetJobData;

        private SchemaSerializationMode _schemaSerializationMode = SchemaSerializationMode.IncludeSchema;

        [DebuggerNonUserCode()]
        [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        public HCHDataQADataSet2() : base()
        {
            BeginInit();
            InitClass();
            System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = SchemaChanged;
            base.Tables.CollectionChanged+=schemaChangedHandler;
            base.Relations.CollectionChanged+=schemaChangedHandler;
            EndInit();
        }

        [DebuggerNonUserCode()]
        [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        protected HCHDataQADataSet2(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : base(info, context, false)
        {
            if (IsBinarySerialized(info, context)==true)
            {
                InitVars(false);
                System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler1 = SchemaChanged;
                Tables.CollectionChanged+=schemaChangedHandler1;
                Relations.CollectionChanged+=schemaChangedHandler1;
                return;
            }
            string strSchema = Conversions.ToString(info.GetValue("XmlSchema", typeof(string)));
            if (DetermineSchemaSerializationMode(info, context)==SchemaSerializationMode.IncludeSchema)
            {
                var ds = new DataSet();
                ds.ReadXmlSchema(new System.Xml.XmlTextReader(new System.IO.StringReader(strSchema)));
                if (ds.Tables["spGetJobData"] is not null)
                {
                    base.Tables.Add(new spGetJobDataDataTable(ds.Tables["spGetJobData"]));
                }
                DataSetName=ds.DataSetName;
                Prefix=ds.Prefix;
                Namespace=ds.Namespace;
                Locale=ds.Locale;
                CaseSensitive=ds.CaseSensitive;
                EnforceConstraints=ds.EnforceConstraints;
                Merge(ds, false, MissingSchemaAction.Add);
                InitVars();
            }
            else
            {
                ReadXmlSchema(new System.Xml.XmlTextReader(new System.IO.StringReader(strSchema)));
            }
            GetSerializationData(info, context);
            System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = SchemaChanged;
            base.Tables.CollectionChanged+=schemaChangedHandler;
            Relations.CollectionChanged+=schemaChangedHandler;
        }

        [DebuggerNonUserCode()]
        [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public spGetJobDataDataTable spGetJobData
        {
            get
            {
                return tablespGetJobData;
            }
        }

        [DebuggerNonUserCode()]
        [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        [System.ComponentModel.Browsable(true)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Visible)]
        public override SchemaSerializationMode SchemaSerializationMode
        {
            get
            {
                return _schemaSerializationMode;
            }
            set
            {
                _schemaSerializationMode=value;
            }
        }

        [DebuggerNonUserCode()]
        [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new DataTableCollection Tables
        {
            get
            {
                return base.Tables;
            }
        }

        [DebuggerNonUserCode()]
        [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new DataRelationCollection Relations
        {
            get
            {
                return base.Relations;
            }
        }

        [DebuggerNonUserCode()]
        [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        protected override void InitializeDerivedDataSet()
        {
            BeginInit();
            InitClass();
            EndInit();
        }

        [DebuggerNonUserCode()]
        [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        public override DataSet Clone()
        {
            HCHDataQADataSet2 cln = (HCHDataQADataSet2)base.Clone();
            cln.InitVars();
            cln.SchemaSerializationMode=SchemaSerializationMode;
            return cln;
        }

        [DebuggerNonUserCode()]
        [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        protected override bool ShouldSerializeTables()
        {
            return false;
        }

        [DebuggerNonUserCode()]
        [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        protected override bool ShouldSerializeRelations()
        {
            return false;
        }

        [DebuggerNonUserCode()]
        [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        protected override void ReadXmlSerializable(System.Xml.XmlReader reader)
        {
            if (DetermineSchemaSerializationMode(reader)==SchemaSerializationMode.IncludeSchema)
            {
                Reset();
                var ds = new DataSet();
                ds.ReadXml(reader);
                if (ds.Tables["spGetJobData"] is not null)
                {
                    base.Tables.Add(new spGetJobDataDataTable(ds.Tables["spGetJobData"]));
                }
                DataSetName=ds.DataSetName;
                Prefix=ds.Prefix;
                Namespace=ds.Namespace;
                Locale=ds.Locale;
                CaseSensitive=ds.CaseSensitive;
                EnforceConstraints=ds.EnforceConstraints;
                Merge(ds, false, MissingSchemaAction.Add);
                InitVars();
            }
            else
            {
                ReadXml(reader);
                InitVars();
            }
        }

        [DebuggerNonUserCode()]
        [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        protected override System.Xml.Schema.XmlSchema GetSchemaSerializable()
        {
            var stream = new System.IO.MemoryStream();
            WriteXmlSchema(new System.Xml.XmlTextWriter(stream, null));
            stream.Position=0L;
            return System.Xml.Schema.XmlSchema.Read(new System.Xml.XmlTextReader(stream), null);
        }

        [DebuggerNonUserCode()]
        [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        internal void InitVars()
        {
            InitVars(true);
        }

        [DebuggerNonUserCode()]
        [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        internal void InitVars(bool initTable)
        {
            tablespGetJobData=(spGetJobDataDataTable)base.Tables["spGetJobData"];
            if (initTable==true)
            {
                if (tablespGetJobData is not null)
                {
                    tablespGetJobData.InitVars();
                }
            }
        }

        [DebuggerNonUserCode()]
        [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        private void InitClass()
        {
            DataSetName="HCHDataQADataSet2";
            Prefix="";
            Namespace="http://tempuri.org/HCHDataQADataSet2.xsd";
            EnforceConstraints=true;
            SchemaSerializationMode=SchemaSerializationMode.IncludeSchema;
            tablespGetJobData=new spGetJobDataDataTable();
            base.Tables.Add(tablespGetJobData);
        }

        [DebuggerNonUserCode()]
        [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        private bool ShouldSerializespGetJobData()
        {
            return false;
        }

        [DebuggerNonUserCode()]
        [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        private void SchemaChanged(object sender, System.ComponentModel.CollectionChangeEventArgs e)
        {
            if (e.Action==System.ComponentModel.CollectionChangeAction.Remove)
            {
                InitVars();
            }
        }

        [DebuggerNonUserCode()]
        [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        public static System.Xml.Schema.XmlSchemaComplexType GetTypedDataSetSchema(System.Xml.Schema.XmlSchemaSet xs)
        {
            var ds = new HCHDataQADataSet2();
            var type = new System.Xml.Schema.XmlSchemaComplexType();
            var sequence = new System.Xml.Schema.XmlSchemaSequence();
            var any = new System.Xml.Schema.XmlSchemaAny();
            any.Namespace=ds.Namespace;
            sequence.Items.Add(any);
            type.Particle=sequence;
            var dsSchema = ds.GetSchemaSerializable();
            if (xs.Contains(dsSchema.TargetNamespace))
            {
                var s1 = new System.IO.MemoryStream();
                var s2 = new System.IO.MemoryStream();
                try
                {
                    System.Xml.Schema.XmlSchema schema = null;
                    dsSchema.Write(s1);
                    var schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator();
                    while (schemas.MoveNext())
                    {
                        schema=(System.Xml.Schema.XmlSchema)schemas.Current;
                        s2.SetLength(0L);
                        schema.Write(s2);
                        if (s1.Length==s2.Length)
                        {
                            s1.Position=0L;
                            s2.Position=0L;

                            while (s1.Position!=s1.Length&&s1.ReadByte()==s2.ReadByte())
                            {


                            }
                            if (s1.Position==s1.Length)
                            {
                                return type;
                            }
                        }

                    }
                }
                finally
                {
                    if (s1 is not null)
                    {
                        s1.Close();
                    }
                    if (s2 is not null)
                    {
                        s2.Close();
                    }
                }
            }
            xs.Add(dsSchema);
            return type;
        }

        [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        public delegate void spGetJobDataRowChangeEventHandler(object sender, spGetJobDataRowChangeEvent e);

        /// <summary>
    /// Represents the strongly named DataTable class.
    /// </summary>
        [Serializable()]
        [System.Xml.Serialization.XmlSchemaProvider("GetTypedTableSchema")]
        public partial class spGetJobDataDataTable : TypedTableBase<spGetJobDataRow>
        {

            private DataColumn columnID;

            private DataColumn columnJobID;

            private DataColumn columnProjectID;

            private DataColumn columnPlanID;

            private DataColumn columnJobName;

            private DataColumn columnAddress;

            private DataColumn columnCity;

            private DataColumn columnSt;

            private DataColumn columnZip;

            private DataColumn columnBlock;

            private DataColumn columnLot;

            private DataColumn columnEstimateComplete;

            private DataColumn columnStartDate;

            private DataColumn columnCompleteDate;

            private DataColumn columnCancelledDate;

            private DataColumn columnLotCostAdjustment;

            private DataColumn columnBuilderID;

            private DataColumn columnPOReleasePhase;

            private DataColumn columnHoldNextPhase;

            private DataColumn columnSiteSheetSent;

            private DataColumn columnSiteSheetReturned;

            private DataColumn columnCreatedDate;

            private DataColumn columnCreatedBy;

            private DataColumn columnUpdatedDate;

            private DataColumn columnUpdatedBy;

            private DataColumn columnPlanFile;

            private DataColumn columnReviewedBy;

            private DataColumn columnSquareFeet;

            private DataColumn columnLivingSpace;

            private DataColumn columnCID;

            private DataColumn columnReleasedAsSpec;

            private DataColumn columnHold;

            private DataColumn columnEnclosedSpace;

            private DataColumn columnPrice;

            private DataColumn columnReleaseDate;

            private DataColumn columnPlanFileDate;

            private DataColumn columnAdministrativeHold;

            private DataColumn columnReleaseToCAD;

            private DataColumn columnGarage;

            private DataColumn columnPermitNumber;

            private DataColumn columnNote;

            private DataColumn columnStatus;

            private DataColumn columnStatusID;

            private DataColumn columnmodel;

            private DataColumn columnFN;

            private DataColumn columnLN;

            private DataColumn columnSFN;

            private DataColumn columnSLN;

            private DataColumn columnABLegalDescription;

            private DataColumn columnHOP;

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public spGetJobDataDataTable() : base()
            {
                TableName="spGetJobData";
                BeginInit();
                InitClass();
                EndInit();
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            internal spGetJobDataDataTable(DataTable table) : base()
            {
                TableName=table.TableName;
                if (table.CaseSensitive!=table.DataSet.CaseSensitive)
                {
                    CaseSensitive=table.CaseSensitive;
                }
                if ((table.Locale.ToString()??"")!=(table.DataSet.Locale.ToString()??""))
                {
                    Locale=table.Locale;
                }
                if ((table.Namespace??"")!=(table.DataSet.Namespace??""))
                {
                    Namespace=table.Namespace;
                }
                Prefix=table.Prefix;
                MinimumCapacity=table.MinimumCapacity;
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            protected spGetJobDataDataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : base(info, context)
            {
                InitVars();
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public DataColumn IDColumn
            {
                get
                {
                    return columnID;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public DataColumn JobIDColumn
            {
                get
                {
                    return columnJobID;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public DataColumn ProjectIDColumn
            {
                get
                {
                    return columnProjectID;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public DataColumn PlanIDColumn
            {
                get
                {
                    return columnPlanID;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public DataColumn JobNameColumn
            {
                get
                {
                    return columnJobName;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public DataColumn AddressColumn
            {
                get
                {
                    return columnAddress;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public DataColumn CityColumn
            {
                get
                {
                    return columnCity;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public DataColumn StColumn
            {
                get
                {
                    return columnSt;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public DataColumn ZipColumn
            {
                get
                {
                    return columnZip;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public DataColumn BlockColumn
            {
                get
                {
                    return columnBlock;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public DataColumn LotColumn
            {
                get
                {
                    return columnLot;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public DataColumn EstimateCompleteColumn
            {
                get
                {
                    return columnEstimateComplete;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public DataColumn StartDateColumn
            {
                get
                {
                    return columnStartDate;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public DataColumn CompleteDateColumn
            {
                get
                {
                    return columnCompleteDate;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public DataColumn CancelledDateColumn
            {
                get
                {
                    return columnCancelledDate;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public DataColumn LotCostAdjustmentColumn
            {
                get
                {
                    return columnLotCostAdjustment;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public DataColumn BuilderIDColumn
            {
                get
                {
                    return columnBuilderID;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public DataColumn POReleasePhaseColumn
            {
                get
                {
                    return columnPOReleasePhase;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public DataColumn HoldNextPhaseColumn
            {
                get
                {
                    return columnHoldNextPhase;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public DataColumn SiteSheetSentColumn
            {
                get
                {
                    return columnSiteSheetSent;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public DataColumn SiteSheetReturnedColumn
            {
                get
                {
                    return columnSiteSheetReturned;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public DataColumn CreatedDateColumn
            {
                get
                {
                    return columnCreatedDate;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public DataColumn CreatedByColumn
            {
                get
                {
                    return columnCreatedBy;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public DataColumn UpdatedDateColumn
            {
                get
                {
                    return columnUpdatedDate;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public DataColumn UpdatedByColumn
            {
                get
                {
                    return columnUpdatedBy;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public DataColumn PlanFileColumn
            {
                get
                {
                    return columnPlanFile;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public DataColumn ReviewedByColumn
            {
                get
                {
                    return columnReviewedBy;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public DataColumn SquareFeetColumn
            {
                get
                {
                    return columnSquareFeet;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public DataColumn LivingSpaceColumn
            {
                get
                {
                    return columnLivingSpace;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public DataColumn CIDColumn
            {
                get
                {
                    return columnCID;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public DataColumn ReleasedAsSpecColumn
            {
                get
                {
                    return columnReleasedAsSpec;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public DataColumn HoldColumn
            {
                get
                {
                    return columnHold;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public DataColumn EnclosedSpaceColumn
            {
                get
                {
                    return columnEnclosedSpace;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public DataColumn PriceColumn
            {
                get
                {
                    return columnPrice;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public DataColumn ReleaseDateColumn
            {
                get
                {
                    return columnReleaseDate;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public DataColumn PlanFileDateColumn
            {
                get
                {
                    return columnPlanFileDate;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public DataColumn AdministrativeHoldColumn
            {
                get
                {
                    return columnAdministrativeHold;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public DataColumn ReleaseToCADColumn
            {
                get
                {
                    return columnReleaseToCAD;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public DataColumn GarageColumn
            {
                get
                {
                    return columnGarage;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public DataColumn PermitNumberColumn
            {
                get
                {
                    return columnPermitNumber;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public DataColumn NoteColumn
            {
                get
                {
                    return columnNote;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public DataColumn StatusColumn
            {
                get
                {
                    return columnStatus;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public DataColumn StatusIDColumn
            {
                get
                {
                    return columnStatusID;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public DataColumn modelColumn
            {
                get
                {
                    return columnmodel;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public DataColumn FNColumn
            {
                get
                {
                    return columnFN;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public DataColumn LNColumn
            {
                get
                {
                    return columnLN;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public DataColumn SFNColumn
            {
                get
                {
                    return columnSFN;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public DataColumn SLNColumn
            {
                get
                {
                    return columnSLN;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public DataColumn ABLegalDescriptionColumn
            {
                get
                {
                    return columnABLegalDescription;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public DataColumn HOPColumn
            {
                get
                {
                    return columnHOP;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            [System.ComponentModel.Browsable(false)]
            public int Count
            {
                get
                {
                    return Rows.Count;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public spGetJobDataRow this[int index]
            {
                get
                {
                    return (spGetJobDataRow)Rows[index];
                }
            }

            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public event spGetJobDataRowChangeEventHandler spGetJobDataRowChanging;

            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public event spGetJobDataRowChangeEventHandler spGetJobDataRowChanged;

            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public event spGetJobDataRowChangeEventHandler spGetJobDataRowDeleting;

            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public event spGetJobDataRowChangeEventHandler spGetJobDataRowDeleted;

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public void AddspGetJobDataRow(spGetJobDataRow row)
            {
                Rows.Add(row);
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public spGetJobDataRow AddspGetJobDataRow(string JobID, string ProjectID, string PlanID, string JobName, string Address, string City, string St, string Zip, string Block, string Lot, DateTime EstimateComplete, DateTime StartDate, DateTime CompleteDate, DateTime CancelledDate, decimal LotCostAdjustment, int BuilderID, byte POReleasePhase, bool HoldNextPhase, DateTime SiteSheetSent, DateTime SiteSheetReturned, DateTime CreatedDate, string CreatedBy, DateTime UpdatedDate, string UpdatedBy, string PlanFile, string ReviewedBy, int SquareFeet, int LivingSpace, byte ReleasedAsSpec, byte Hold, int EnclosedSpace, decimal Price, DateTime ReleaseDate, DateTime PlanFileDate, byte AdministrativeHold, DateTime ReleaseToCAD, int Garage, string PermitNumber, string Note, string Status, byte StatusID, byte model, string FN, string LN, string SFN, string SLN, string ABLegalDescription, bool HOP)















































            {
                spGetJobDataRow rowspGetJobDataRow = (spGetJobDataRow)NewRow();
                object[] columnValuesArray = new object[] { null, JobID, ProjectID, PlanID, JobName, Address, City, St, Zip, Block, Lot, EstimateComplete, StartDate, CompleteDate, CancelledDate, LotCostAdjustment, BuilderID, POReleasePhase, HoldNextPhase, SiteSheetSent, SiteSheetReturned, CreatedDate, CreatedBy, UpdatedDate, UpdatedBy, PlanFile, ReviewedBy, SquareFeet, LivingSpace, null, ReleasedAsSpec, Hold, EnclosedSpace, Price, ReleaseDate, PlanFileDate, AdministrativeHold, ReleaseToCAD, Garage, PermitNumber, Note, Status, StatusID, model, FN, LN, SFN, SLN, ABLegalDescription, HOP };
                rowspGetJobDataRow.ItemArray=columnValuesArray;
                Rows.Add(rowspGetJobDataRow);
                return rowspGetJobDataRow;
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public override DataTable Clone()
            {
                spGetJobDataDataTable cln = (spGetJobDataDataTable)base.Clone();
                cln.InitVars();
                return cln;
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            protected override DataTable CreateInstance()
            {
                return new spGetJobDataDataTable();
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            internal void InitVars()
            {
                columnID=Columns["ID"];
                columnJobID=Columns["JobID"];
                columnProjectID=Columns["ProjectID"];
                columnPlanID=Columns["PlanID"];
                columnJobName=Columns["JobName"];
                columnAddress=Columns["Address"];
                columnCity=Columns["City"];
                columnSt=Columns["St"];
                columnZip=Columns["Zip"];
                columnBlock=Columns["Block"];
                columnLot=Columns["Lot"];
                columnEstimateComplete=Columns["EstimateComplete"];
                columnStartDate=Columns["StartDate"];
                columnCompleteDate=Columns["CompleteDate"];
                columnCancelledDate=Columns["CancelledDate"];
                columnLotCostAdjustment=Columns["LotCostAdjustment"];
                columnBuilderID=Columns["BuilderID"];
                columnPOReleasePhase=Columns["POReleasePhase"];
                columnHoldNextPhase=Columns["HoldNextPhase"];
                columnSiteSheetSent=Columns["SiteSheetSent"];
                columnSiteSheetReturned=Columns["SiteSheetReturned"];
                columnCreatedDate=Columns["CreatedDate"];
                columnCreatedBy=Columns["CreatedBy"];
                columnUpdatedDate=Columns["UpdatedDate"];
                columnUpdatedBy=Columns["UpdatedBy"];
                columnPlanFile=Columns["PlanFile"];
                columnReviewedBy=Columns["ReviewedBy"];
                columnSquareFeet=Columns["SquareFeet"];
                columnLivingSpace=Columns["LivingSpace"];
                columnCID=Columns["CID"];
                columnReleasedAsSpec=Columns["ReleasedAsSpec"];
                columnHold=Columns["Hold"];
                columnEnclosedSpace=Columns["EnclosedSpace"];
                columnPrice=Columns["Price"];
                columnReleaseDate=Columns["ReleaseDate"];
                columnPlanFileDate=Columns["PlanFileDate"];
                columnAdministrativeHold=Columns["AdministrativeHold"];
                columnReleaseToCAD=Columns["ReleaseToCAD"];
                columnGarage=Columns["Garage"];
                columnPermitNumber=Columns["PermitNumber"];
                columnNote=Columns["Note"];
                columnStatus=Columns["Status"];
                columnStatusID=Columns["StatusID"];
                columnmodel=Columns["model"];
                columnFN=Columns["FN"];
                columnLN=Columns["LN"];
                columnSFN=Columns["SFN"];
                columnSLN=Columns["SLN"];
                columnABLegalDescription=Columns["ABLegalDescription"];
                columnHOP=Columns["HOP"];
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            private void InitClass()
            {
                columnID=new DataColumn("ID", typeof(int), null, MappingType.Element);
                Columns.Add(columnID);
                columnJobID=new DataColumn("JobID", typeof(string), null, MappingType.Element);
                Columns.Add(columnJobID);
                columnProjectID=new DataColumn("ProjectID", typeof(string), null, MappingType.Element);
                Columns.Add(columnProjectID);
                columnPlanID=new DataColumn("PlanID", typeof(string), null, MappingType.Element);
                Columns.Add(columnPlanID);
                columnJobName=new DataColumn("JobName", typeof(string), null, MappingType.Element);
                Columns.Add(columnJobName);
                columnAddress=new DataColumn("Address", typeof(string), null, MappingType.Element);
                Columns.Add(columnAddress);
                columnCity=new DataColumn("City", typeof(string), null, MappingType.Element);
                Columns.Add(columnCity);
                columnSt=new DataColumn("St", typeof(string), null, MappingType.Element);
                Columns.Add(columnSt);
                columnZip=new DataColumn("Zip", typeof(string), null, MappingType.Element);
                Columns.Add(columnZip);
                columnBlock=new DataColumn("Block", typeof(string), null, MappingType.Element);
                Columns.Add(columnBlock);
                columnLot=new DataColumn("Lot", typeof(string), null, MappingType.Element);
                Columns.Add(columnLot);
                columnEstimateComplete=new DataColumn("EstimateComplete", typeof(DateTime), null, MappingType.Element);
                Columns.Add(columnEstimateComplete);
                columnStartDate=new DataColumn("StartDate", typeof(DateTime), null, MappingType.Element);
                Columns.Add(columnStartDate);
                columnCompleteDate=new DataColumn("CompleteDate", typeof(DateTime), null, MappingType.Element);
                Columns.Add(columnCompleteDate);
                columnCancelledDate=new DataColumn("CancelledDate", typeof(DateTime), null, MappingType.Element);
                Columns.Add(columnCancelledDate);
                columnLotCostAdjustment=new DataColumn("LotCostAdjustment", typeof(decimal), null, MappingType.Element);
                Columns.Add(columnLotCostAdjustment);
                columnBuilderID=new DataColumn("BuilderID", typeof(int), null, MappingType.Element);
                Columns.Add(columnBuilderID);
                columnPOReleasePhase=new DataColumn("POReleasePhase", typeof(byte), null, MappingType.Element);
                Columns.Add(columnPOReleasePhase);
                columnHoldNextPhase=new DataColumn("HoldNextPhase", typeof(bool), null, MappingType.Element);
                Columns.Add(columnHoldNextPhase);
                columnSiteSheetSent=new DataColumn("SiteSheetSent", typeof(DateTime), null, MappingType.Element);
                Columns.Add(columnSiteSheetSent);
                columnSiteSheetReturned=new DataColumn("SiteSheetReturned", typeof(DateTime), null, MappingType.Element);
                Columns.Add(columnSiteSheetReturned);
                columnCreatedDate=new DataColumn("CreatedDate", typeof(DateTime), null, MappingType.Element);
                Columns.Add(columnCreatedDate);
                columnCreatedBy=new DataColumn("CreatedBy", typeof(string), null, MappingType.Element);
                Columns.Add(columnCreatedBy);
                columnUpdatedDate=new DataColumn("UpdatedDate", typeof(DateTime), null, MappingType.Element);
                Columns.Add(columnUpdatedDate);
                columnUpdatedBy=new DataColumn("UpdatedBy", typeof(string), null, MappingType.Element);
                Columns.Add(columnUpdatedBy);
                columnPlanFile=new DataColumn("PlanFile", typeof(string), null, MappingType.Element);
                Columns.Add(columnPlanFile);
                columnReviewedBy=new DataColumn("ReviewedBy", typeof(string), null, MappingType.Element);
                Columns.Add(columnReviewedBy);
                columnSquareFeet=new DataColumn("SquareFeet", typeof(int), null, MappingType.Element);
                Columns.Add(columnSquareFeet);
                columnLivingSpace=new DataColumn("LivingSpace", typeof(int), null, MappingType.Element);
                Columns.Add(columnLivingSpace);
                columnCID=new DataColumn("CID", typeof(int), null, MappingType.Element);
                Columns.Add(columnCID);
                columnReleasedAsSpec=new DataColumn("ReleasedAsSpec", typeof(byte), null, MappingType.Element);
                Columns.Add(columnReleasedAsSpec);
                columnHold=new DataColumn("Hold", typeof(byte), null, MappingType.Element);
                Columns.Add(columnHold);
                columnEnclosedSpace=new DataColumn("EnclosedSpace", typeof(int), null, MappingType.Element);
                Columns.Add(columnEnclosedSpace);
                columnPrice=new DataColumn("Price", typeof(decimal), null, MappingType.Element);
                Columns.Add(columnPrice);
                columnReleaseDate=new DataColumn("ReleaseDate", typeof(DateTime), null, MappingType.Element);
                Columns.Add(columnReleaseDate);
                columnPlanFileDate=new DataColumn("PlanFileDate", typeof(DateTime), null, MappingType.Element);
                Columns.Add(columnPlanFileDate);
                columnAdministrativeHold=new DataColumn("AdministrativeHold", typeof(byte), null, MappingType.Element);
                Columns.Add(columnAdministrativeHold);
                columnReleaseToCAD=new DataColumn("ReleaseToCAD", typeof(DateTime), null, MappingType.Element);
                Columns.Add(columnReleaseToCAD);
                columnGarage=new DataColumn("Garage", typeof(int), null, MappingType.Element);
                Columns.Add(columnGarage);
                columnPermitNumber=new DataColumn("PermitNumber", typeof(string), null, MappingType.Element);
                Columns.Add(columnPermitNumber);
                columnNote=new DataColumn("Note", typeof(string), null, MappingType.Element);
                Columns.Add(columnNote);
                columnStatus=new DataColumn("Status", typeof(string), null, MappingType.Element);
                Columns.Add(columnStatus);
                columnStatusID=new DataColumn("StatusID", typeof(byte), null, MappingType.Element);
                Columns.Add(columnStatusID);
                columnmodel=new DataColumn("model", typeof(byte), null, MappingType.Element);
                Columns.Add(columnmodel);
                columnFN=new DataColumn("FN", typeof(string), null, MappingType.Element);
                Columns.Add(columnFN);
                columnLN=new DataColumn("LN", typeof(string), null, MappingType.Element);
                Columns.Add(columnLN);
                columnSFN=new DataColumn("SFN", typeof(string), null, MappingType.Element);
                Columns.Add(columnSFN);
                columnSLN=new DataColumn("SLN", typeof(string), null, MappingType.Element);
                Columns.Add(columnSLN);
                columnABLegalDescription=new DataColumn("ABLegalDescription", typeof(string), null, MappingType.Element);
                Columns.Add(columnABLegalDescription);
                columnHOP=new DataColumn("HOP", typeof(bool), null, MappingType.Element);
                Columns.Add(columnHOP);
                columnID.AutoIncrement=true;
                columnID.AllowDBNull=false;
                columnID.ReadOnly=true;
                columnJobID.AllowDBNull=false;
                columnJobID.MaxLength=20;
                columnProjectID.MaxLength=5;
                columnPlanID.MaxLength=10;
                columnJobName.ReadOnly=true;
                columnJobName.MaxLength=207;
                columnAddress.MaxLength=50;
                columnCity.MaxLength=30;
                columnSt.MaxLength=2;
                columnZip.MaxLength=10;
                columnBlock.MaxLength=10;
                columnLot.MaxLength=10;
                columnCreatedBy.MaxLength=10;
                columnUpdatedBy.MaxLength=10;
                columnPlanFile.MaxLength=100;
                columnReviewedBy.MaxLength=10;
                columnCID.AutoIncrement=true;
                columnCID.ReadOnly=true;
                columnPermitNumber.MaxLength=20;
                columnNote.MaxLength=2000;
                columnStatus.ReadOnly=true;
                columnStatus.MaxLength=50;
                columnStatusID.ReadOnly=true;
                columnmodel.AllowDBNull=false;
                columnFN.ReadOnly=true;
                columnFN.MaxLength=50;
                columnLN.ReadOnly=true;
                columnLN.MaxLength=50;
                columnSFN.ReadOnly=true;
                columnSFN.MaxLength=50;
                columnSLN.ReadOnly=true;
                columnSLN.MaxLength=50;
                columnABLegalDescription.MaxLength=50;
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public spGetJobDataRow NewspGetJobDataRow()
            {
                return (spGetJobDataRow)NewRow();
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder)
            {
                return new spGetJobDataRow(builder);
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            protected override Type GetRowType()
            {
                return typeof(spGetJobDataRow);
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            protected override void OnRowChanged(DataRowChangeEventArgs e)
            {
                base.OnRowChanged(e);
                if (spGetJobDataRowChanged is not null)
                {
                    spGetJobDataRowChanged?.Invoke(this, new spGetJobDataRowChangeEvent((spGetJobDataRow)e.Row, e.Action));
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            protected override void OnRowChanging(DataRowChangeEventArgs e)
            {
                base.OnRowChanging(e);
                if (spGetJobDataRowChanging is not null)
                {
                    spGetJobDataRowChanging?.Invoke(this, new spGetJobDataRowChangeEvent((spGetJobDataRow)e.Row, e.Action));
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            protected override void OnRowDeleted(DataRowChangeEventArgs e)
            {
                base.OnRowDeleted(e);
                if (spGetJobDataRowDeleted is not null)
                {
                    spGetJobDataRowDeleted?.Invoke(this, new spGetJobDataRowChangeEvent((spGetJobDataRow)e.Row, e.Action));
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            protected override void OnRowDeleting(DataRowChangeEventArgs e)
            {
                base.OnRowDeleting(e);
                if (spGetJobDataRowDeleting is not null)
                {
                    spGetJobDataRowDeleting?.Invoke(this, new spGetJobDataRowChangeEvent((spGetJobDataRow)e.Row, e.Action));
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public void RemovespGetJobDataRow(spGetJobDataRow row)
            {
                Rows.Remove(row);
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs)
            {
                var type = new System.Xml.Schema.XmlSchemaComplexType();
                var sequence = new System.Xml.Schema.XmlSchemaSequence();
                var ds = new HCHDataQADataSet2();
                var any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace="http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs=new decimal(0);
                any1.MaxOccurs=decimal.MaxValue;
                any1.ProcessContents=System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                var any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace="urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs=new decimal(1);
                any2.ProcessContents=System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                var attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name="namespace";
                attribute1.FixedValue=ds.Namespace;
                type.Attributes.Add(attribute1);
                var attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name="tableTypeName";
                attribute2.FixedValue="spGetJobDataDataTable";
                type.Attributes.Add(attribute2);
                type.Particle=sequence;
                var dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace))
                {
                    var s1 = new System.IO.MemoryStream();
                    var s2 = new System.IO.MemoryStream();
                    try
                    {
                        System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        var schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator();
                        while (schemas.MoveNext())
                        {
                            schema=(System.Xml.Schema.XmlSchema)schemas.Current;
                            s2.SetLength(0L);
                            schema.Write(s2);
                            if (s1.Length==s2.Length)
                            {
                                s1.Position=0L;
                                s2.Position=0L;

                                while (s1.Position!=s1.Length&&s1.ReadByte()==s2.ReadByte())
                                {


                                }
                                if (s1.Position==s1.Length)
                                {
                                    return type;
                                }
                            }

                        }
                    }
                    finally
                    {
                        if (s1 is not null)
                        {
                            s1.Close();
                        }
                        if (s2 is not null)
                        {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }

        /// <summary>
    /// Represents strongly named DataRow class.
    /// </summary>
        public partial class spGetJobDataRow : DataRow
        {

            private spGetJobDataDataTable tablespGetJobData;

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            internal spGetJobDataRow(DataRowBuilder rb) : base(rb)
            {
                tablespGetJobData=(spGetJobDataDataTable)Table;
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public int ID
            {
                get
                {
                    return (int)(this[tablespGetJobData.IDColumn]);
                }
                set
                {
                    this[tablespGetJobData.IDColumn]=value;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public string JobID
            {
                get
                {
                    return Conversions.ToString(this[tablespGetJobData.JobIDColumn]);
                }
                set
                {
                    this[tablespGetJobData.JobIDColumn]=value;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public string ProjectID
            {
                get
                {
                    try
                    {
                        return Conversions.ToString(this[tablespGetJobData.ProjectIDColumn]);
                    }
                    catch (InvalidCastException e)
                    {
                        throw new StrongTypingException("The value for column 'ProjectID' in table 'spGetJobData' is DBNull.", e);
                    }
                }
                set
                {
                    this[tablespGetJobData.ProjectIDColumn]=value;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public string PlanID
            {
                get
                {
                    try
                    {
                        return Conversions.ToString(this[tablespGetJobData.PlanIDColumn]);
                    }
                    catch (InvalidCastException e)
                    {
                        throw new StrongTypingException("The value for column 'PlanID' in table 'spGetJobData' is DBNull.", e);
                    }
                }
                set
                {
                    this[tablespGetJobData.PlanIDColumn]=value;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public string JobName
            {
                get
                {
                    try
                    {
                        return Conversions.ToString(this[tablespGetJobData.JobNameColumn]);
                    }
                    catch (InvalidCastException e)
                    {
                        throw new StrongTypingException("The value for column 'JobName' in table 'spGetJobData' is DBNull.", e);
                    }
                }
                set
                {
                    this[tablespGetJobData.JobNameColumn]=value;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public string Address
            {
                get
                {
                    try
                    {
                        return Conversions.ToString(this[tablespGetJobData.AddressColumn]);
                    }
                    catch (InvalidCastException e)
                    {
                        throw new StrongTypingException("The value for column 'Address' in table 'spGetJobData' is DBNull.", e);
                    }
                }
                set
                {
                    this[tablespGetJobData.AddressColumn]=value;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public string City
            {
                get
                {
                    try
                    {
                        return Conversions.ToString(this[tablespGetJobData.CityColumn]);
                    }
                    catch (InvalidCastException e)
                    {
                        throw new StrongTypingException("The value for column 'City' in table 'spGetJobData' is DBNull.", e);
                    }
                }
                set
                {
                    this[tablespGetJobData.CityColumn]=value;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public string St
            {
                get
                {
                    try
                    {
                        return Conversions.ToString(this[tablespGetJobData.StColumn]);
                    }
                    catch (InvalidCastException e)
                    {
                        throw new StrongTypingException("The value for column 'St' in table 'spGetJobData' is DBNull.", e);
                    }
                }
                set
                {
                    this[tablespGetJobData.StColumn]=value;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public string Zip
            {
                get
                {
                    try
                    {
                        return Conversions.ToString(this[tablespGetJobData.ZipColumn]);
                    }
                    catch (InvalidCastException e)
                    {
                        throw new StrongTypingException("The value for column 'Zip' in table 'spGetJobData' is DBNull.", e);
                    }
                }
                set
                {
                    this[tablespGetJobData.ZipColumn]=value;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public string Block
            {
                get
                {
                    try
                    {
                        return Conversions.ToString(this[tablespGetJobData.BlockColumn]);
                    }
                    catch (InvalidCastException e)
                    {
                        throw new StrongTypingException("The value for column 'Block' in table 'spGetJobData' is DBNull.", e);
                    }
                }
                set
                {
                    this[tablespGetJobData.BlockColumn]=value;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public string Lot
            {
                get
                {
                    try
                    {
                        return Conversions.ToString(this[tablespGetJobData.LotColumn]);
                    }
                    catch (InvalidCastException e)
                    {
                        throw new StrongTypingException("The value for column 'Lot' in table 'spGetJobData' is DBNull.", e);
                    }
                }
                set
                {
                    this[tablespGetJobData.LotColumn]=value;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public DateTime EstimateComplete
            {
                get
                {
                    try
                    {
                        return Conversions.ToDate(this[tablespGetJobData.EstimateCompleteColumn]);
                    }
                    catch (InvalidCastException e)
                    {
                        throw new StrongTypingException("The value for column 'EstimateComplete' in table 'spGetJobData' is DBNull.", e);
                    }
                }
                set
                {
                    this[tablespGetJobData.EstimateCompleteColumn]=value;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public DateTime StartDate
            {
                get
                {
                    try
                    {
                        return Conversions.ToDate(this[tablespGetJobData.StartDateColumn]);
                    }
                    catch (InvalidCastException e)
                    {
                        throw new StrongTypingException("The value for column 'StartDate' in table 'spGetJobData' is DBNull.", e);
                    }
                }
                set
                {
                    this[tablespGetJobData.StartDateColumn]=value;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public DateTime CompleteDate
            {
                get
                {
                    try
                    {
                        return Conversions.ToDate(this[tablespGetJobData.CompleteDateColumn]);
                    }
                    catch (InvalidCastException e)
                    {
                        throw new StrongTypingException("The value for column 'CompleteDate' in table 'spGetJobData' is DBNull.", e);
                    }
                }
                set
                {
                    this[tablespGetJobData.CompleteDateColumn]=value;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public DateTime CancelledDate
            {
                get
                {
                    try
                    {
                        return Conversions.ToDate(this[tablespGetJobData.CancelledDateColumn]);
                    }
                    catch (InvalidCastException e)
                    {
                        throw new StrongTypingException("The value for column 'CancelledDate' in table 'spGetJobData' is DBNull.", e);
                    }
                }
                set
                {
                    this[tablespGetJobData.CancelledDateColumn]=value;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public decimal LotCostAdjustment
            {
                get
                {
                    try
                    {
                        return Conversions.ToDecimal(this[tablespGetJobData.LotCostAdjustmentColumn]);
                    }
                    catch (InvalidCastException e)
                    {
                        throw new StrongTypingException("The value for column 'LotCostAdjustment' in table 'spGetJobData' is DBNull.", e);
                    }
                }
                set
                {
                    this[tablespGetJobData.LotCostAdjustmentColumn]=value;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public int BuilderID
            {
                get
                {
                    try
                    {
                        return (int)(this[tablespGetJobData.BuilderIDColumn]);
                    }
                    catch (InvalidCastException e)
                    {
                        throw new StrongTypingException("The value for column 'BuilderID' in table 'spGetJobData' is DBNull.", e);
                    }
                }
                set
                {
                    this[tablespGetJobData.BuilderIDColumn]=value;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public byte POReleasePhase
            {
                get
                {
                    try
                    {
                        return Conversions.ToByte(this[tablespGetJobData.POReleasePhaseColumn]);
                    }
                    catch (InvalidCastException e)
                    {
                        throw new StrongTypingException("The value for column 'POReleasePhase' in table 'spGetJobData' is DBNull.", e);
                    }
                }
                set
                {
                    this[tablespGetJobData.POReleasePhaseColumn]=value;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public bool HoldNextPhase
            {
                get
                {
                    try
                    {
                        return Conversions.ToBoolean(this[tablespGetJobData.HoldNextPhaseColumn]);
                    }
                    catch (InvalidCastException e)
                    {
                        throw new StrongTypingException("The value for column 'HoldNextPhase' in table 'spGetJobData' is DBNull.", e);
                    }
                }
                set
                {
                    this[tablespGetJobData.HoldNextPhaseColumn]=value;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public DateTime SiteSheetSent
            {
                get
                {
                    try
                    {
                        return Conversions.ToDate(this[tablespGetJobData.SiteSheetSentColumn]);
                    }
                    catch (InvalidCastException e)
                    {
                        throw new StrongTypingException("The value for column 'SiteSheetSent' in table 'spGetJobData' is DBNull.", e);
                    }
                }
                set
                {
                    this[tablespGetJobData.SiteSheetSentColumn]=value;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public DateTime SiteSheetReturned
            {
                get
                {
                    try
                    {
                        return Conversions.ToDate(this[tablespGetJobData.SiteSheetReturnedColumn]);
                    }
                    catch (InvalidCastException e)
                    {
                        throw new StrongTypingException("The value for column 'SiteSheetReturned' in table 'spGetJobData' is DBNull.", e);
                    }
                }
                set
                {
                    this[tablespGetJobData.SiteSheetReturnedColumn]=value;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public DateTime CreatedDate
            {
                get
                {
                    try
                    {
                        return Conversions.ToDate(this[tablespGetJobData.CreatedDateColumn]);
                    }
                    catch (InvalidCastException e)
                    {
                        throw new StrongTypingException("The value for column 'CreatedDate' in table 'spGetJobData' is DBNull.", e);
                    }
                }
                set
                {
                    this[tablespGetJobData.CreatedDateColumn]=value;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public string CreatedBy
            {
                get
                {
                    try
                    {
                        return Conversions.ToString(this[tablespGetJobData.CreatedByColumn]);
                    }
                    catch (InvalidCastException e)
                    {
                        throw new StrongTypingException("The value for column 'CreatedBy' in table 'spGetJobData' is DBNull.", e);
                    }
                }
                set
                {
                    this[tablespGetJobData.CreatedByColumn]=value;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public DateTime UpdatedDate
            {
                get
                {
                    try
                    {
                        return Conversions.ToDate(this[tablespGetJobData.UpdatedDateColumn]);
                    }
                    catch (InvalidCastException e)
                    {
                        throw new StrongTypingException("The value for column 'UpdatedDate' in table 'spGetJobData' is DBNull.", e);
                    }
                }
                set
                {
                    this[tablespGetJobData.UpdatedDateColumn]=value;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public string UpdatedBy
            {
                get
                {
                    try
                    {
                        return Conversions.ToString(this[tablespGetJobData.UpdatedByColumn]);
                    }
                    catch (InvalidCastException e)
                    {
                        throw new StrongTypingException("The value for column 'UpdatedBy' in table 'spGetJobData' is DBNull.", e);
                    }
                }
                set
                {
                    this[tablespGetJobData.UpdatedByColumn]=value;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public string PlanFile
            {
                get
                {
                    try
                    {
                        return Conversions.ToString(this[tablespGetJobData.PlanFileColumn]);
                    }
                    catch (InvalidCastException e)
                    {
                        throw new StrongTypingException("The value for column 'PlanFile' in table 'spGetJobData' is DBNull.", e);
                    }
                }
                set
                {
                    this[tablespGetJobData.PlanFileColumn]=value;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public string ReviewedBy
            {
                get
                {
                    try
                    {
                        return Conversions.ToString(this[tablespGetJobData.ReviewedByColumn]);
                    }
                    catch (InvalidCastException e)
                    {
                        throw new StrongTypingException("The value for column 'ReviewedBy' in table 'spGetJobData' is DBNull.", e);
                    }
                }
                set
                {
                    this[tablespGetJobData.ReviewedByColumn]=value;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public int SquareFeet
            {
                get
                {
                    try
                    {
                        return (int)(this[tablespGetJobData.SquareFeetColumn]);
                    }
                    catch (InvalidCastException e)
                    {
                        throw new StrongTypingException("The value for column 'SquareFeet' in table 'spGetJobData' is DBNull.", e);
                    }
                }
                set
                {
                    this[tablespGetJobData.SquareFeetColumn]=value;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public int LivingSpace
            {
                get
                {
                    try
                    {
                        return (int)(this[tablespGetJobData.LivingSpaceColumn]);
                    }
                    catch (InvalidCastException e)
                    {
                        throw new StrongTypingException("The value for column 'LivingSpace' in table 'spGetJobData' is DBNull.", e);
                    }
                }
                set
                {
                    this[tablespGetJobData.LivingSpaceColumn]=value;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public int CID
            {
                get
                {
                    try
                    {
                        return (int)(this[tablespGetJobData.CIDColumn]);
                    }
                    catch (InvalidCastException e)
                    {
                        throw new StrongTypingException("The value for column 'CID' in table 'spGetJobData' is DBNull.", e);
                    }
                }
                set
                {
                    this[tablespGetJobData.CIDColumn]=value;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public byte ReleasedAsSpec
            {
                get
                {
                    try
                    {
                        return Conversions.ToByte(this[tablespGetJobData.ReleasedAsSpecColumn]);
                    }
                    catch (InvalidCastException e)
                    {
                        throw new StrongTypingException("The value for column 'ReleasedAsSpec' in table 'spGetJobData' is DBNull.", e);
                    }
                }
                set
                {
                    this[tablespGetJobData.ReleasedAsSpecColumn]=value;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public byte Hold
            {
                get
                {
                    try
                    {
                        return Conversions.ToByte(this[tablespGetJobData.HoldColumn]);
                    }
                    catch (InvalidCastException e)
                    {
                        throw new StrongTypingException("The value for column 'Hold' in table 'spGetJobData' is DBNull.", e);
                    }
                }
                set
                {
                    this[tablespGetJobData.HoldColumn]=value;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public int EnclosedSpace
            {
                get
                {
                    try
                    {
                        return (int)(this[tablespGetJobData.EnclosedSpaceColumn]);
                    }
                    catch (InvalidCastException e)
                    {
                        throw new StrongTypingException("The value for column 'EnclosedSpace' in table 'spGetJobData' is DBNull.", e);
                    }
                }
                set
                {
                    this[tablespGetJobData.EnclosedSpaceColumn]=value;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public decimal Price
            {
                get
                {
                    try
                    {
                        return Conversions.ToDecimal(this[tablespGetJobData.PriceColumn]);
                    }
                    catch (InvalidCastException e)
                    {
                        throw new StrongTypingException("The value for column 'Price' in table 'spGetJobData' is DBNull.", e);
                    }
                }
                set
                {
                    this[tablespGetJobData.PriceColumn]=value;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public DateTime ReleaseDate
            {
                get
                {
                    try
                    {
                        return Conversions.ToDate(this[tablespGetJobData.ReleaseDateColumn]);
                    }
                    catch (InvalidCastException e)
                    {
                        throw new StrongTypingException("The value for column 'ReleaseDate' in table 'spGetJobData' is DBNull.", e);
                    }
                }
                set
                {
                    this[tablespGetJobData.ReleaseDateColumn]=value;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public DateTime PlanFileDate
            {
                get
                {
                    try
                    {
                        return Conversions.ToDate(this[tablespGetJobData.PlanFileDateColumn]);
                    }
                    catch (InvalidCastException e)
                    {
                        throw new StrongTypingException("The value for column 'PlanFileDate' in table 'spGetJobData' is DBNull.", e);
                    }
                }
                set
                {
                    this[tablespGetJobData.PlanFileDateColumn]=value;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public byte AdministrativeHold
            {
                get
                {
                    try
                    {
                        return Conversions.ToByte(this[tablespGetJobData.AdministrativeHoldColumn]);
                    }
                    catch (InvalidCastException e)
                    {
                        throw new StrongTypingException("The value for column 'AdministrativeHold' in table 'spGetJobData' is DBNull.", e);
                    }
                }
                set
                {
                    this[tablespGetJobData.AdministrativeHoldColumn]=value;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public DateTime ReleaseToCAD
            {
                get
                {
                    try
                    {
                        return Conversions.ToDate(this[tablespGetJobData.ReleaseToCADColumn]);
                    }
                    catch (InvalidCastException e)
                    {
                        throw new StrongTypingException("The value for column 'ReleaseToCAD' in table 'spGetJobData' is DBNull.", e);
                    }
                }
                set
                {
                    this[tablespGetJobData.ReleaseToCADColumn]=value;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public int Garage
            {
                get
                {
                    try
                    {
                        return (int)(this[tablespGetJobData.GarageColumn]);
                    }
                    catch (InvalidCastException e)
                    {
                        throw new StrongTypingException("The value for column 'Garage' in table 'spGetJobData' is DBNull.", e);
                    }
                }
                set
                {
                    this[tablespGetJobData.GarageColumn]=value;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public string PermitNumber
            {
                get
                {
                    try
                    {
                        return Conversions.ToString(this[tablespGetJobData.PermitNumberColumn]);
                    }
                    catch (InvalidCastException e)
                    {
                        throw new StrongTypingException("The value for column 'PermitNumber' in table 'spGetJobData' is DBNull.", e);
                    }
                }
                set
                {
                    this[tablespGetJobData.PermitNumberColumn]=value;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public string Note
            {
                get
                {
                    try
                    {
                        return Conversions.ToString(this[tablespGetJobData.NoteColumn]);
                    }
                    catch (InvalidCastException e)
                    {
                        throw new StrongTypingException("The value for column 'Note' in table 'spGetJobData' is DBNull.", e);
                    }
                }
                set
                {
                    this[tablespGetJobData.NoteColumn]=value;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public string Status
            {
                get
                {
                    try
                    {
                        return Conversions.ToString(this[tablespGetJobData.StatusColumn]);
                    }
                    catch (InvalidCastException e)
                    {
                        throw new StrongTypingException("The value for column 'Status' in table 'spGetJobData' is DBNull.", e);
                    }
                }
                set
                {
                    this[tablespGetJobData.StatusColumn]=value;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public byte StatusID
            {
                get
                {
                    try
                    {
                        return Conversions.ToByte(this[tablespGetJobData.StatusIDColumn]);
                    }
                    catch (InvalidCastException e)
                    {
                        throw new StrongTypingException("The value for column 'StatusID' in table 'spGetJobData' is DBNull.", e);
                    }
                }
                set
                {
                    this[tablespGetJobData.StatusIDColumn]=value;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public byte model
            {
                get
                {
                    return Conversions.ToByte(this[tablespGetJobData.modelColumn]);
                }
                set
                {
                    this[tablespGetJobData.modelColumn]=value;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public string FN
            {
                get
                {
                    try
                    {
                        return Conversions.ToString(this[tablespGetJobData.FNColumn]);
                    }
                    catch (InvalidCastException e)
                    {
                        throw new StrongTypingException("The value for column 'FN' in table 'spGetJobData' is DBNull.", e);
                    }
                }
                set
                {
                    this[tablespGetJobData.FNColumn]=value;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public string LN
            {
                get
                {
                    try
                    {
                        return Conversions.ToString(this[tablespGetJobData.LNColumn]);
                    }
                    catch (InvalidCastException e)
                    {
                        throw new StrongTypingException("The value for column 'LN' in table 'spGetJobData' is DBNull.", e);
                    }
                }
                set
                {
                    this[tablespGetJobData.LNColumn]=value;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public string SFN
            {
                get
                {
                    try
                    {
                        return Conversions.ToString(this[tablespGetJobData.SFNColumn]);
                    }
                    catch (InvalidCastException e)
                    {
                        throw new StrongTypingException("The value for column 'SFN' in table 'spGetJobData' is DBNull.", e);
                    }
                }
                set
                {
                    this[tablespGetJobData.SFNColumn]=value;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public string SLN
            {
                get
                {
                    try
                    {
                        return Conversions.ToString(this[tablespGetJobData.SLNColumn]);
                    }
                    catch (InvalidCastException e)
                    {
                        throw new StrongTypingException("The value for column 'SLN' in table 'spGetJobData' is DBNull.", e);
                    }
                }
                set
                {
                    this[tablespGetJobData.SLNColumn]=value;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public string ABLegalDescription
            {
                get
                {
                    try
                    {
                        return Conversions.ToString(this[tablespGetJobData.ABLegalDescriptionColumn]);
                    }
                    catch (InvalidCastException e)
                    {
                        throw new StrongTypingException("The value for column 'ABLegalDescription' in table 'spGetJobData' is DBNull.", e);
                    }
                }
                set
                {
                    this[tablespGetJobData.ABLegalDescriptionColumn]=value;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public bool HOP
            {
                get
                {
                    try
                    {
                        return Conversions.ToBoolean(this[tablespGetJobData.HOPColumn]);
                    }
                    catch (InvalidCastException e)
                    {
                        throw new StrongTypingException("The value for column 'HOP' in table 'spGetJobData' is DBNull.", e);
                    }
                }
                set
                {
                    this[tablespGetJobData.HOPColumn]=value;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public bool IsProjectIDNull()
            {
                return IsNull(tablespGetJobData.ProjectIDColumn);
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public void SetProjectIDNull()
            {
                this[tablespGetJobData.ProjectIDColumn]=Convert.DBNull;
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public bool IsPlanIDNull()
            {
                return IsNull(tablespGetJobData.PlanIDColumn);
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public void SetPlanIDNull()
            {
                this[tablespGetJobData.PlanIDColumn]=Convert.DBNull;
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public bool IsJobNameNull()
            {
                return IsNull(tablespGetJobData.JobNameColumn);
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public void SetJobNameNull()
            {
                this[tablespGetJobData.JobNameColumn]=Convert.DBNull;
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public bool IsAddressNull()
            {
                return IsNull(tablespGetJobData.AddressColumn);
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public void SetAddressNull()
            {
                this[tablespGetJobData.AddressColumn]=Convert.DBNull;
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public bool IsCityNull()
            {
                return IsNull(tablespGetJobData.CityColumn);
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public void SetCityNull()
            {
                this[tablespGetJobData.CityColumn]=Convert.DBNull;
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public bool IsStNull()
            {
                return IsNull(tablespGetJobData.StColumn);
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public void SetStNull()
            {
                this[tablespGetJobData.StColumn]=Convert.DBNull;
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public bool IsZipNull()
            {
                return IsNull(tablespGetJobData.ZipColumn);
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public void SetZipNull()
            {
                this[tablespGetJobData.ZipColumn]=Convert.DBNull;
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public bool IsBlockNull()
            {
                return IsNull(tablespGetJobData.BlockColumn);
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public void SetBlockNull()
            {
                this[tablespGetJobData.BlockColumn]=Convert.DBNull;
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public bool IsLotNull()
            {
                return IsNull(tablespGetJobData.LotColumn);
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public void SetLotNull()
            {
                this[tablespGetJobData.LotColumn]=Convert.DBNull;
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public bool IsEstimateCompleteNull()
            {
                return IsNull(tablespGetJobData.EstimateCompleteColumn);
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public void SetEstimateCompleteNull()
            {
                this[tablespGetJobData.EstimateCompleteColumn]=Convert.DBNull;
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public bool IsStartDateNull()
            {
                return IsNull(tablespGetJobData.StartDateColumn);
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public void SetStartDateNull()
            {
                this[tablespGetJobData.StartDateColumn]=Convert.DBNull;
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public bool IsCompleteDateNull()
            {
                return IsNull(tablespGetJobData.CompleteDateColumn);
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public void SetCompleteDateNull()
            {
                this[tablespGetJobData.CompleteDateColumn]=Convert.DBNull;
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public bool IsCancelledDateNull()
            {
                return IsNull(tablespGetJobData.CancelledDateColumn);
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public void SetCancelledDateNull()
            {
                this[tablespGetJobData.CancelledDateColumn]=Convert.DBNull;
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public bool IsLotCostAdjustmentNull()
            {
                return IsNull(tablespGetJobData.LotCostAdjustmentColumn);
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public void SetLotCostAdjustmentNull()
            {
                this[tablespGetJobData.LotCostAdjustmentColumn]=Convert.DBNull;
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public bool IsBuilderIDNull()
            {
                return IsNull(tablespGetJobData.BuilderIDColumn);
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public void SetBuilderIDNull()
            {
                this[tablespGetJobData.BuilderIDColumn]=Convert.DBNull;
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public bool IsPOReleasePhaseNull()
            {
                return IsNull(tablespGetJobData.POReleasePhaseColumn);
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public void SetPOReleasePhaseNull()
            {
                this[tablespGetJobData.POReleasePhaseColumn]=Convert.DBNull;
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public bool IsHoldNextPhaseNull()
            {
                return IsNull(tablespGetJobData.HoldNextPhaseColumn);
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public void SetHoldNextPhaseNull()
            {
                this[tablespGetJobData.HoldNextPhaseColumn]=Convert.DBNull;
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public bool IsSiteSheetSentNull()
            {
                return IsNull(tablespGetJobData.SiteSheetSentColumn);
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public void SetSiteSheetSentNull()
            {
                this[tablespGetJobData.SiteSheetSentColumn]=Convert.DBNull;
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public bool IsSiteSheetReturnedNull()
            {
                return IsNull(tablespGetJobData.SiteSheetReturnedColumn);
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public void SetSiteSheetReturnedNull()
            {
                this[tablespGetJobData.SiteSheetReturnedColumn]=Convert.DBNull;
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public bool IsCreatedDateNull()
            {
                return IsNull(tablespGetJobData.CreatedDateColumn);
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public void SetCreatedDateNull()
            {
                this[tablespGetJobData.CreatedDateColumn]=Convert.DBNull;
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public bool IsCreatedByNull()
            {
                return IsNull(tablespGetJobData.CreatedByColumn);
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public void SetCreatedByNull()
            {
                this[tablespGetJobData.CreatedByColumn]=Convert.DBNull;
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public bool IsUpdatedDateNull()
            {
                return IsNull(tablespGetJobData.UpdatedDateColumn);
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public void SetUpdatedDateNull()
            {
                this[tablespGetJobData.UpdatedDateColumn]=Convert.DBNull;
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public bool IsUpdatedByNull()
            {
                return IsNull(tablespGetJobData.UpdatedByColumn);
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public void SetUpdatedByNull()
            {
                this[tablespGetJobData.UpdatedByColumn]=Convert.DBNull;
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public bool IsPlanFileNull()
            {
                return IsNull(tablespGetJobData.PlanFileColumn);
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public void SetPlanFileNull()
            {
                this[tablespGetJobData.PlanFileColumn]=Convert.DBNull;
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public bool IsReviewedByNull()
            {
                return IsNull(tablespGetJobData.ReviewedByColumn);
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public void SetReviewedByNull()
            {
                this[tablespGetJobData.ReviewedByColumn]=Convert.DBNull;
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public bool IsSquareFeetNull()
            {
                return IsNull(tablespGetJobData.SquareFeetColumn);
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public void SetSquareFeetNull()
            {
                this[tablespGetJobData.SquareFeetColumn]=Convert.DBNull;
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public bool IsLivingSpaceNull()
            {
                return IsNull(tablespGetJobData.LivingSpaceColumn);
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public void SetLivingSpaceNull()
            {
                this[tablespGetJobData.LivingSpaceColumn]=Convert.DBNull;
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public bool IsCIDNull()
            {
                return IsNull(tablespGetJobData.CIDColumn);
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public void SetCIDNull()
            {
                this[tablespGetJobData.CIDColumn]=Convert.DBNull;
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public bool IsReleasedAsSpecNull()
            {
                return IsNull(tablespGetJobData.ReleasedAsSpecColumn);
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public void SetReleasedAsSpecNull()
            {
                this[tablespGetJobData.ReleasedAsSpecColumn]=Convert.DBNull;
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public bool IsHoldNull()
            {
                return IsNull(tablespGetJobData.HoldColumn);
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public void SetHoldNull()
            {
                this[tablespGetJobData.HoldColumn]=Convert.DBNull;
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public bool IsEnclosedSpaceNull()
            {
                return IsNull(tablespGetJobData.EnclosedSpaceColumn);
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public void SetEnclosedSpaceNull()
            {
                this[tablespGetJobData.EnclosedSpaceColumn]=Convert.DBNull;
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public bool IsPriceNull()
            {
                return IsNull(tablespGetJobData.PriceColumn);
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public void SetPriceNull()
            {
                this[tablespGetJobData.PriceColumn]=Convert.DBNull;
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public bool IsReleaseDateNull()
            {
                return IsNull(tablespGetJobData.ReleaseDateColumn);
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public void SetReleaseDateNull()
            {
                this[tablespGetJobData.ReleaseDateColumn]=Convert.DBNull;
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public bool IsPlanFileDateNull()
            {
                return IsNull(tablespGetJobData.PlanFileDateColumn);
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public void SetPlanFileDateNull()
            {
                this[tablespGetJobData.PlanFileDateColumn]=Convert.DBNull;
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public bool IsAdministrativeHoldNull()
            {
                return IsNull(tablespGetJobData.AdministrativeHoldColumn);
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public void SetAdministrativeHoldNull()
            {
                this[tablespGetJobData.AdministrativeHoldColumn]=Convert.DBNull;
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public bool IsReleaseToCADNull()
            {
                return IsNull(tablespGetJobData.ReleaseToCADColumn);
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public void SetReleaseToCADNull()
            {
                this[tablespGetJobData.ReleaseToCADColumn]=Convert.DBNull;
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public bool IsGarageNull()
            {
                return IsNull(tablespGetJobData.GarageColumn);
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public void SetGarageNull()
            {
                this[tablespGetJobData.GarageColumn]=Convert.DBNull;
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public bool IsPermitNumberNull()
            {
                return IsNull(tablespGetJobData.PermitNumberColumn);
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public void SetPermitNumberNull()
            {
                this[tablespGetJobData.PermitNumberColumn]=Convert.DBNull;
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public bool IsNoteNull()
            {
                return IsNull(tablespGetJobData.NoteColumn);
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public void SetNoteNull()
            {
                this[tablespGetJobData.NoteColumn]=Convert.DBNull;
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public bool IsStatusNull()
            {
                return IsNull(tablespGetJobData.StatusColumn);
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public void SetStatusNull()
            {
                this[tablespGetJobData.StatusColumn]=Convert.DBNull;
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public bool IsStatusIDNull()
            {
                return IsNull(tablespGetJobData.StatusIDColumn);
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public void SetStatusIDNull()
            {
                this[tablespGetJobData.StatusIDColumn]=Convert.DBNull;
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public bool IsFNNull()
            {
                return IsNull(tablespGetJobData.FNColumn);
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public void SetFNNull()
            {
                this[tablespGetJobData.FNColumn]=Convert.DBNull;
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public bool IsLNNull()
            {
                return IsNull(tablespGetJobData.LNColumn);
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public void SetLNNull()
            {
                this[tablespGetJobData.LNColumn]=Convert.DBNull;
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public bool IsSFNNull()
            {
                return IsNull(tablespGetJobData.SFNColumn);
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public void SetSFNNull()
            {
                this[tablespGetJobData.SFNColumn]=Convert.DBNull;
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public bool IsSLNNull()
            {
                return IsNull(tablespGetJobData.SLNColumn);
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public void SetSLNNull()
            {
                this[tablespGetJobData.SLNColumn]=Convert.DBNull;
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public bool IsABLegalDescriptionNull()
            {
                return IsNull(tablespGetJobData.ABLegalDescriptionColumn);
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public void SetABLegalDescriptionNull()
            {
                this[tablespGetJobData.ABLegalDescriptionColumn]=Convert.DBNull;
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public bool IsHOPNull()
            {
                return IsNull(tablespGetJobData.HOPColumn);
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public void SetHOPNull()
            {
                this[tablespGetJobData.HOPColumn]=Convert.DBNull;
            }
        }

        /// <summary>
    /// Row event argument class
    /// </summary>
        [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        public class spGetJobDataRowChangeEvent : EventArgs
        {

            private spGetJobDataRow eventRow;

            private DataRowAction eventAction;

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public spGetJobDataRowChangeEvent(spGetJobDataRow row, DataRowAction action) : base()
            {
                eventRow=row;
                eventAction=action;
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public spGetJobDataRow Row
            {
                get
                {
                    return eventRow;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public DataRowAction Action
            {
                get
                {
                    return eventAction;
                }
            }
        }
    }

    namespace HCHDataQADataSet2TableAdapters
    {

        /// <summary>
    /// Represents the connection and commands used to retrieve and save data.
    /// </summary>
        [System.ComponentModel.DesignerCategory("code")]
        [System.ComponentModel.ToolboxItem(true)]
        [System.ComponentModel.DataObject(true)]
        [System.ComponentModel.Designer("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"+", Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]

        [System.ComponentModel.Design.HelpKeyword("vs.data.TableAdapter")]
        public partial class spGetJobDataTableAdapter : System.ComponentModel.Component
        {

            private System.Data.SqlClient.SqlDataAdapter __adapter;

            private System.Data.SqlClient.SqlDataAdapter _adapter
            {
                [MethodImpl(MethodImplOptions.Synchronized)]
                get
                {
                    return __adapter;
                }

                [MethodImpl(MethodImplOptions.Synchronized)]
                set
                {
                    __adapter=value;
                }
            }

            private System.Data.SqlClient.SqlConnection _connection;

            private System.Data.SqlClient.SqlTransaction _transaction;

            private System.Data.SqlClient.SqlCommand[] _commandCollection;

            private bool _clearBeforeFill;

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public spGetJobDataTableAdapter() : base()
            {
                ClearBeforeFill=true;
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            protected internal System.Data.SqlClient.SqlDataAdapter Adapter
            {
                get
                {
                    if (_adapter is null)
                    {
                        InitAdapter();
                    }
                    return _adapter;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            internal System.Data.SqlClient.SqlConnection Connection
            {
                get
                {
                    if (_connection is null)
                    {
                        InitConnection();
                    }
                    return _connection;
                }
                set
                {
                    _connection=value;
                    if (Adapter.InsertCommand is not null)
                    {
                        Adapter.InsertCommand.Connection=value;
                    }
                    if (Adapter.DeleteCommand is not null)
                    {
                        Adapter.DeleteCommand.Connection=value;
                    }
                    if (Adapter.UpdateCommand is not null)
                    {
                        Adapter.UpdateCommand.Connection=value;
                    }
                    int i = 0;
                    while (i<CommandCollection.Length)
                    {
                        if (CommandCollection[i] is not null)
                        {
                            CommandCollection[i].Connection=value;
                        }
                        i=i+1;
                    }
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            internal System.Data.SqlClient.SqlTransaction Transaction
            {
                get
                {
                    return _transaction;
                }
                set
                {
                    _transaction=value;
                    int i = 0;
                    while (i<CommandCollection.Length)
                    {
                        CommandCollection[i].Transaction=_transaction;
                        i=i+1;
                    }
                    if (Adapter is not null&&Adapter.DeleteCommand is not null)
                    {
                        Adapter.DeleteCommand.Transaction=_transaction;
                    }
                    if (Adapter is not null&&Adapter.InsertCommand is not null)
                    {
                        Adapter.InsertCommand.Transaction=_transaction;
                    }
                    if (Adapter is not null&&Adapter.UpdateCommand is not null)
                    {
                        Adapter.UpdateCommand.Transaction=_transaction;
                    }
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            protected System.Data.SqlClient.SqlCommand[] CommandCollection
            {
                get
                {
                    if (_commandCollection is null)
                    {
                        InitCommandCollection();
                    }
                    return _commandCollection;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public bool ClearBeforeFill
            {
                get
                {
                    return _clearBeforeFill;
                }
                set
                {
                    _clearBeforeFill=value;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            private void InitAdapter()
            {
                _adapter=new System.Data.SqlClient.SqlDataAdapter();
                var tableMapping = new System.Data.Common.DataTableMapping();
                tableMapping.SourceTable="Table";
                tableMapping.DataSetTable="spGetJobData";
                tableMapping.ColumnMappings.Add("ID", "ID");
                tableMapping.ColumnMappings.Add("JobID", "JobID");
                tableMapping.ColumnMappings.Add("ProjectID", "ProjectID");
                tableMapping.ColumnMappings.Add("PlanID", "PlanID");
                tableMapping.ColumnMappings.Add("JobName", "JobName");
                tableMapping.ColumnMappings.Add("Address", "Address");
                tableMapping.ColumnMappings.Add("City", "City");
                tableMapping.ColumnMappings.Add("St", "St");
                tableMapping.ColumnMappings.Add("Zip", "Zip");
                tableMapping.ColumnMappings.Add("Block", "Block");
                tableMapping.ColumnMappings.Add("Lot", "Lot");
                tableMapping.ColumnMappings.Add("EstimateComplete", "EstimateComplete");
                tableMapping.ColumnMappings.Add("StartDate", "StartDate");
                tableMapping.ColumnMappings.Add("CompleteDate", "CompleteDate");
                tableMapping.ColumnMappings.Add("CancelledDate", "CancelledDate");
                tableMapping.ColumnMappings.Add("LotCostAdjustment", "LotCostAdjustment");
                tableMapping.ColumnMappings.Add("BuilderID", "BuilderID");
                tableMapping.ColumnMappings.Add("POReleasePhase", "POReleasePhase");
                tableMapping.ColumnMappings.Add("HoldNextPhase", "HoldNextPhase");
                tableMapping.ColumnMappings.Add("SiteSheetSent", "SiteSheetSent");
                tableMapping.ColumnMappings.Add("SiteSheetReturned", "SiteSheetReturned");
                tableMapping.ColumnMappings.Add("CreatedDate", "CreatedDate");
                tableMapping.ColumnMappings.Add("CreatedBy", "CreatedBy");
                tableMapping.ColumnMappings.Add("UpdatedDate", "UpdatedDate");
                tableMapping.ColumnMappings.Add("UpdatedBy", "UpdatedBy");
                tableMapping.ColumnMappings.Add("PlanFile", "PlanFile");
                tableMapping.ColumnMappings.Add("ReviewedBy", "ReviewedBy");
                tableMapping.ColumnMappings.Add("SquareFeet", "SquareFeet");
                tableMapping.ColumnMappings.Add("LivingSpace", "LivingSpace");
                tableMapping.ColumnMappings.Add("CID", "CID");
                tableMapping.ColumnMappings.Add("ReleasedAsSpec", "ReleasedAsSpec");
                tableMapping.ColumnMappings.Add("Hold", "Hold");
                tableMapping.ColumnMappings.Add("EnclosedSpace", "EnclosedSpace");
                tableMapping.ColumnMappings.Add("Price", "Price");
                tableMapping.ColumnMappings.Add("ReleaseDate", "ReleaseDate");
                tableMapping.ColumnMappings.Add("PlanFileDate", "PlanFileDate");
                tableMapping.ColumnMappings.Add("AdministrativeHold", "AdministrativeHold");
                tableMapping.ColumnMappings.Add("ReleaseToCAD", "ReleaseToCAD");
                tableMapping.ColumnMappings.Add("Garage", "Garage");
                tableMapping.ColumnMappings.Add("PermitNumber", "PermitNumber");
                tableMapping.ColumnMappings.Add("Note", "Note");
                tableMapping.ColumnMappings.Add("Status", "Status");
                tableMapping.ColumnMappings.Add("StatusID", "StatusID");
                tableMapping.ColumnMappings.Add("model", "model");
                tableMapping.ColumnMappings.Add("FN", "FN");
                tableMapping.ColumnMappings.Add("LN", "LN");
                tableMapping.ColumnMappings.Add("SFN", "SFN");
                tableMapping.ColumnMappings.Add("SLN", "SLN");
                tableMapping.ColumnMappings.Add("ABLegalDescription", "ABLegalDescription");
                tableMapping.ColumnMappings.Add("HOP", "HOP");
                _adapter.TableMappings.Add(tableMapping);
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            private void InitConnection()
            {
                _connection=new System.Data.SqlClient.SqlConnection();
                _connection.ConnectionString=My.MySettings.Default.HCHDataQAConnectionString;
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            private void InitCommandCollection()
            {
                _commandCollection=new System.Data.SqlClient.SqlCommand[1];
                _commandCollection[0]=new System.Data.SqlClient.SqlCommand();
                _commandCollection[0].Connection=Connection;
                _commandCollection[0].CommandText="dbo.spGetJobData";
                _commandCollection[0].CommandType=CommandType.StoredProcedure;
                _commandCollection[0].Parameters.Add(new System.Data.SqlClient.SqlParameter("@RETURN_VALUE", SqlDbType.Int, 4, ParameterDirection.ReturnValue, 10, 0, null, DataRowVersion.Current, false, null, "", "", ""));
                _commandCollection[0].Parameters.Add(new System.Data.SqlClient.SqlParameter("@JobID", SqlDbType.VarChar, 20, ParameterDirection.Input, 0, 0, null, DataRowVersion.Current, false, null, "", "", ""));
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            [System.ComponentModel.Design.HelpKeyword("vs.data.TableAdapter")]
            [System.ComponentModel.DataObjectMethod(System.ComponentModel.DataObjectMethodType.Fill, true)]
            public virtual int Fill(HCHDataQADataSet2.spGetJobDataDataTable dataTable, string JobID)
            {
                Adapter.SelectCommand=CommandCollection[0];
                if (JobID is null)
                {
                    Adapter.SelectCommand.Parameters[1].Value=DBNull.Value;
                }
                else
                {
                    Adapter.SelectCommand.Parameters[1].Value=JobID;
                }
                if (ClearBeforeFill==true)
                {
                    dataTable.Clear();
                }
                int returnValue = Adapter.Fill(dataTable);
                return returnValue;
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            [System.ComponentModel.Design.HelpKeyword("vs.data.TableAdapter")]
            [System.ComponentModel.DataObjectMethod(System.ComponentModel.DataObjectMethodType.Select, true)]
            public virtual HCHDataQADataSet2.spGetJobDataDataTable GetData(string JobID)
            {
                Adapter.SelectCommand=CommandCollection[0];
                if (JobID is null)
                {
                    Adapter.SelectCommand.Parameters[1].Value=DBNull.Value;
                }
                else
                {
                    Adapter.SelectCommand.Parameters[1].Value=JobID;
                }
                var dataTable = new HCHDataQADataSet2.spGetJobDataDataTable();
                Adapter.Fill(dataTable);
                return dataTable;
            }
        }

        /// <summary>
    /// TableAdapterManager is used to coordinate TableAdapters in the dataset to enable Hierarchical Update scenarios
    /// </summary>
        [System.ComponentModel.DesignerCategory("code")]
        [System.ComponentModel.ToolboxItem(true)]
        [System.ComponentModel.Designer("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerDesigner, Microsoft.VSD"+"esigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]

        [System.ComponentModel.Design.HelpKeyword("vs.data.TableAdapterManager")]
        public partial class TableAdapterManager : System.ComponentModel.Component
        {

            private UpdateOrderOption _updateOrder;

            private bool _backupDataSetBeforeUpdate;

            private IDbConnection _connection;

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public UpdateOrderOption UpdateOrder
            {
                get
                {
                    return _updateOrder;
                }
                set
                {
                    _updateOrder=value;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public bool BackupDataSetBeforeUpdate
            {
                get
                {
                    return _backupDataSetBeforeUpdate;
                }
                set
                {
                    _backupDataSetBeforeUpdate=value;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            [System.ComponentModel.Browsable(false)]
            public IDbConnection Connection
            {
                get
                {
                    if (_connection is not null)
                    {
                        return _connection;
                    }
                    return null;
                }
                set
                {
                    _connection=value;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            [System.ComponentModel.Browsable(false)]
            public int TableAdapterInstanceCount
            {
                get
                {
                    int count = 0;
                    return count;
                }
            }

            /// <summary>
        /// Update rows in top-down order.
        /// </summary>
            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            private int UpdateUpdatedRows(HCHDataQADataSet2 dataSet, List<DataRow> allChangedRows, List<DataRow> allAddedRows)
            {
                int result = 0;
                return result;
            }

            /// <summary>
        /// Insert rows in top-down order.
        /// </summary>
            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            private int UpdateInsertedRows(HCHDataQADataSet2 dataSet, List<DataRow> allAddedRows)
            {
                int result = 0;
                return result;
            }

            /// <summary>
        /// Delete rows in bottom-up order.
        /// </summary>
            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            private int UpdateDeletedRows(HCHDataQADataSet2 dataSet, List<DataRow> allChangedRows)
            {
                int result = 0;
                return result;
            }

            /// <summary>
        /// Remove inserted rows that become updated rows after calling TableAdapter.Update(inserted rows) first
        /// </summary>
            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            private DataRow[] GetRealUpdatedRows(DataRow[] updatedRows, List<DataRow> allAddedRows)
            {
                if (updatedRows is null||updatedRows.Length<1)
                {
                    return updatedRows;
                }
                if (allAddedRows is null||allAddedRows.Count<1)
                {
                    return updatedRows;
                }
                var realUpdatedRows = new List<DataRow>();
                int i = 0;
                while (i<updatedRows.Length)
                {
                    var row = updatedRows[i];
                    if (allAddedRows.Contains(row)==false)
                    {
                        realUpdatedRows.Add(row);
                    }
                    i=i+1;
                }
                return realUpdatedRows.ToArray();
            }

            /// <summary>
        /// Update all changes to the dataset.
        /// </summary>
            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public virtual int UpdateAll(HCHDataQADataSet2 dataSet)
            {
                if (dataSet is null)
                {
                    throw new ArgumentNullException("dataSet");
                }
                if (dataSet.HasChanges()==false)
                {
                    return 0;
                }
                var workConnection = Connection;
                if (workConnection is null)
                {
                    throw new ApplicationException("TableAdapterManager contains no connection information. Set each TableAdapterMana"+"ger TableAdapter property to a valid TableAdapter instance.");
                }
                bool workConnOpened = false;
                if ((workConnection.State&ConnectionState.Broken)==ConnectionState.Broken)
                {
                    workConnection.Close();
                }
                if (workConnection.State==ConnectionState.Closed)
                {
                    workConnection.Open();
                    workConnOpened=true;
                }
                var workTransaction = workConnection.BeginTransaction();
                if (workTransaction is null)
                {
                    throw new ApplicationException("The transaction cannot begin. The current data connection does not support transa"+"ctions or the current state is not allowing the transaction to begin.");
                }
                var allChangedRows = new List<DataRow>();
                var allAddedRows = new List<DataRow>();
                var adaptersWithAcceptChangesDuringUpdate = new List<System.Data.Common.DataAdapter>();
                var revertConnections = new Dictionary<object, IDbConnection>();
                int result = 0;
                DataSet backupDataSet = null;
                if (BackupDataSetBeforeUpdate)
                {
                    backupDataSet=new DataSet();
                    backupDataSet.Merge(dataSet);
                }
                try
                {
                    // ---- Prepare for update -----------
                    // 
                    // 
                    // ---- Perform updates -----------
                    // 
                    if (UpdateOrder==UpdateOrderOption.UpdateInsertDelete)
                    {
                        result=result+UpdateUpdatedRows(dataSet, allChangedRows, allAddedRows);
                        result=result+UpdateInsertedRows(dataSet, allAddedRows);
                    }
                    else
                    {
                        result=result+UpdateInsertedRows(dataSet, allAddedRows);
                        result=result+UpdateUpdatedRows(dataSet, allChangedRows, allAddedRows);
                    }
                    result=result+UpdateDeletedRows(dataSet, allChangedRows);
                    // 
                    // ---- Commit updates -----------
                    // 
                    workTransaction.Commit();
                    if (0<allAddedRows.Count)
                    {
                        var rows = new DataRow[allAddedRows.Count];
                        allAddedRows.CopyTo(rows);
                        int i = 0;
                        while (i<rows.Length)
                        {
                            var row = rows[i];
                            row.AcceptChanges();
                            i=i+1;
                        }
                    }
                    if (0<allChangedRows.Count)
                    {
                        var rows = new DataRow[allChangedRows.Count];
                        allChangedRows.CopyTo(rows);
                        int i = 0;
                        while (i<rows.Length)
                        {
                            var row = rows[i];
                            row.AcceptChanges();
                            i=i+1;
                        }
                    }
                }
                catch (Exception ex)
                {
                    workTransaction.Rollback();
                    // ---- Restore the dataset -----------
                    if (BackupDataSetBeforeUpdate)
                    {
                        Debug.Assert(backupDataSet is not null);
                        dataSet.Clear();
                        dataSet.Merge(backupDataSet);
                    }
                    else if (0<allAddedRows.Count)
                    {
                        var rows = new DataRow[allAddedRows.Count];
                        allAddedRows.CopyTo(rows);
                        int i = 0;
                        while (i<rows.Length)
                        {
                            var row = rows[i];
                            row.AcceptChanges();
                            row.SetAdded();
                            i=i+1;
                        }
                    }
                    throw ex;
                }
                finally
                {
                    if (workConnOpened)
                    {
                        workConnection.Close();
                    }
                    if (0<adaptersWithAcceptChangesDuringUpdate.Count)
                    {
                        var adapters = new System.Data.Common.DataAdapter[adaptersWithAcceptChangesDuringUpdate.Count];
                        adaptersWithAcceptChangesDuringUpdate.CopyTo(adapters);
                        int i = 0;
                        while (i<adapters.Length)
                        {
                            var adapter = adapters[i];
                            adapter.AcceptChangesDuringUpdate=true;
                            i=i+1;
                        }
                    }
                }
                return result;
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            protected virtual void SortSelfReferenceRows(DataRow[] rows, DataRelation relation, bool childFirst)
            {
                Array.Sort(rows, new SelfReferenceComparer(relation, childFirst));
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            protected virtual bool MatchTableAdapterConnection(IDbConnection inputConnection)
            {
                if (_connection is not null)
                {
                    return true;
                }
                if (Connection is null||inputConnection is null)
                {
                    return true;
                }
                if (string.Equals(Connection.ConnectionString, inputConnection.ConnectionString, StringComparison.Ordinal))
                {
                    return true;
                }
                return false;
            }

            /// <summary>
        /// Update Order Option
        /// </summary>
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public enum UpdateOrderOption
            {

                InsertUpdateDelete = 0,

                UpdateInsertDelete = 1
            }

            /// <summary>
        /// Used to sort self-referenced table's rows
        /// </summary>
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            private class SelfReferenceComparer : object, IComparer<DataRow>
            {

                private DataRelation _relation;

                private int _childFirst;

                [DebuggerNonUserCode()]
                [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
                internal SelfReferenceComparer(DataRelation relation, bool childFirst) : base()
                {
                    _relation=relation;
                    if (childFirst)
                    {
                        _childFirst=-1;
                    }
                    else
                    {
                        _childFirst=1;
                    }
                }

                [DebuggerNonUserCode()]
                [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
                private DataRow GetRoot(DataRow row, ref int distance)
                {
                    Debug.Assert(row is not null);
                    var root = row;
                    distance=0;

                    IDictionary<DataRow, DataRow> traversedRows = new Dictionary<DataRow, DataRow>();
                    traversedRows[row]=row;

                    var parent = row.GetParentRow(_relation, DataRowVersion.Default);

                    while (parent is not null&&traversedRows.ContainsKey(parent)==false)
                    {
                        distance=distance+1;
                        root=parent;
                        traversedRows[parent]=parent;
                        parent=parent.GetParentRow(_relation, DataRowVersion.Default);

                    }

                    if (distance==0)
                    {
                        traversedRows.Clear();
                        traversedRows[row]=row;
                        parent=row.GetParentRow(_relation, DataRowVersion.Original);

                        while (parent is not null&&traversedRows.ContainsKey(parent)==false)
                        {
                            distance=distance+1;
                            root=parent;
                            traversedRows[parent]=parent;
                            parent=parent.GetParentRow(_relation, DataRowVersion.Original);

                        }
                    }

                    return root;
                }

                [DebuggerNonUserCode()]
                [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
                public int Compare(DataRow row1, DataRow row2)
                {
                    if (ReferenceEquals(row1, row2))
                    {
                        return 0;
                    }
                    if (row1 is null)
                    {
                        return -1;
                    }
                    if (row2 is null)
                    {
                        return 1;
                    }

                    int distance1 = 0;
                    var root1 = GetRoot(row1, ref distance1);

                    int distance2 = 0;
                    var root2 = GetRoot(row2, ref distance2);

                    if (ReferenceEquals(root1, root2))
                    {
                        return _childFirst*distance1.CompareTo(distance2);
                    }
                    else
                    {
                        Debug.Assert(root1.Table is not null&&root2.Table is not null);
                        if (root1.Table.Rows.IndexOf(root1)<root2.Table.Rows.IndexOf(root2))
                        {
                            return -1;
                        }
                        else
                        {
                            return 1;
                        }
                    }
                }
            }
        }
    }
}