// ------------------------------------------------------------------------------
// <auto-generated>
// This code was generated by a tool.
// Runtime Version:4.0.30319.42000
// 
// Changes to this file may cause incorrect behavior and will be lost if
// the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Data;
using System.Diagnostics;
using System.Runtime.CompilerServices;
using Microsoft.VisualBasic.CompilerServices;

namespace BossAdmin
{



    /// <summary>
/// Represents a strongly typed in-memory cache of data.
/// </summary>
    [Serializable()]
    [System.ComponentModel.DesignerCategory("code")]
    [System.ComponentModel.ToolboxItem(true)]
    [System.Xml.Serialization.XmlSchemaProvider("GetTypedDataSetSchema")]
    [System.Xml.Serialization.XmlRoot("dsDetail")]
    [System.ComponentModel.Design.HelpKeyword("vs.data.DataSet")]
    public partial class dsDetail : DataSet
    {

        private spPlanEstimatesGetDataTable tablespPlanEstimatesGet;

        private SchemaSerializationMode _schemaSerializationMode = SchemaSerializationMode.IncludeSchema;

        [DebuggerNonUserCode()]
        [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        public dsDetail() : base()
        {
            BeginInit();
            InitClass();
            System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = SchemaChanged;
            base.Tables.CollectionChanged+=schemaChangedHandler;
            base.Relations.CollectionChanged+=schemaChangedHandler;
            EndInit();
        }

        [DebuggerNonUserCode()]
        [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        protected dsDetail(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : base(info, context, false)
        {
            if (IsBinarySerialized(info, context)==true)
            {
                InitVars(false);
                System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler1 = SchemaChanged;
                Tables.CollectionChanged+=schemaChangedHandler1;
                Relations.CollectionChanged+=schemaChangedHandler1;
                return;
            }
            string strSchema = Conversions.ToString(info.GetValue("XmlSchema", typeof(string)));
            if (DetermineSchemaSerializationMode(info, context)==SchemaSerializationMode.IncludeSchema)
            {
                var ds = new DataSet();
                ds.ReadXmlSchema(new System.Xml.XmlTextReader(new System.IO.StringReader(strSchema)));
                if (ds.Tables["spPlanEstimatesGet"] is not null)
                {
                    base.Tables.Add(new spPlanEstimatesGetDataTable(ds.Tables["spPlanEstimatesGet"]));
                }
                DataSetName=ds.DataSetName;
                Prefix=ds.Prefix;
                Namespace=ds.Namespace;
                Locale=ds.Locale;
                CaseSensitive=ds.CaseSensitive;
                EnforceConstraints=ds.EnforceConstraints;
                Merge(ds, false, MissingSchemaAction.Add);
                InitVars();
            }
            else
            {
                ReadXmlSchema(new System.Xml.XmlTextReader(new System.IO.StringReader(strSchema)));
            }
            GetSerializationData(info, context);
            System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = SchemaChanged;
            base.Tables.CollectionChanged+=schemaChangedHandler;
            Relations.CollectionChanged+=schemaChangedHandler;
        }

        [DebuggerNonUserCode()]
        [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public spPlanEstimatesGetDataTable spPlanEstimatesGet
        {
            get
            {
                return tablespPlanEstimatesGet;
            }
        }

        [DebuggerNonUserCode()]
        [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        [System.ComponentModel.Browsable(true)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Visible)]
        public override SchemaSerializationMode SchemaSerializationMode
        {
            get
            {
                return _schemaSerializationMode;
            }
            set
            {
                _schemaSerializationMode=value;
            }
        }

        [DebuggerNonUserCode()]
        [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new DataTableCollection Tables
        {
            get
            {
                return base.Tables;
            }
        }

        [DebuggerNonUserCode()]
        [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new DataRelationCollection Relations
        {
            get
            {
                return base.Relations;
            }
        }

        [DebuggerNonUserCode()]
        [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        protected override void InitializeDerivedDataSet()
        {
            BeginInit();
            InitClass();
            EndInit();
        }

        [DebuggerNonUserCode()]
        [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        public override DataSet Clone()
        {
            dsDetail cln = (dsDetail)base.Clone();
            cln.InitVars();
            cln.SchemaSerializationMode=SchemaSerializationMode;
            return cln;
        }

        [DebuggerNonUserCode()]
        [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        protected override bool ShouldSerializeTables()
        {
            return false;
        }

        [DebuggerNonUserCode()]
        [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        protected override bool ShouldSerializeRelations()
        {
            return false;
        }

        [DebuggerNonUserCode()]
        [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        protected override void ReadXmlSerializable(System.Xml.XmlReader reader)
        {
            if (DetermineSchemaSerializationMode(reader)==SchemaSerializationMode.IncludeSchema)
            {
                Reset();
                var ds = new DataSet();
                ds.ReadXml(reader);
                if (ds.Tables["spPlanEstimatesGet"] is not null)
                {
                    base.Tables.Add(new spPlanEstimatesGetDataTable(ds.Tables["spPlanEstimatesGet"]));
                }
                DataSetName=ds.DataSetName;
                Prefix=ds.Prefix;
                Namespace=ds.Namespace;
                Locale=ds.Locale;
                CaseSensitive=ds.CaseSensitive;
                EnforceConstraints=ds.EnforceConstraints;
                Merge(ds, false, MissingSchemaAction.Add);
                InitVars();
            }
            else
            {
                ReadXml(reader);
                InitVars();
            }
        }

        [DebuggerNonUserCode()]
        [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        protected override System.Xml.Schema.XmlSchema GetSchemaSerializable()
        {
            var stream = new System.IO.MemoryStream();
            WriteXmlSchema(new System.Xml.XmlTextWriter(stream, null));
            stream.Position=0L;
            return System.Xml.Schema.XmlSchema.Read(new System.Xml.XmlTextReader(stream), null);
        }

        [DebuggerNonUserCode()]
        [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        internal void InitVars()
        {
            InitVars(true);
        }

        [DebuggerNonUserCode()]
        [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        internal void InitVars(bool initTable)
        {
            tablespPlanEstimatesGet=(spPlanEstimatesGetDataTable)base.Tables["spPlanEstimatesGet"];
            if (initTable==true)
            {
                if (tablespPlanEstimatesGet is not null)
                {
                    tablespPlanEstimatesGet.InitVars();
                }
            }
        }

        [DebuggerNonUserCode()]
        [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        private void InitClass()
        {
            DataSetName="dsDetail";
            Prefix="";
            Namespace="http://tempuri.org/dsDetail.xsd";
            EnforceConstraints=true;
            SchemaSerializationMode=SchemaSerializationMode.IncludeSchema;
            tablespPlanEstimatesGet=new spPlanEstimatesGetDataTable();
            base.Tables.Add(tablespPlanEstimatesGet);
        }

        [DebuggerNonUserCode()]
        [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        private bool ShouldSerializespPlanEstimatesGet()
        {
            return false;
        }

        [DebuggerNonUserCode()]
        [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        private void SchemaChanged(object sender, System.ComponentModel.CollectionChangeEventArgs e)
        {
            if (e.Action==System.ComponentModel.CollectionChangeAction.Remove)
            {
                InitVars();
            }
        }

        [DebuggerNonUserCode()]
        [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        public static System.Xml.Schema.XmlSchemaComplexType GetTypedDataSetSchema(System.Xml.Schema.XmlSchemaSet xs)
        {
            var ds = new dsDetail();
            var type = new System.Xml.Schema.XmlSchemaComplexType();
            var sequence = new System.Xml.Schema.XmlSchemaSequence();
            var any = new System.Xml.Schema.XmlSchemaAny();
            any.Namespace=ds.Namespace;
            sequence.Items.Add(any);
            type.Particle=sequence;
            var dsSchema = ds.GetSchemaSerializable();
            if (xs.Contains(dsSchema.TargetNamespace))
            {
                var s1 = new System.IO.MemoryStream();
                var s2 = new System.IO.MemoryStream();
                try
                {
                    System.Xml.Schema.XmlSchema schema = null;
                    dsSchema.Write(s1);
                    var schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator();
                    while (schemas.MoveNext())
                    {
                        schema=(System.Xml.Schema.XmlSchema)schemas.Current;
                        s2.SetLength(0L);
                        schema.Write(s2);
                        if (s1.Length==s2.Length)
                        {
                            s1.Position=0L;
                            s2.Position=0L;

                            while (s1.Position!=s1.Length&&s1.ReadByte()==s2.ReadByte())
                            {


                            }
                            if (s1.Position==s1.Length)
                            {
                                return type;
                            }
                        }

                    }
                }
                finally
                {
                    if (s1 is not null)
                    {
                        s1.Close();
                    }
                    if (s2 is not null)
                    {
                        s2.Close();
                    }
                }
            }
            xs.Add(dsSchema);
            return type;
        }

        [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        public delegate void spPlanEstimatesGetRowChangeEventHandler(object sender, spPlanEstimatesGetRowChangeEvent e);

        /// <summary>
    /// Represents the strongly named DataTable class.
    /// </summary>
        [Serializable()]
        [System.Xml.Serialization.XmlSchemaProvider("GetTypedTableSchema")]
        public partial class spPlanEstimatesGetDataTable : TypedTableBase<spPlanEstimatesGetRow>
        {

            private DataColumn columnPlanEstimateID;

            private DataColumn columnPlanGroup;

            private DataColumn columnElevation;

            private DataColumn columnExterior;

            private DataColumn columnExteriorID;

            private DataColumn columnResourceID;

            private DataColumn columnResourceName;

            private DataColumn columnActivityCode;

            private DataColumn columnActivity;

            private DataColumn columnResUsage;

            private DataColumn columnBudgetQty;

            private DataColumn columnCreatedDate;

            private DataColumn columnCreatedBy;

            private DataColumn columnUpdatedDate;

            private DataColumn columnNotes;

            private DataColumn columnUpdatedBy;

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public spPlanEstimatesGetDataTable() : base()
            {
                TableName="spPlanEstimatesGet";
                BeginInit();
                InitClass();
                EndInit();
                ColumnChanging+=spPlanEstimatesGetDataTable_ColumnChanging;
                RowChanged+=spPlanEstimatesGetDataTable_RowChanged;
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            internal spPlanEstimatesGetDataTable(DataTable table) : base()
            {
                TableName=table.TableName;
                if (table.CaseSensitive!=table.DataSet.CaseSensitive)
                {
                    CaseSensitive=table.CaseSensitive;
                }
                if ((table.Locale.ToString()??"")!=(table.DataSet.Locale.ToString()??""))
                {
                    Locale=table.Locale;
                }
                if ((table.Namespace??"")!=(table.DataSet.Namespace??""))
                {
                    Namespace=table.Namespace;
                }
                Prefix=table.Prefix;
                MinimumCapacity=table.MinimumCapacity;
                ColumnChanging+=spPlanEstimatesGetDataTable_ColumnChanging;
                RowChanged+=spPlanEstimatesGetDataTable_RowChanged;
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            protected spPlanEstimatesGetDataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : base(info, context)
            {
                InitVars();
                ColumnChanging+=spPlanEstimatesGetDataTable_ColumnChanging;
                RowChanged+=spPlanEstimatesGetDataTable_RowChanged;
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public DataColumn PlanEstimateIDColumn
            {
                get
                {
                    return columnPlanEstimateID;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public DataColumn PlanGroupColumn
            {
                get
                {
                    return columnPlanGroup;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public DataColumn ElevationColumn
            {
                get
                {
                    return columnElevation;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public DataColumn ExteriorColumn
            {
                get
                {
                    return columnExterior;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public DataColumn ExteriorIDColumn
            {
                get
                {
                    return columnExteriorID;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public DataColumn ResourceIDColumn
            {
                get
                {
                    return columnResourceID;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public DataColumn ResourceNameColumn
            {
                get
                {
                    return columnResourceName;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public DataColumn ActivityCodeColumn
            {
                get
                {
                    return columnActivityCode;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public DataColumn ActivityColumn
            {
                get
                {
                    return columnActivity;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public DataColumn ResUsageColumn
            {
                get
                {
                    return columnResUsage;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public DataColumn BudgetQtyColumn
            {
                get
                {
                    return columnBudgetQty;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public DataColumn CreatedDateColumn
            {
                get
                {
                    return columnCreatedDate;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public DataColumn CreatedByColumn
            {
                get
                {
                    return columnCreatedBy;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public DataColumn UpdatedDateColumn
            {
                get
                {
                    return columnUpdatedDate;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public DataColumn NotesColumn
            {
                get
                {
                    return columnNotes;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public DataColumn UpdatedByColumn
            {
                get
                {
                    return columnUpdatedBy;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            [System.ComponentModel.Browsable(false)]
            public int Count
            {
                get
                {
                    return Rows.Count;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public spPlanEstimatesGetRow this[int index]
            {
                get
                {
                    return (spPlanEstimatesGetRow)Rows[index];
                }
            }

            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public event spPlanEstimatesGetRowChangeEventHandler spPlanEstimatesGetRowChanging;

            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public event spPlanEstimatesGetRowChangeEventHandler spPlanEstimatesGetRowChanged;

            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public event spPlanEstimatesGetRowChangeEventHandler spPlanEstimatesGetRowDeleting;

            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public event spPlanEstimatesGetRowChangeEventHandler spPlanEstimatesGetRowDeleted;

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public void AddspPlanEstimatesGetRow(spPlanEstimatesGetRow row)
            {
                Rows.Add(row);
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public spPlanEstimatesGetRow AddspPlanEstimatesGetRow(string PlanGroup, string Elevation, string Exterior, int ExteriorID, string ResourceID, string ResourceName, int ActivityCode, string Activity, string ResUsage, decimal BudgetQty, DateTime CreatedDate, string CreatedBy, DateTime UpdatedDate, string Notes, string UpdatedBy)
            {
                spPlanEstimatesGetRow rowspPlanEstimatesGetRow = (spPlanEstimatesGetRow)NewRow();
                object[] columnValuesArray = new object[] { null, PlanGroup, Elevation, Exterior, ExteriorID, ResourceID, ResourceName, ActivityCode, Activity, ResUsage, BudgetQty, CreatedDate, CreatedBy, UpdatedDate, Notes, UpdatedBy };
                rowspPlanEstimatesGetRow.ItemArray=columnValuesArray;
                Rows.Add(rowspPlanEstimatesGetRow);
                return rowspPlanEstimatesGetRow;
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public spPlanEstimatesGetRow FindByPlanEstimateID(int PlanEstimateID)
            {
                return (spPlanEstimatesGetRow)Rows.Find(new object[] { PlanEstimateID });
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public override DataTable Clone()
            {
                spPlanEstimatesGetDataTable cln = (spPlanEstimatesGetDataTable)base.Clone();
                cln.InitVars();
                return cln;
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            protected override DataTable CreateInstance()
            {
                return new spPlanEstimatesGetDataTable();
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            internal void InitVars()
            {
                columnPlanEstimateID=Columns["PlanEstimateID"];
                columnPlanGroup=Columns["PlanGroup"];
                columnElevation=Columns["Elevation"];
                columnExterior=Columns["Exterior"];
                columnExteriorID=Columns["ExteriorID"];
                columnResourceID=Columns["ResourceID"];
                columnResourceName=Columns["ResourceName"];
                columnActivityCode=Columns["ActivityCode"];
                columnActivity=Columns["Activity"];
                columnResUsage=Columns["ResUsage"];
                columnBudgetQty=Columns["BudgetQty"];
                columnCreatedDate=Columns["CreatedDate"];
                columnCreatedBy=Columns["CreatedBy"];
                columnUpdatedDate=Columns["UpdatedDate"];
                columnNotes=Columns["Notes"];
                columnUpdatedBy=Columns["UpdatedBy"];
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            private void InitClass()
            {
                columnPlanEstimateID=new DataColumn("PlanEstimateID", typeof(int), null, MappingType.Element);
                Columns.Add(columnPlanEstimateID);
                columnPlanGroup=new DataColumn("PlanGroup", typeof(string), null, MappingType.Element);
                Columns.Add(columnPlanGroup);
                columnElevation=new DataColumn("Elevation", typeof(string), null, MappingType.Element);
                Columns.Add(columnElevation);
                columnExterior=new DataColumn("Exterior", typeof(string), null, MappingType.Element);
                Columns.Add(columnExterior);
                columnExteriorID=new DataColumn("ExteriorID", typeof(int), null, MappingType.Element);
                Columns.Add(columnExteriorID);
                columnResourceID=new DataColumn("ResourceID", typeof(string), null, MappingType.Element);
                Columns.Add(columnResourceID);
                columnResourceName=new DataColumn("ResourceName", typeof(string), null, MappingType.Element);
                Columns.Add(columnResourceName);
                columnActivityCode=new DataColumn("ActivityCode", typeof(int), null, MappingType.Element);
                Columns.Add(columnActivityCode);
                columnActivity=new DataColumn("Activity", typeof(string), null, MappingType.Element);
                Columns.Add(columnActivity);
                columnResUsage=new DataColumn("ResUsage", typeof(string), null, MappingType.Element);
                Columns.Add(columnResUsage);
                columnBudgetQty=new DataColumn("BudgetQty", typeof(decimal), null, MappingType.Element);
                Columns.Add(columnBudgetQty);
                columnCreatedDate=new DataColumn("CreatedDate", typeof(DateTime), null, MappingType.Element);
                Columns.Add(columnCreatedDate);
                columnCreatedBy=new DataColumn("CreatedBy", typeof(string), null, MappingType.Element);
                Columns.Add(columnCreatedBy);
                columnUpdatedDate=new DataColumn("UpdatedDate", typeof(DateTime), null, MappingType.Element);
                Columns.Add(columnUpdatedDate);
                columnNotes=new DataColumn("Notes", typeof(string), null, MappingType.Element);
                Columns.Add(columnNotes);
                columnUpdatedBy=new DataColumn("UpdatedBy", typeof(string), null, MappingType.Element);
                Columns.Add(columnUpdatedBy);
                Constraints.Add(new UniqueConstraint("Constraint1", new DataColumn[] { columnPlanEstimateID }, true));
                columnPlanEstimateID.AutoIncrement=true;
                columnPlanEstimateID.AllowDBNull=false;
                columnPlanEstimateID.ReadOnly=true;
                columnPlanEstimateID.Unique=true;
                columnPlanGroup.AllowDBNull=false;
                columnPlanGroup.MaxLength=4;
                columnElevation.MaxLength=1;
                columnResourceID.MaxLength=20;
                columnResUsage.MaxLength=20;
                columnCreatedBy.MaxLength=10;
                columnUpdatedBy.MaxLength=10;
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public spPlanEstimatesGetRow NewspPlanEstimatesGetRow()
            {
                return (spPlanEstimatesGetRow)NewRow();
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder)
            {
                return new spPlanEstimatesGetRow(builder);
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            protected override Type GetRowType()
            {
                return typeof(spPlanEstimatesGetRow);
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            protected override void OnRowChanged(DataRowChangeEventArgs e)
            {
                base.OnRowChanged(e);
                if (spPlanEstimatesGetRowChanged is not null)
                {
                    spPlanEstimatesGetRowChanged?.Invoke(this, new spPlanEstimatesGetRowChangeEvent((spPlanEstimatesGetRow)e.Row, e.Action));
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            protected override void OnRowChanging(DataRowChangeEventArgs e)
            {
                base.OnRowChanging(e);
                if (spPlanEstimatesGetRowChanging is not null)
                {
                    spPlanEstimatesGetRowChanging?.Invoke(this, new spPlanEstimatesGetRowChangeEvent((spPlanEstimatesGetRow)e.Row, e.Action));
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            protected override void OnRowDeleted(DataRowChangeEventArgs e)
            {
                base.OnRowDeleted(e);
                if (spPlanEstimatesGetRowDeleted is not null)
                {
                    spPlanEstimatesGetRowDeleted?.Invoke(this, new spPlanEstimatesGetRowChangeEvent((spPlanEstimatesGetRow)e.Row, e.Action));
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            protected override void OnRowDeleting(DataRowChangeEventArgs e)
            {
                base.OnRowDeleting(e);
                if (spPlanEstimatesGetRowDeleting is not null)
                {
                    spPlanEstimatesGetRowDeleting?.Invoke(this, new spPlanEstimatesGetRowChangeEvent((spPlanEstimatesGetRow)e.Row, e.Action));
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public void RemovespPlanEstimatesGetRow(spPlanEstimatesGetRow row)
            {
                Rows.Remove(row);
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs)
            {
                var type = new System.Xml.Schema.XmlSchemaComplexType();
                var sequence = new System.Xml.Schema.XmlSchemaSequence();
                var ds = new dsDetail();
                var any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace="http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs=new decimal(0);
                any1.MaxOccurs=decimal.MaxValue;
                any1.ProcessContents=System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                var any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace="urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs=new decimal(1);
                any2.ProcessContents=System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                var attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name="namespace";
                attribute1.FixedValue=ds.Namespace;
                type.Attributes.Add(attribute1);
                var attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name="tableTypeName";
                attribute2.FixedValue="spPlanEstimatesGetDataTable";
                type.Attributes.Add(attribute2);
                type.Particle=sequence;
                var dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace))
                {
                    var s1 = new System.IO.MemoryStream();
                    var s2 = new System.IO.MemoryStream();
                    try
                    {
                        System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        var schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator();
                        while (schemas.MoveNext())
                        {
                            schema=(System.Xml.Schema.XmlSchema)schemas.Current;
                            s2.SetLength(0L);
                            schema.Write(s2);
                            if (s1.Length==s2.Length)
                            {
                                s1.Position=0L;
                                s2.Position=0L;

                                while (s1.Position!=s1.Length&&s1.ReadByte()==s2.ReadByte())
                                {


                                }
                                if (s1.Position==s1.Length)
                                {
                                    return type;
                                }
                            }

                        }
                    }
                    finally
                    {
                        if (s1 is not null)
                        {
                            s1.Close();
                        }
                        if (s2 is not null)
                        {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }

        /// <summary>
    /// Represents strongly named DataRow class.
    /// </summary>
        public partial class spPlanEstimatesGetRow : DataRow
        {

            private spPlanEstimatesGetDataTable tablespPlanEstimatesGet;

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            internal spPlanEstimatesGetRow(DataRowBuilder rb) : base(rb)
            {
                tablespPlanEstimatesGet=(spPlanEstimatesGetDataTable)Table;
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public int PlanEstimateID
            {
                get
                {
                    return (int)(this[tablespPlanEstimatesGet.PlanEstimateIDColumn]);
                }
                set
                {
                    this[tablespPlanEstimatesGet.PlanEstimateIDColumn]=value;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public string PlanGroup
            {
                get
                {
                    return Conversions.ToString(this[tablespPlanEstimatesGet.PlanGroupColumn]);
                }
                set
                {
                    this[tablespPlanEstimatesGet.PlanGroupColumn]=value;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public string Elevation
            {
                get
                {
                    try
                    {
                        return Conversions.ToString(this[tablespPlanEstimatesGet.ElevationColumn]);
                    }
                    catch (InvalidCastException e)
                    {
                        throw new StrongTypingException("The value for column 'Elevation' in table 'spPlanEstimatesGet' is DBNull.", e);
                    }
                }
                set
                {
                    this[tablespPlanEstimatesGet.ElevationColumn]=value;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public string Exterior
            {
                get
                {
                    try
                    {
                        return Conversions.ToString(this[tablespPlanEstimatesGet.ExteriorColumn]);
                    }
                    catch (InvalidCastException e)
                    {
                        throw new StrongTypingException("The value for column 'Exterior' in table 'spPlanEstimatesGet' is DBNull.", e);
                    }
                }
                set
                {
                    this[tablespPlanEstimatesGet.ExteriorColumn]=value;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public int ExteriorID
            {
                get
                {
                    try
                    {
                        return (int)(this[tablespPlanEstimatesGet.ExteriorIDColumn]);
                    }
                    catch (InvalidCastException e)
                    {
                        throw new StrongTypingException("The value for column 'ExteriorID' in table 'spPlanEstimatesGet' is DBNull.", e);
                    }
                }
                set
                {
                    this[tablespPlanEstimatesGet.ExteriorIDColumn]=value;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public string ResourceID
            {
                get
                {
                    try
                    {
                        return Conversions.ToString(this[tablespPlanEstimatesGet.ResourceIDColumn]);
                    }
                    catch (InvalidCastException e)
                    {
                        throw new StrongTypingException("The value for column 'ResourceID' in table 'spPlanEstimatesGet' is DBNull.", e);
                    }
                }
                set
                {
                    this[tablespPlanEstimatesGet.ResourceIDColumn]=value;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public string ResourceName
            {
                get
                {
                    try
                    {
                        return Conversions.ToString(this[tablespPlanEstimatesGet.ResourceNameColumn]);
                    }
                    catch (InvalidCastException e)
                    {
                        throw new StrongTypingException("The value for column 'ResourceName' in table 'spPlanEstimatesGet' is DBNull.", e);
                    }
                }
                set
                {
                    this[tablespPlanEstimatesGet.ResourceNameColumn]=value;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public int ActivityCode
            {
                get
                {
                    try
                    {
                        return (int)(this[tablespPlanEstimatesGet.ActivityCodeColumn]);
                    }
                    catch (InvalidCastException e)
                    {
                        throw new StrongTypingException("The value for column 'ActivityCode' in table 'spPlanEstimatesGet' is DBNull.", e);
                    }
                }
                set
                {
                    this[tablespPlanEstimatesGet.ActivityCodeColumn]=value;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public string Activity
            {
                get
                {
                    try
                    {
                        return Conversions.ToString(this[tablespPlanEstimatesGet.ActivityColumn]);
                    }
                    catch (InvalidCastException e)
                    {
                        throw new StrongTypingException("The value for column 'Activity' in table 'spPlanEstimatesGet' is DBNull.", e);
                    }
                }
                set
                {
                    this[tablespPlanEstimatesGet.ActivityColumn]=value;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public string ResUsage
            {
                get
                {
                    try
                    {
                        return Conversions.ToString(this[tablespPlanEstimatesGet.ResUsageColumn]);
                    }
                    catch (InvalidCastException e)
                    {
                        throw new StrongTypingException("The value for column 'ResUsage' in table 'spPlanEstimatesGet' is DBNull.", e);
                    }
                }
                set
                {
                    this[tablespPlanEstimatesGet.ResUsageColumn]=value;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public decimal BudgetQty
            {
                get
                {
                    try
                    {
                        return Conversions.ToDecimal(this[tablespPlanEstimatesGet.BudgetQtyColumn]);
                    }
                    catch (InvalidCastException e)
                    {
                        throw new StrongTypingException("The value for column 'BudgetQty' in table 'spPlanEstimatesGet' is DBNull.", e);
                    }
                }
                set
                {
                    this[tablespPlanEstimatesGet.BudgetQtyColumn]=value;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public DateTime CreatedDate
            {
                get
                {
                    try
                    {
                        return Conversions.ToDate(this[tablespPlanEstimatesGet.CreatedDateColumn]);
                    }
                    catch (InvalidCastException e)
                    {
                        throw new StrongTypingException("The value for column 'CreatedDate' in table 'spPlanEstimatesGet' is DBNull.", e);
                    }
                }
                set
                {
                    this[tablespPlanEstimatesGet.CreatedDateColumn]=value;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public string CreatedBy
            {
                get
                {
                    try
                    {
                        return Conversions.ToString(this[tablespPlanEstimatesGet.CreatedByColumn]);
                    }
                    catch (InvalidCastException e)
                    {
                        throw new StrongTypingException("The value for column 'CreatedBy' in table 'spPlanEstimatesGet' is DBNull.", e);
                    }
                }
                set
                {
                    this[tablespPlanEstimatesGet.CreatedByColumn]=value;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public DateTime UpdatedDate
            {
                get
                {
                    try
                    {
                        return Conversions.ToDate(this[tablespPlanEstimatesGet.UpdatedDateColumn]);
                    }
                    catch (InvalidCastException e)
                    {
                        throw new StrongTypingException("The value for column 'UpdatedDate' in table 'spPlanEstimatesGet' is DBNull.", e);
                    }
                }
                set
                {
                    this[tablespPlanEstimatesGet.UpdatedDateColumn]=value;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public string Notes
            {
                get
                {
                    try
                    {
                        return Conversions.ToString(this[tablespPlanEstimatesGet.NotesColumn]);
                    }
                    catch (InvalidCastException e)
                    {
                        throw new StrongTypingException("The value for column 'Notes' in table 'spPlanEstimatesGet' is DBNull.", e);
                    }
                }
                set
                {
                    this[tablespPlanEstimatesGet.NotesColumn]=value;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public string UpdatedBy
            {
                get
                {
                    try
                    {
                        return Conversions.ToString(this[tablespPlanEstimatesGet.UpdatedByColumn]);
                    }
                    catch (InvalidCastException e)
                    {
                        throw new StrongTypingException("The value for column 'UpdatedBy' in table 'spPlanEstimatesGet' is DBNull.", e);
                    }
                }
                set
                {
                    this[tablespPlanEstimatesGet.UpdatedByColumn]=value;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public bool IsElevationNull()
            {
                return IsNull(tablespPlanEstimatesGet.ElevationColumn);
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public void SetElevationNull()
            {
                this[tablespPlanEstimatesGet.ElevationColumn]=Convert.DBNull;
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public bool IsExteriorNull()
            {
                return IsNull(tablespPlanEstimatesGet.ExteriorColumn);
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public void SetExteriorNull()
            {
                this[tablespPlanEstimatesGet.ExteriorColumn]=Convert.DBNull;
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public bool IsExteriorIDNull()
            {
                return IsNull(tablespPlanEstimatesGet.ExteriorIDColumn);
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public void SetExteriorIDNull()
            {
                this[tablespPlanEstimatesGet.ExteriorIDColumn]=Convert.DBNull;
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public bool IsResourceIDNull()
            {
                return IsNull(tablespPlanEstimatesGet.ResourceIDColumn);
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public void SetResourceIDNull()
            {
                this[tablespPlanEstimatesGet.ResourceIDColumn]=Convert.DBNull;
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public bool IsResourceNameNull()
            {
                return IsNull(tablespPlanEstimatesGet.ResourceNameColumn);
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public void SetResourceNameNull()
            {
                this[tablespPlanEstimatesGet.ResourceNameColumn]=Convert.DBNull;
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public bool IsActivityCodeNull()
            {
                return IsNull(tablespPlanEstimatesGet.ActivityCodeColumn);
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public void SetActivityCodeNull()
            {
                this[tablespPlanEstimatesGet.ActivityCodeColumn]=Convert.DBNull;
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public bool IsActivityNull()
            {
                return IsNull(tablespPlanEstimatesGet.ActivityColumn);
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public void SetActivityNull()
            {
                this[tablespPlanEstimatesGet.ActivityColumn]=Convert.DBNull;
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public bool IsResUsageNull()
            {
                return IsNull(tablespPlanEstimatesGet.ResUsageColumn);
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public void SetResUsageNull()
            {
                this[tablespPlanEstimatesGet.ResUsageColumn]=Convert.DBNull;
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public bool IsBudgetQtyNull()
            {
                return IsNull(tablespPlanEstimatesGet.BudgetQtyColumn);
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public void SetBudgetQtyNull()
            {
                this[tablespPlanEstimatesGet.BudgetQtyColumn]=Convert.DBNull;
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public bool IsCreatedDateNull()
            {
                return IsNull(tablespPlanEstimatesGet.CreatedDateColumn);
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public void SetCreatedDateNull()
            {
                this[tablespPlanEstimatesGet.CreatedDateColumn]=Convert.DBNull;
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public bool IsCreatedByNull()
            {
                return IsNull(tablespPlanEstimatesGet.CreatedByColumn);
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public void SetCreatedByNull()
            {
                this[tablespPlanEstimatesGet.CreatedByColumn]=Convert.DBNull;
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public bool IsUpdatedDateNull()
            {
                return IsNull(tablespPlanEstimatesGet.UpdatedDateColumn);
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public void SetUpdatedDateNull()
            {
                this[tablespPlanEstimatesGet.UpdatedDateColumn]=Convert.DBNull;
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public bool IsNotesNull()
            {
                return IsNull(tablespPlanEstimatesGet.NotesColumn);
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public void SetNotesNull()
            {
                this[tablespPlanEstimatesGet.NotesColumn]=Convert.DBNull;
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public bool IsUpdatedByNull()
            {
                return IsNull(tablespPlanEstimatesGet.UpdatedByColumn);
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public void SetUpdatedByNull()
            {
                this[tablespPlanEstimatesGet.UpdatedByColumn]=Convert.DBNull;
            }
        }

        /// <summary>
    /// Row event argument class
    /// </summary>
        [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        public class spPlanEstimatesGetRowChangeEvent : EventArgs
        {

            private spPlanEstimatesGetRow eventRow;

            private DataRowAction eventAction;

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public spPlanEstimatesGetRowChangeEvent(spPlanEstimatesGetRow row, DataRowAction action) : base()
            {
                eventRow=row;
                eventAction=action;
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public spPlanEstimatesGetRow Row
            {
                get
                {
                    return eventRow;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public DataRowAction Action
            {
                get
                {
                    return eventAction;
                }
            }
        }
    }

    namespace dsDetailTableAdapters
    {

        /// <summary>
    /// Represents the connection and commands used to retrieve and save data.
    /// </summary>
        [System.ComponentModel.DesignerCategory("code")]
        [System.ComponentModel.ToolboxItem(true)]
        [System.ComponentModel.DataObject(true)]
        [System.ComponentModel.Designer("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"+", Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]

        [System.ComponentModel.Design.HelpKeyword("vs.data.TableAdapter")]
        public partial class spPlanEstimatesGetTableAdapter : System.ComponentModel.Component
        {

            private System.Data.SqlClient.SqlDataAdapter __adapter;

            private System.Data.SqlClient.SqlDataAdapter _adapter
            {
                [MethodImpl(MethodImplOptions.Synchronized)]
                get
                {
                    return __adapter;
                }

                [MethodImpl(MethodImplOptions.Synchronized)]
                set
                {
                    __adapter=value;
                }
            }

            private System.Data.SqlClient.SqlConnection _connection;

            private System.Data.SqlClient.SqlTransaction _transaction;

            private System.Data.SqlClient.SqlCommand[] _commandCollection;

            private bool _clearBeforeFill;

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public spPlanEstimatesGetTableAdapter() : base()
            {
                ClearBeforeFill=true;
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            protected internal System.Data.SqlClient.SqlDataAdapter Adapter
            {
                get
                {
                    if (_adapter is null)
                    {
                        InitAdapter();
                    }
                    return _adapter;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            internal System.Data.SqlClient.SqlConnection Connection
            {
                get
                {
                    if (_connection is null)
                    {
                        InitConnection();
                    }
                    return _connection;
                }
                set
                {
                    _connection=value;
                    if (Adapter.InsertCommand is not null)
                    {
                        Adapter.InsertCommand.Connection=value;
                    }
                    if (Adapter.DeleteCommand is not null)
                    {
                        Adapter.DeleteCommand.Connection=value;
                    }
                    if (Adapter.UpdateCommand is not null)
                    {
                        Adapter.UpdateCommand.Connection=value;
                    }
                    int i = 0;
                    while (i<CommandCollection.Length)
                    {
                        if (CommandCollection[i] is not null)
                        {
                            CommandCollection[i].Connection=value;
                        }
                        i=i+1;
                    }
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            internal System.Data.SqlClient.SqlTransaction Transaction
            {
                get
                {
                    return _transaction;
                }
                set
                {
                    _transaction=value;
                    int i = 0;
                    while (i<CommandCollection.Length)
                    {
                        CommandCollection[i].Transaction=_transaction;
                        i=i+1;
                    }
                    if (Adapter is not null&&Adapter.DeleteCommand is not null)
                    {
                        Adapter.DeleteCommand.Transaction=_transaction;
                    }
                    if (Adapter is not null&&Adapter.InsertCommand is not null)
                    {
                        Adapter.InsertCommand.Transaction=_transaction;
                    }
                    if (Adapter is not null&&Adapter.UpdateCommand is not null)
                    {
                        Adapter.UpdateCommand.Transaction=_transaction;
                    }
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            protected System.Data.SqlClient.SqlCommand[] CommandCollection
            {
                get
                {
                    if (_commandCollection is null)
                    {
                        InitCommandCollection();
                    }
                    return _commandCollection;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public bool ClearBeforeFill
            {
                get
                {
                    return _clearBeforeFill;
                }
                set
                {
                    _clearBeforeFill=value;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            private void InitAdapter()
            {
                _adapter=new System.Data.SqlClient.SqlDataAdapter();
                var tableMapping = new System.Data.Common.DataTableMapping();
                tableMapping.SourceTable="Table";
                tableMapping.DataSetTable="spPlanEstimatesGet";
                tableMapping.ColumnMappings.Add("PlanEstimateID", "PlanEstimateID");
                tableMapping.ColumnMappings.Add("PlanGroup", "PlanGroup");
                tableMapping.ColumnMappings.Add("Elevation", "Elevation");
                tableMapping.ColumnMappings.Add("ExteriorID", "ExteriorID");
                tableMapping.ColumnMappings.Add("ResourceID", "ResourceID");
                tableMapping.ColumnMappings.Add("ActivityCode", "ActivityCode");
                tableMapping.ColumnMappings.Add("ResUsage", "ResUsage");
                tableMapping.ColumnMappings.Add("BudgetQty", "BudgetQty");
                tableMapping.ColumnMappings.Add("CreatedDate", "CreatedDate");
                tableMapping.ColumnMappings.Add("CreatedBy", "CreatedBy");
                tableMapping.ColumnMappings.Add("UpdatedDate", "UpdatedDate");
                tableMapping.ColumnMappings.Add("UpdatedBy", "UpdatedBy");
                _adapter.TableMappings.Add(tableMapping);
                _adapter.DeleteCommand=new System.Data.SqlClient.SqlCommand();
                _adapter.DeleteCommand.Connection=Connection;
                _adapter.DeleteCommand.CommandText="dbo.spPlanEstimateDelete";
                _adapter.DeleteCommand.CommandType=CommandType.StoredProcedure;
                _adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@RETURN_VALUE", SqlDbType.Int, 4, ParameterDirection.ReturnValue, 10, 0, null, DataRowVersion.Current, false, null, "", "", ""));
                _adapter.DeleteCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@PlanEstimateID", SqlDbType.Int, 4, ParameterDirection.Input, 10, 0, "", DataRowVersion.Current, false, null, "", "", ""));
                _adapter.UpdateCommand=new System.Data.SqlClient.SqlCommand();
                _adapter.UpdateCommand.Connection=Connection;
                _adapter.UpdateCommand.CommandText="dbo.spPlanEstimateUpdate";
                _adapter.UpdateCommand.CommandType=CommandType.StoredProcedure;
                _adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@RETURN_VALUE", SqlDbType.Int, 4, ParameterDirection.ReturnValue, 10, 0, null, DataRowVersion.Current, false, null, "", "", ""));
                _adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@PlanEstimateID", SqlDbType.Int, 4, ParameterDirection.Input, 10, 0, "", DataRowVersion.Current, false, null, "", "", ""));
                _adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@ResourceID", SqlDbType.VarChar, 20, ParameterDirection.Input, 0, 0, "", DataRowVersion.Current, false, null, "", "", ""));
                _adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@ActivityCode", SqlDbType.Int, 4, ParameterDirection.Input, 10, 0, "", DataRowVersion.Current, false, null, "", "", ""));
                _adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@ResUsage", SqlDbType.VarChar, 20, ParameterDirection.Input, 0, 0, "", DataRowVersion.Current, false, null, "", "", ""));
                _adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@BudgetQty", SqlDbType.Money, 8, ParameterDirection.Input, 19, 4, "", DataRowVersion.Current, false, null, "", "", ""));
                _adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@UpdatedBy", SqlDbType.NChar, 10, ParameterDirection.Input, 0, 0, "", DataRowVersion.Current, false, null, "", "", ""));
                _adapter.UpdateCommand.Parameters.Add(new System.Data.SqlClient.SqlParameter("@Notes", SqlDbType.NVarChar, 500, ParameterDirection.Input, 0, 0, "", DataRowVersion.Current, false, null, "", "", ""));
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            private void InitConnection()
            {
                _connection=new System.Data.SqlClient.SqlConnection();
                _connection.ConnectionString=My.MySettings.Default.HCHDataConnectionString;
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            private void InitCommandCollection()
            {
                _commandCollection=new System.Data.SqlClient.SqlCommand[4];
                _commandCollection[0]=new System.Data.SqlClient.SqlCommand();
                _commandCollection[0].Connection=Connection;
                _commandCollection[0].CommandText="dbo.spPlanEstimatesGet";
                _commandCollection[0].CommandType=CommandType.StoredProcedure;
                _commandCollection[0].Parameters.Add(new System.Data.SqlClient.SqlParameter("@RETURN_VALUE", SqlDbType.Int, 4, ParameterDirection.ReturnValue, 10, 0, null, DataRowVersion.Current, false, null, "", "", ""));
                _commandCollection[0].Parameters.Add(new System.Data.SqlClient.SqlParameter("@FilterString", SqlDbType.NVarChar, 2000, ParameterDirection.Input, 0, 0, null, DataRowVersion.Current, false, null, "", "", ""));
                _commandCollection[1]=new System.Data.SqlClient.SqlCommand();
                _commandCollection[1].Connection=Connection;
                _commandCollection[1].CommandText="dbo.spPlanEstimateDelete";
                _commandCollection[1].CommandType=CommandType.StoredProcedure;
                _commandCollection[1].Parameters.Add(new System.Data.SqlClient.SqlParameter("@RETURN_VALUE", SqlDbType.Int, 4, ParameterDirection.ReturnValue, 10, 0, "", DataRowVersion.Current, false, null, "", "", ""));
                _commandCollection[1].Parameters.Add(new System.Data.SqlClient.SqlParameter("@PlanEstimateID", SqlDbType.Int, 4, ParameterDirection.Input, 10, 0, "PlanEstimateID", DataRowVersion.Current, false, null, "", "", ""));
                _commandCollection[2]=new System.Data.SqlClient.SqlCommand();
                _commandCollection[2].Connection=Connection;
                _commandCollection[2].CommandText="dbo.spPlanEstimateInsert";
                _commandCollection[2].CommandType=CommandType.StoredProcedure;
                _commandCollection[2].Parameters.Add(new System.Data.SqlClient.SqlParameter("@RETURN_VALUE", SqlDbType.Int, 4, ParameterDirection.ReturnValue, 10, 0, null, DataRowVersion.Current, false, null, "", "", ""));
                _commandCollection[2].Parameters.Add(new System.Data.SqlClient.SqlParameter("@PlanGroup", SqlDbType.VarChar, 4, ParameterDirection.Input, 0, 0, null, DataRowVersion.Current, false, null, "", "", ""));
                _commandCollection[2].Parameters.Add(new System.Data.SqlClient.SqlParameter("@Elevation", SqlDbType.NChar, 1, ParameterDirection.Input, 0, 0, null, DataRowVersion.Current, false, null, "", "", ""));
                _commandCollection[2].Parameters.Add(new System.Data.SqlClient.SqlParameter("@ExteriorID", SqlDbType.Int, 4, ParameterDirection.Input, 10, 0, null, DataRowVersion.Current, false, null, "", "", ""));
                _commandCollection[2].Parameters.Add(new System.Data.SqlClient.SqlParameter("@CreatedBy", SqlDbType.NChar, 10, ParameterDirection.Input, 0, 0, null, DataRowVersion.Current, false, null, "", "", ""));
                _commandCollection[3]=new System.Data.SqlClient.SqlCommand();
                _commandCollection[3].Connection=Connection;
                _commandCollection[3].CommandText="dbo.spPlanEstimateUpdate";
                _commandCollection[3].CommandType=CommandType.StoredProcedure;
                _commandCollection[3].Parameters.Add(new System.Data.SqlClient.SqlParameter("@RETURN_VALUE", SqlDbType.Int, 4, ParameterDirection.ReturnValue, 10, 0, null, DataRowVersion.Current, false, null, "", "", ""));
                _commandCollection[3].Parameters.Add(new System.Data.SqlClient.SqlParameter("@PlanEstimateID", SqlDbType.Int, 4, ParameterDirection.Input, 10, 0, null, DataRowVersion.Current, false, null, "", "", ""));
                _commandCollection[3].Parameters.Add(new System.Data.SqlClient.SqlParameter("@ResourceID", SqlDbType.VarChar, 20, ParameterDirection.Input, 0, 0, null, DataRowVersion.Current, false, null, "", "", ""));
                _commandCollection[3].Parameters.Add(new System.Data.SqlClient.SqlParameter("@ActivityCode", SqlDbType.Int, 4, ParameterDirection.Input, 10, 0, null, DataRowVersion.Current, false, null, "", "", ""));
                _commandCollection[3].Parameters.Add(new System.Data.SqlClient.SqlParameter("@ResUsage", SqlDbType.VarChar, 20, ParameterDirection.Input, 0, 0, null, DataRowVersion.Current, false, null, "", "", ""));
                _commandCollection[3].Parameters.Add(new System.Data.SqlClient.SqlParameter("@BudgetQty", SqlDbType.Money, 8, ParameterDirection.Input, 19, 4, null, DataRowVersion.Current, false, null, "", "", ""));
                _commandCollection[3].Parameters.Add(new System.Data.SqlClient.SqlParameter("@UpdatedBy", SqlDbType.NChar, 10, ParameterDirection.Input, 0, 0, null, DataRowVersion.Current, false, null, "", "", ""));
                _commandCollection[3].Parameters.Add(new System.Data.SqlClient.SqlParameter("@Notes", SqlDbType.NVarChar, 500, ParameterDirection.Input, 0, 0, null, DataRowVersion.Current, false, null, "", "", ""));
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            [System.ComponentModel.Design.HelpKeyword("vs.data.TableAdapter")]
            [System.ComponentModel.DataObjectMethod(System.ComponentModel.DataObjectMethodType.Fill, true)]
            public virtual int Fill(dsDetail.spPlanEstimatesGetDataTable dataTable, string FilterString)
            {
                Adapter.SelectCommand=CommandCollection[0];
                if (FilterString is null)
                {
                    Adapter.SelectCommand.Parameters[1].Value=DBNull.Value;
                }
                else
                {
                    Adapter.SelectCommand.Parameters[1].Value=FilterString;
                }
                if (ClearBeforeFill==true)
                {
                    dataTable.Clear();
                }
                int returnValue = Adapter.Fill(dataTable);
                return returnValue;
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            [System.ComponentModel.Design.HelpKeyword("vs.data.TableAdapter")]
            [System.ComponentModel.DataObjectMethod(System.ComponentModel.DataObjectMethodType.Select, true)]
            public virtual dsDetail.spPlanEstimatesGetDataTable GetData(string FilterString)
            {
                Adapter.SelectCommand=CommandCollection[0];
                if (FilterString is null)
                {
                    Adapter.SelectCommand.Parameters[1].Value=DBNull.Value;
                }
                else
                {
                    Adapter.SelectCommand.Parameters[1].Value=FilterString;
                }
                var dataTable = new dsDetail.spPlanEstimatesGetDataTable();
                Adapter.Fill(dataTable);
                return dataTable;
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            [System.ComponentModel.Design.HelpKeyword("vs.data.TableAdapter")]
            public virtual int Update(dsDetail.spPlanEstimatesGetDataTable dataTable)
            {
                return Adapter.Update(dataTable);
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            [System.ComponentModel.Design.HelpKeyword("vs.data.TableAdapter")]
            public virtual int Update(dsDetail dataSet)
            {
                return Adapter.Update(dataSet, "spPlanEstimatesGet");
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            [System.ComponentModel.Design.HelpKeyword("vs.data.TableAdapter")]
            public virtual int Update(DataRow dataRow)
            {
                return Adapter.Update(new DataRow[] { dataRow });
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            [System.ComponentModel.Design.HelpKeyword("vs.data.TableAdapter")]
            public virtual int Update(DataRow[] dataRows)
            {
                return Adapter.Update(dataRows);
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            [System.ComponentModel.Design.HelpKeyword("vs.data.TableAdapter")]
            public virtual int spPlanEstimateDelete(int PlanEstimateID)
            {
                var command = CommandCollection[1];
                command.Parameters[1].Value=PlanEstimateID;
                var previousConnectionState = command.Connection.State;
                if ((command.Connection.State&ConnectionState.Open)!=ConnectionState.Open)
                {
                    command.Connection.Open();
                }
                int returnValue;
                try
                {
                    returnValue=command.ExecuteNonQuery();
                }
                finally
                {
                    if (previousConnectionState==ConnectionState.Closed)
                    {
                        command.Connection.Close();
                    }
                }
                return returnValue;
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            [System.ComponentModel.Design.HelpKeyword("vs.data.TableAdapter")]
            public virtual int spPlanEstimateInsert(string PlanGroup, string Elevation, int? ExteriorID, string CreatedBy)
            {
                var command = CommandCollection[2];
                if (PlanGroup is null)
                {
                    command.Parameters[1].Value=DBNull.Value;
                }
                else
                {
                    command.Parameters[1].Value=PlanGroup;
                }
                if (Elevation is null)
                {
                    command.Parameters[2].Value=DBNull.Value;
                }
                else
                {
                    command.Parameters[2].Value=Elevation;
                }
                if (ExteriorID.HasValue==true)
                {
                    command.Parameters[3].Value=ExteriorID.Value;
                }
                else
                {
                    command.Parameters[3].Value=DBNull.Value;
                }
                if (CreatedBy is null)
                {
                    command.Parameters[4].Value=DBNull.Value;
                }
                else
                {
                    command.Parameters[4].Value=CreatedBy;
                }
                var previousConnectionState = command.Connection.State;
                if ((command.Connection.State&ConnectionState.Open)!=ConnectionState.Open)
                {
                    command.Connection.Open();
                }
                int returnValue;
                try
                {
                    returnValue=command.ExecuteNonQuery();
                }
                finally
                {
                    if (previousConnectionState==ConnectionState.Closed)
                    {
                        command.Connection.Close();
                    }
                }
                return returnValue;
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            [System.ComponentModel.Design.HelpKeyword("vs.data.TableAdapter")]
            public virtual int spPlanEstimateUpdate(int? PlanEstimateID, string ResourceID, int? ActivityCode, string ResUsage, decimal? BudgetQty, string UpdatedBy, string Notes)
            {
                var command = CommandCollection[3];
                if (PlanEstimateID.HasValue==true)
                {
                    command.Parameters[1].Value=PlanEstimateID.Value;
                }
                else
                {
                    command.Parameters[1].Value=DBNull.Value;
                }
                if (ResourceID is null)
                {
                    command.Parameters[2].Value=DBNull.Value;
                }
                else
                {
                    command.Parameters[2].Value=ResourceID;
                }
                if (ActivityCode.HasValue==true)
                {
                    command.Parameters[3].Value=ActivityCode.Value;
                }
                else
                {
                    command.Parameters[3].Value=DBNull.Value;
                }
                if (ResUsage is null)
                {
                    command.Parameters[4].Value=DBNull.Value;
                }
                else
                {
                    command.Parameters[4].Value=ResUsage;
                }
                if (BudgetQty.HasValue==true)
                {
                    command.Parameters[5].Value=BudgetQty.Value;
                }
                else
                {
                    command.Parameters[5].Value=DBNull.Value;
                }
                if (UpdatedBy is null)
                {
                    command.Parameters[6].Value=DBNull.Value;
                }
                else
                {
                    command.Parameters[6].Value=UpdatedBy;
                }
                if (Notes is null)
                {
                    command.Parameters[7].Value=DBNull.Value;
                }
                else
                {
                    command.Parameters[7].Value=Notes;
                }
                var previousConnectionState = command.Connection.State;
                if ((command.Connection.State&ConnectionState.Open)!=ConnectionState.Open)
                {
                    command.Connection.Open();
                }
                int returnValue;
                try
                {
                    returnValue=command.ExecuteNonQuery();
                }
                finally
                {
                    if (previousConnectionState==ConnectionState.Closed)
                    {
                        command.Connection.Close();
                    }
                }
                return returnValue;
            }
        }

        /// <summary>
    /// TableAdapterManager is used to coordinate TableAdapters in the dataset to enable Hierarchical Update scenarios
    /// </summary>
        [System.ComponentModel.DesignerCategory("code")]
        [System.ComponentModel.ToolboxItem(true)]
        [System.ComponentModel.Designer("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerDesigner, Microsoft.VSD"+"esigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]

        [System.ComponentModel.Design.HelpKeyword("vs.data.TableAdapterManager")]
        public partial class TableAdapterManager : System.ComponentModel.Component
        {

            private UpdateOrderOption _updateOrder;

            private spPlanEstimatesGetTableAdapter _spPlanEstimatesGetTableAdapter;

            private bool _backupDataSetBeforeUpdate;

            private IDbConnection _connection;

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public UpdateOrderOption UpdateOrder
            {
                get
                {
                    return _updateOrder;
                }
                set
                {
                    _updateOrder=value;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            [System.ComponentModel.Editor("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso"+"ft.VSDesigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3"+"a", "System.Drawing.Design.UITypeEditor")]


            public spPlanEstimatesGetTableAdapter spPlanEstimatesGetTableAdapter
            {
                get
                {
                    return _spPlanEstimatesGetTableAdapter;
                }
                set
                {
                    _spPlanEstimatesGetTableAdapter=value;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public bool BackupDataSetBeforeUpdate
            {
                get
                {
                    return _backupDataSetBeforeUpdate;
                }
                set
                {
                    _backupDataSetBeforeUpdate=value;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            [System.ComponentModel.Browsable(false)]
            public IDbConnection Connection
            {
                get
                {
                    if (_connection is not null)
                    {
                        return _connection;
                    }
                    if (_spPlanEstimatesGetTableAdapter is not null&&_spPlanEstimatesGetTableAdapter.Connection is not null)
                    {
                        return _spPlanEstimatesGetTableAdapter.Connection;
                    }
                    return null;
                }
                set
                {
                    _connection=value;
                }
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            [System.ComponentModel.Browsable(false)]
            public int TableAdapterInstanceCount
            {
                get
                {
                    int count = 0;
                    if (_spPlanEstimatesGetTableAdapter is not null)
                    {
                        count=count+1;
                    }
                    return count;
                }
            }

            /// <summary>
        /// Update rows in top-down order.
        /// </summary>
            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            private int UpdateUpdatedRows(dsDetail dataSet, List<DataRow> allChangedRows, List<DataRow> allAddedRows)
            {
                int result = 0;
                if (_spPlanEstimatesGetTableAdapter is not null)
                {
                    DataRow[] updatedRows = dataSet.spPlanEstimatesGet.Select(null, null, DataViewRowState.ModifiedCurrent);
                    updatedRows=GetRealUpdatedRows(updatedRows, allAddedRows);
                    if (updatedRows is not null&&0<updatedRows.Length)
                    {
                        result=result+_spPlanEstimatesGetTableAdapter.Update(updatedRows);
                        allChangedRows.AddRange(updatedRows);
                    }
                }
                return result;
            }

            /// <summary>
        /// Insert rows in top-down order.
        /// </summary>
            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            private int UpdateInsertedRows(dsDetail dataSet, List<DataRow> allAddedRows)
            {
                int result = 0;
                if (_spPlanEstimatesGetTableAdapter is not null)
                {
                    DataRow[] addedRows = dataSet.spPlanEstimatesGet.Select(null, null, DataViewRowState.Added);
                    if (addedRows is not null&&0<addedRows.Length)
                    {
                        result=result+_spPlanEstimatesGetTableAdapter.Update(addedRows);
                        allAddedRows.AddRange(addedRows);
                    }
                }
                return result;
            }

            /// <summary>
        /// Delete rows in bottom-up order.
        /// </summary>
            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            private int UpdateDeletedRows(dsDetail dataSet, List<DataRow> allChangedRows)
            {
                int result = 0;
                if (_spPlanEstimatesGetTableAdapter is not null)
                {
                    DataRow[] deletedRows = dataSet.spPlanEstimatesGet.Select(null, null, DataViewRowState.Deleted);
                    if (deletedRows is not null&&0<deletedRows.Length)
                    {
                        result=result+_spPlanEstimatesGetTableAdapter.Update(deletedRows);
                        allChangedRows.AddRange(deletedRows);
                    }
                }
                return result;
            }

            /// <summary>
        /// Remove inserted rows that become updated rows after calling TableAdapter.Update(inserted rows) first
        /// </summary>
            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            private DataRow[] GetRealUpdatedRows(DataRow[] updatedRows, List<DataRow> allAddedRows)
            {
                if (updatedRows is null||updatedRows.Length<1)
                {
                    return updatedRows;
                }
                if (allAddedRows is null||allAddedRows.Count<1)
                {
                    return updatedRows;
                }
                var realUpdatedRows = new List<DataRow>();
                int i = 0;
                while (i<updatedRows.Length)
                {
                    var row = updatedRows[i];
                    if (allAddedRows.Contains(row)==false)
                    {
                        realUpdatedRows.Add(row);
                    }
                    i=i+1;
                }
                return realUpdatedRows.ToArray();
            }

            /// <summary>
        /// Update all changes to the dataset.
        /// </summary>
            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public virtual int UpdateAll(dsDetail dataSet)
            {
                if (dataSet is null)
                {
                    throw new ArgumentNullException("dataSet");
                }
                if (dataSet.HasChanges()==false)
                {
                    return 0;
                }
                if (_spPlanEstimatesGetTableAdapter is not null&&MatchTableAdapterConnection(_spPlanEstimatesGetTableAdapter.Connection)==false)
                {
                    throw new ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s"+"tring.");
                }
                var workConnection = Connection;
                if (workConnection is null)
                {
                    throw new ApplicationException("TableAdapterManager contains no connection information. Set each TableAdapterMana"+"ger TableAdapter property to a valid TableAdapter instance.");
                }
                bool workConnOpened = false;
                if ((workConnection.State&ConnectionState.Broken)==ConnectionState.Broken)
                {
                    workConnection.Close();
                }
                if (workConnection.State==ConnectionState.Closed)
                {
                    workConnection.Open();
                    workConnOpened=true;
                }
                var workTransaction = workConnection.BeginTransaction();
                if (workTransaction is null)
                {
                    throw new ApplicationException("The transaction cannot begin. The current data connection does not support transa"+"ctions or the current state is not allowing the transaction to begin.");
                }
                var allChangedRows = new List<DataRow>();
                var allAddedRows = new List<DataRow>();
                var adaptersWithAcceptChangesDuringUpdate = new List<System.Data.Common.DataAdapter>();
                var revertConnections = new Dictionary<object, IDbConnection>();
                int result = 0;
                DataSet backupDataSet = null;
                if (BackupDataSetBeforeUpdate)
                {
                    backupDataSet=new DataSet();
                    backupDataSet.Merge(dataSet);
                }
                try
                {
                    // ---- Prepare for update -----------
                    // 
                    if (_spPlanEstimatesGetTableAdapter is not null)
                    {
                        revertConnections.Add(_spPlanEstimatesGetTableAdapter, _spPlanEstimatesGetTableAdapter.Connection);
                        _spPlanEstimatesGetTableAdapter.Connection=(System.Data.SqlClient.SqlConnection)workConnection;
                        _spPlanEstimatesGetTableAdapter.Transaction=(System.Data.SqlClient.SqlTransaction)workTransaction;
                        if (_spPlanEstimatesGetTableAdapter.Adapter.AcceptChangesDuringUpdate)
                        {
                            _spPlanEstimatesGetTableAdapter.Adapter.AcceptChangesDuringUpdate=false;
                            adaptersWithAcceptChangesDuringUpdate.Add(_spPlanEstimatesGetTableAdapter.Adapter);
                        }
                    }
                    // 
                    // ---- Perform updates -----------
                    // 
                    if (UpdateOrder==UpdateOrderOption.UpdateInsertDelete)
                    {
                        result=result+UpdateUpdatedRows(dataSet, allChangedRows, allAddedRows);
                        result=result+UpdateInsertedRows(dataSet, allAddedRows);
                    }
                    else
                    {
                        result=result+UpdateInsertedRows(dataSet, allAddedRows);
                        result=result+UpdateUpdatedRows(dataSet, allChangedRows, allAddedRows);
                    }
                    result=result+UpdateDeletedRows(dataSet, allChangedRows);
                    // 
                    // ---- Commit updates -----------
                    // 
                    workTransaction.Commit();
                    if (0<allAddedRows.Count)
                    {
                        var rows = new DataRow[allAddedRows.Count];
                        allAddedRows.CopyTo(rows);
                        int i = 0;
                        while (i<rows.Length)
                        {
                            var row = rows[i];
                            row.AcceptChanges();
                            i=i+1;
                        }
                    }
                    if (0<allChangedRows.Count)
                    {
                        var rows = new DataRow[allChangedRows.Count];
                        allChangedRows.CopyTo(rows);
                        int i = 0;
                        while (i<rows.Length)
                        {
                            var row = rows[i];
                            row.AcceptChanges();
                            i=i+1;
                        }
                    }
                }
                catch (Exception ex)
                {
                    workTransaction.Rollback();
                    // ---- Restore the dataset -----------
                    if (BackupDataSetBeforeUpdate)
                    {
                        Debug.Assert(backupDataSet is not null);
                        dataSet.Clear();
                        dataSet.Merge(backupDataSet);
                    }
                    else if (0<allAddedRows.Count)
                    {
                        var rows = new DataRow[allAddedRows.Count];
                        allAddedRows.CopyTo(rows);
                        int i = 0;
                        while (i<rows.Length)
                        {
                            var row = rows[i];
                            row.AcceptChanges();
                            row.SetAdded();
                            i=i+1;
                        }
                    }
                    throw ex;
                }
                finally
                {
                    if (workConnOpened)
                    {
                        workConnection.Close();
                    }
                    if (_spPlanEstimatesGetTableAdapter is not null)
                    {
                        _spPlanEstimatesGetTableAdapter.Connection=(System.Data.SqlClient.SqlConnection)revertConnections[_spPlanEstimatesGetTableAdapter];
                        _spPlanEstimatesGetTableAdapter.Transaction=null;
                    }
                    if (0<adaptersWithAcceptChangesDuringUpdate.Count)
                    {
                        var adapters = new System.Data.Common.DataAdapter[adaptersWithAcceptChangesDuringUpdate.Count];
                        adaptersWithAcceptChangesDuringUpdate.CopyTo(adapters);
                        int i = 0;
                        while (i<adapters.Length)
                        {
                            var adapter = adapters[i];
                            adapter.AcceptChangesDuringUpdate=true;
                            i=i+1;
                        }
                    }
                }
                return result;
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            protected virtual void SortSelfReferenceRows(DataRow[] rows, DataRelation relation, bool childFirst)
            {
                Array.Sort(rows, new SelfReferenceComparer(relation, childFirst));
            }

            [DebuggerNonUserCode()]
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            protected virtual bool MatchTableAdapterConnection(IDbConnection inputConnection)
            {
                if (_connection is not null)
                {
                    return true;
                }
                if (Connection is null||inputConnection is null)
                {
                    return true;
                }
                if (string.Equals(Connection.ConnectionString, inputConnection.ConnectionString, StringComparison.Ordinal))
                {
                    return true;
                }
                return false;
            }

            /// <summary>
        /// Update Order Option
        /// </summary>
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public enum UpdateOrderOption
            {

                InsertUpdateDelete = 0,

                UpdateInsertDelete = 1
            }

            /// <summary>
        /// Used to sort self-referenced table's rows
        /// </summary>
            [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            private class SelfReferenceComparer : object, IComparer<DataRow>
            {

                private DataRelation _relation;

                private int _childFirst;

                [DebuggerNonUserCode()]
                [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
                internal SelfReferenceComparer(DataRelation relation, bool childFirst) : base()
                {
                    _relation=relation;
                    if (childFirst)
                    {
                        _childFirst=-1;
                    }
                    else
                    {
                        _childFirst=1;
                    }
                }

                [DebuggerNonUserCode()]
                [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
                private DataRow GetRoot(DataRow row, ref int distance)
                {
                    Debug.Assert(row is not null);
                    var root = row;
                    distance=0;

                    IDictionary<DataRow, DataRow> traversedRows = new Dictionary<DataRow, DataRow>();
                    traversedRows[row]=row;

                    var parent = row.GetParentRow(_relation, DataRowVersion.Default);

                    while (parent is not null&&traversedRows.ContainsKey(parent)==false)
                    {
                        distance=distance+1;
                        root=parent;
                        traversedRows[parent]=parent;
                        parent=parent.GetParentRow(_relation, DataRowVersion.Default);

                    }

                    if (distance==0)
                    {
                        traversedRows.Clear();
                        traversedRows[row]=row;
                        parent=row.GetParentRow(_relation, DataRowVersion.Original);

                        while (parent is not null&&traversedRows.ContainsKey(parent)==false)
                        {
                            distance=distance+1;
                            root=parent;
                            traversedRows[parent]=parent;
                            parent=parent.GetParentRow(_relation, DataRowVersion.Original);

                        }
                    }

                    return root;
                }

                [DebuggerNonUserCode()]
                [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
                public int Compare(DataRow row1, DataRow row2)
                {
                    if (ReferenceEquals(row1, row2))
                    {
                        return 0;
                    }
                    if (row1 is null)
                    {
                        return -1;
                    }
                    if (row2 is null)
                    {
                        return 1;
                    }

                    int distance1 = 0;
                    var root1 = GetRoot(row1, ref distance1);

                    int distance2 = 0;
                    var root2 = GetRoot(row2, ref distance2);

                    if (ReferenceEquals(root1, root2))
                    {
                        return _childFirst*distance1.CompareTo(distance2);
                    }
                    else
                    {
                        Debug.Assert(root1.Table is not null&&root2.Table is not null);
                        if (root1.Table.Rows.IndexOf(root1)<root2.Table.Rows.IndexOf(root2))
                        {
                            return -1;
                        }
                        else
                        {
                            return 1;
                        }
                    }
                }
            }
        }
    }
}